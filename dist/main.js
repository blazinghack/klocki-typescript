/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 66);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Packet {
    _readPacketData(buf, reg) {
        throw new Error("Method not implemented.");
    }
    _writePacketData(buf, reg) {
        throw new Error("Method not implemented.");
    }
    _processPacket(handler) {
        throw new Error("Method not implemented.");
    }
}
exports._Packet = _Packet;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(131)
var ieee754 = __webpack_require__(132)
var isArray = __webpack_require__(133)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
const BlockRegistry_1 = __webpack_require__(67);
const CPacketLoginStart_1 = __webpack_require__(77);
const EnumConnectionState_1 = __webpack_require__(32);
const Deque_1 = __webpack_require__(20);
const CPacketChatMessage_1 = __webpack_require__(78);
const CHandshake_1 = __webpack_require__(79);
const NetworkManager_1 = __webpack_require__(80);
const Timer_1 = __webpack_require__(83);
const AudioManager_1 = __webpack_require__(84);
const ModelRegistry_1 = __webpack_require__(85);
const RenderList_1 = __webpack_require__(87);
const NetHandlerLoginClient_1 = __webpack_require__(90);
const TextureManager_1 = __webpack_require__(130);
const FontRenderer_1 = __webpack_require__(174);
const ShaderUI_1 = __webpack_require__(175);
const Display_1 = __webpack_require__(176);
const GameSettings_1 = __webpack_require__(177);
const ShaderWorld_1 = __webpack_require__(178);
const GuiChat_1 = __webpack_require__(179);
const WorldRenderer_1 = __webpack_require__(181);
const Controls_1 = __webpack_require__(182);
const Frustum_1 = __webpack_require__(183);
const ShaderMobs_1 = __webpack_require__(63);
const LineRenderer_1 = __webpack_require__(184);
const ShaderLines_1 = __webpack_require__(185);
const OriginRenderOcTree_1 = __webpack_require__(21);
const UIRenderer_1 = __webpack_require__(186);
const EntityRenders_1 = __webpack_require__(187);
const GuiOverlayEquipment_1 = __webpack_require__(191);
const ItemRegistry_1 = __webpack_require__(192);
const util_1 = __webpack_require__(4);
class _Klocki {
    constructor() {
        this._protocol = 498;
        this._assetsVersion = "1.14";
        this._theWorld = null;
        this._networkManager = null;
        this._lastStartedJumping = false;
        this._flyToggleTimer = 0;
        this._startedJumping = false;
        this._lastJumping = false;
        this._jumping = false;
        this._personViewMode = 0;
        this._timer = new Timer_1._Timer(20);
        this._isGamePaused = false;
        this._gameSettings = new GameSettings_1._GameSettings();
        this._gameSettings._loadOptions();
        this._display = new Display_1._Display();
        this._fpsDeque = new Deque_1._Deque();
        this._scheduledTasks = new Deque_1._Deque();
        this._frustum = new Frustum_1._Frustum();
        this._smoothCam = false;
        this._yawSmoothSpeed = 0;
        this._pitchSmoothSpeed = 0;
        this._zoomed = false;
        this._glBuffersEntitiesIndex = 0;
        this._glBuffersEntitiesCount = 3;
        this._sectionLookingAt = null;
        this._renderX = 0;
        this._renderY = 65;
        this._renderZ = 0;
        this._reuseGlBuffers = new Array(3);
        for (let i = 0; i < this._reuseGlBuffers.length; i++) {
            this._reuseGlBuffers[i] = [];
        }
        this._reuseGlBuffersIndexRemover = 1;
        this._reuseGlBuffersIndexAdder = 0;
        const sectionsLen = Math.pow(48, 2);
        const bakeSec = this._bakeSectionsByDistanceSquared = new Array(sectionsLen);
        const sec = this._sectionsByDistanceSquared = new Array(sectionsLen);
        const secsPerDistance = this._sectionsPerChunkDistance = 2000;
        for (let i = 0; i < bakeSec.length; i++) {
            bakeSec[i] = new Array(secsPerDistance + 1);
            bakeSec[i][0] = 0;
            sec[i] = new Array(secsPerDistance + 1);
            sec[i][0] = 0;
        }
        this._scheduledBakeTasks = new Deque_1._Deque();
        this._joinedThisFrame = 0;
        this._maxJoinsPerFrame = 3;
        window.vec4 = gl_matrix_1.vec4;
        window.mat4 = gl_matrix_1.mat4;
        window.kscope = function (s) {
            return eval(s);
        };
        this._run();
    }
    static _randomString(length) {
        let result = '';
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength = characters.length;
        for (let i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }
    static _generateURL(host, port) {
        host = btoa(host).replace(/\+/g, '-').replace(/\//g, '_');
        return `wss://localhost:55565/ws`;
    }
    _getPartialTicks() {
        return this._timer._renderPartialTicks;
    }
    _run() {
        this._startGame();
    }
    _nextFrame() {
        requestAnimationFrame((time) => this._currentFrame(time));
    }
    _currentFrame(time) {
        this._runGameLoop(time);
    }
    _runTick() {
        this._guiChat._tick();
        this._yawSmoothSpeed *= 0.98;
        this._pitchSmoothSpeed *= 0.98;
        const world = this._theWorld;
        if (world != null) {
            const thePlayer = world._thePlayer;
            this._lastStartedJumping = this._startedJumping;
            this._lastJumping = this._jumping;
            this._jumping = this._controls._pressed.get(' ') == true;
            this._startedJumping = this._jumping && !this._lastJumping;
            if (!this._lastStartedJumping && this._startedJumping) {
                if (this._flyToggleTimer == 0) {
                    this._flyToggleTimer = 7;
                }
                else {
                    thePlayer._isFlying = !thePlayer._isFlying;
                    this._flyToggleTimer = 0;
                }
            }
            if (this._flyToggleTimer > 0) {
                this._flyToggleTimer--;
            }
            thePlayer._movementForward = 0;
            thePlayer._movementStrafe = 0;
            if (this._controls._pressed.get('w')) {
                thePlayer._movementForward += 1;
            }
            if (this._controls._pressed.get('s')) {
                thePlayer._movementForward -= 1;
            }
            if (this._controls._pressed.get(' ')) {
                thePlayer._jumping = true;
            }
            if (this._controls._pressed.get('a')) {
                thePlayer._movementStrafe += 1;
            }
            if (this._controls._pressed.get('d')) {
                thePlayer._movementStrafe -= 1;
            }
            this._zoomed = this._controls._pressed.get('c') == true;
            thePlayer._setSprinting(this._controls._pressed.get('shift') == true);
            const sneak = this._controls._pressed.get('tab') === true;
            thePlayer._setSneaking(sneak);
            thePlayer._movementForward += thePlayer._touchMoveForward;
            thePlayer._movementStrafe += thePlayer._touchMoveStrafe;
            if (thePlayer._movementForward > 1) {
                thePlayer._movementForward = 1;
            }
            if (thePlayer._movementForward < -1) {
                thePlayer._movementForward = -1;
            }
            if (thePlayer._movementStrafe > 1) {
                thePlayer._movementStrafe = 1;
            }
            if (thePlayer._movementStrafe < -1) {
                thePlayer._movementStrafe = -1;
            }
            world._tick();
        }
    }
    _schedule(f) {
        this._scheduledTasks._enqueue(f);
    }
    _scheduleBaking(task) {
        this._scheduledBakeTasks._enqueue(task);
    }
    _runGameLoop(time) {
        if (this._isGamePaused && this._theWorld != null) {
            const f = this._timer._renderPartialTicks;
            this._timer._updateTimer(time);
            this._timer._renderPartialTicks = f;
        }
        else {
            this._timer._updateTimer(time);
        }
        while (this._scheduledTasks._size() !== 0) {
            const f = this._scheduledTasks._dequeue();
            f();
        }
        const elapsed = this._timer._elapsedTicks;
        for (let j = 0; j < elapsed; j++) {
            this._runTick();
        }
        this._renderGame();
        this._nextFrame();
    }
    _runheavyTasks(deadline) {
        window.requestIdleCallback((deadline) => {
            this._runheavyTasks(deadline);
        }, { timeout: 1000 });
        this._networkManager._idleCallback();
        let baked = 0;
        const maxBakes = deadline.didTimeout ? 1 : 5;
        let secs = this._bakeSectionsByDistanceSquared;
        theBaking: if (1) {
            for (let secsIndex = 0; secsIndex < secs.length; ++secsIndex) {
                const sections = secs[secsIndex];
                const count = sections[0];
                for (let i = 1; i <= count; i++) {
                    const t = sections[i]._bakeTask;
                    if (t != null) {
                        if (!t._done) {
                            t._bake(this._worldRendererBaker);
                            baked++;
                            if (baked >= maxBakes) {
                                break theBaking;
                            }
                            if (deadline.timeRemaining() == 0) {
                                break theBaking;
                            }
                        }
                    }
                }
            }
            while (baked < maxBakes && this._scheduledBakeTasks._size() > 0) {
                const t = this._scheduledBakeTasks._dequeue();
                if (!t._done) {
                    t._bake(this._worldRendererBaker);
                    baked++;
                }
                if (deadline.timeRemaining() == 0) {
                    break;
                }
            }
        }
    }
    send(msg) {
        if (this._networkManager) {
            this._networkManager._sendPacket(new CPacketChatMessage_1._CPacketChatMessage(msg));
        }
    }
    _makeBlurTex() {
        const targetTextureWidth = this._display._width;
        const targetTextureHeight = this._display._height;
        const gl = this._display._gl;
        gl.bindTexture(gl.TEXTURE_2D, this._blurTexture);
        {
            const level = 0;
            const internalFormat = gl.RGBA;
            const border = 0;
            const format = gl.RGBA;
            const type = gl.UNSIGNED_BYTE;
            const data = null;
            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, data);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        }
    }
    _scheduleDeleteBuffer(buf) {
        this._reuseGlBuffers[this._reuseGlBuffersIndexAdder].push(buf);
    }
    _renderGame() {
        const gl = this._display._gl;
        const toDelete = this._reuseGlBuffers[this._reuseGlBuffersIndexRemover];
        for (let i = 0; i < toDelete.length; i++) {
            gl.deleteBuffer(toDelete[i]);
        }
        this._reuseGlBuffers[this._reuseGlBuffersIndexRemover] = [];
        if (++this._reuseGlBuffersIndexRemover >= this._reuseGlBuffers.length) {
            this._reuseGlBuffersIndexRemover = 0;
        }
        if (++this._reuseGlBuffersIndexAdder >= this._reuseGlBuffers.length) {
            this._reuseGlBuffersIndexAdder = 0;
        }
        let bakeSecs = this._bakeSectionsByDistanceSquared;
        let secs = this._sectionsByDistanceSquared;
        for (let secsIndex = 0; secsIndex < secs.length; ++secsIndex) {
            bakeSecs[secsIndex][0] = 0;
            secs[secsIndex][0] = 0;
        }
        if (this._smoothCam || this._zoomed) {
            const world = this._theWorld;
            if (world) {
                const player = world._thePlayer;
                const delta = this._timer._deltaTime;
                player._yaw += this._yawSmoothSpeed * delta;
                player._pitch += this._pitchSmoothSpeed * delta;
                player._fixPitch();
            }
        }
        this._textureManager._resetBoxBuf();
        const testMatrix = gl_matrix_1.mat4.create();
        this._textureManager._pushGroupMatrix(testMatrix);
        this._lineRenderer._reset();
        const uir = this._uiRenderer;
        this._fontRenderer._reset();
        this._uiRenderer._reset();
        this._joinedThisFrame = 0;
        gl.clearColor(0.6, 0.7, 1, 1);
        gl.clearDepth(1);
        gl.enable(gl.DEPTH_TEST);
        gl.enable(gl.CULL_FACE);
        gl.disable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        gl.frontFace(gl.CW);
        gl.depthFunc(gl.LEQUAL);
        gl.bindVertexArray(this._mainVao);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        const fieldOfView = (this._zoomed ? 20 : 70) * Math.PI / 180;
        const aspect = this._display._width / this._display._height;
        const zNear = 0.05;
        const zFar = 1000;
        const projectionMatrix = gl_matrix_1.mat4.create();
        gl_matrix_1.mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);
        const modelViewMatrix = gl_matrix_1.mat4.create();
        let debugBlock = "none";
        let debugBlock2 = "";
        let debugBlock3 = "";
        if (this._theWorld !== null && this._theWorld._thePlayer !== null) {
            const thePlayer = this._theWorld._thePlayer;
            gl_matrix_1.mat4.rotate(modelViewMatrix, modelViewMatrix, thePlayer._pitch, [1, 0, 0]);
            gl_matrix_1.mat4.rotate(modelViewMatrix, modelViewMatrix, thePlayer._yaw + Math.PI, [0, 1, 0]);
            const rx = thePlayer._renderX(this._timer._renderPartialTicks);
            const ry = thePlayer._renderY(this._timer._renderPartialTicks) + 1.62;
            const rz = thePlayer._renderZ(this._timer._renderPartialTicks);
            this._renderX = rx;
            this._renderY = ry;
            this._renderZ = rz;
            const now = this._audioManager._audioCtx.currentTime;
            if (this._audioManager._listener.positionX) {
                this._audioManager._listener.positionX.setValueAtTime(rx, now);
                this._audioManager._listener.positionY.setValueAtTime(ry, now);
                this._audioManager._listener.positionZ.setValueAtTime(rz, now);
            }
            else {
                this._audioManager._listener.setPosition(rx, ry, rz);
            }
            const audioMatrix = gl_matrix_1.mat4.create();
            gl_matrix_1.mat4.invert(audioMatrix, modelViewMatrix);
            gl_matrix_1.vec3.transformMat4(_Klocki._utilVec3, [0, 0, -1], audioMatrix);
            const viewx = _Klocki._utilVec3[0];
            const viewy = _Klocki._utilVec3[1];
            const viewz = _Klocki._utilVec3[2];
            gl_matrix_1.vec3.transformMat4(_Klocki._utilVec3, [0, 1, 0], audioMatrix);
            const upx = _Klocki._utilVec3[0];
            const upy = _Klocki._utilVec3[1];
            const upz = _Klocki._utilVec3[2];
            if (this._audioManager._listener.forwardX) {
                this._audioManager._listener.forwardX.setValueAtTime(viewx, now);
                this._audioManager._listener.forwardY.setValueAtTime(viewy, now);
                this._audioManager._listener.forwardZ.setValueAtTime(viewz, now);
                this._audioManager._listener.upX.setValueAtTime(upx, now);
                this._audioManager._listener.upY.setValueAtTime(upy, now);
                this._audioManager._listener.upZ.setValueAtTime(upz, now);
            }
            else {
                this._audioManager._listener.setOrientation(viewx, viewy, viewz, upx, upy, upz);
            }
            if (this._personViewMode == 1) {
                gl_matrix_1.mat4.translate(modelViewMatrix, modelViewMatrix, [viewx * 4, viewy * 4, viewz * 4]);
            }
            if (this._personViewMode == 2) {
            }
            gl_matrix_1.mat4.translate(modelViewMatrix, modelViewMatrix, [-rx, -ry, -rz]);
            const blockPos = this._theWorld._traceAnyBlock(200, new Float64Array([rx, ry, rz]), new Float64Array([viewx, viewy, viewz]));
            if (blockPos != null) {
                debugBlock = blockPos[0] + " " + blockPos[1] + " " + blockPos[2];
                const section = this._theWorld._getSection(blockPos[0] >> 4, blockPos[1] >> 4, blockPos[2] >> 4);
                this._sectionLookingAt = section;
                if (section != null) {
                    if (section._debugInfo) {
                        debugBlock3 = section._debugInfo;
                    }
                    debugBlock3 += " " + this._theWorld._isUglyChunkLoaded(blockPos[0] >> 4, blockPos[2] >> 4);
                }
                const stateId = this._theWorld._getBlockType(blockPos[0], blockPos[1], blockPos[2]);
                const btype = stateId >> 4;
                const bdata = stateId & 15;
                const block = this._blockRegistry._byStateId(stateId);
                if (this._protocol >= 340) {
                    if (block) {
                        debugBlock2 = stateId + "=" + block._baseStateId + "+" + (stateId - block._baseStateId);
                    }
                    else {
                        debugBlock2 = stateId + "=?";
                    }
                }
                else {
                    debugBlock2 = stateId + "=" + btype + ":" + bdata;
                }
                if (block) {
                    debugBlock2 += " " + block._name;
                }
                const delta = 0.001;
                const sx = blockPos[0] - delta;
                const sy = blockPos[1] - delta;
                const sz = blockPos[2] - delta;
                const s = 1 + 2 * delta;
                this._lineRenderer._drawOutline(sx, sy, sz, s, s, s, 0xFF000000);
            }
        }
        gl_matrix_1.mat4.multiply(projectionMatrix, projectionMatrix, modelViewMatrix);
        this._frustum._update(projectionMatrix);
        gl.useProgram(this._shaderWorld._program);
        gl.uniformMatrix4fv(this._shaderWorld._uniformLocations._projectionMatrix, false, projectionMatrix);
        this._shaderWorld._setScreenSize(1 * Math.min(this._display._width, this._display._height));
        this._shaderWorld._zeroOffset();
        this._renderList._renderAll(this._worldRenderer, this._shaderWorld);
        gl.useProgram(this._shaderMobs._program);
        gl.uniformMatrix4fv(this._shaderMobs._uniformLocations._projectionMatrix, false, projectionMatrix);
        gl.uniform1i(this._shaderMobs._uniformLocations._uSampler, 0);
        gl.uniform1i(this._shaderMobs._uniformLocations._uGroupinfoSampler, 1);
        if (this._theWorld !== null) {
            this._theWorld._renderEntities();
            this._textureManager._uploadGroupParamTex();
            this._worldRendererMobs._endAndUpload(this._shaderMobs, this._glBuffersEntities[this._glBuffersEntitiesIndex]);
            if (++this._glBuffersEntitiesIndex >= this._glBuffersEntitiesCount) {
                this._glBuffersEntitiesIndex = 0;
            }
        }
        gl.useProgram(this._shaderLines._program);
        gl.uniformMatrix4fv(this._shaderLines._uniformLocations._projectionMatrix, false, projectionMatrix);
        this._lineRenderer._endAndUpload(this._shaderLines);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.enable(gl.BLEND);
        gl.useProgram(this._shaderUI._program);
        const uiMatrix = gl_matrix_1.mat4.create();
        gl_matrix_1.mat4.ortho(uiMatrix, 0, this._display._width << 1, this._display._height << 1, 0, -100, 100);
        gl.uniformMatrix4fv(this._shaderUI._uniformLocations._uiMatrix, false, uiMatrix);
        if (this._theWorld == null) {
            const sc = 2;
            const cx = this._display._width / 2;
            const cy = this._display._height / 2;
            const size = Math.min(cx, cy);
            uir._pos(sc * (cx - size), sc * (cy - size), 0)._tex(0, 0)._color(0xFFFFFFFF)._endVertex();
            uir._pos(sc * (cx + size), sc * (cy - size), 0)._tex(1, 0)._color(0xFFFFFFFF)._endVertex();
            uir._pos(sc * (cx - size), sc * (cy + size), 0)._tex(0, 1)._color(0xFFFFFFFF)._endVertex();
            uir._pos(sc * (cx + size), sc * (cy + size), 0)._tex(1, 1)._color(0xFFFFFFFF)._endVertex();
        }
        this._calcFps();
        const fr = this._fontRenderer;
        fr._drawString("\xa7a" + this._fpsDeque._size() + "fps", 1, 1, 0xFFFFFFFF, true);
        if (this._theWorld) {
            const thePlayer = this._theWorld._thePlayer;
            fr._drawString("\xa7eYaw:  " + Math.round((thePlayer._yaw * (180 / Math.PI)) * 10) / 10, 1, 11, 0xFFFFFFFF, true);
            fr._drawString("\xa7ePitch:" + Math.round((thePlayer._pitch * (180 / Math.PI)) * 10) / 10, 1, 21, 0xFFFFFFFF, true);
            fr._drawString("\xa7eX:" + Math.round(thePlayer._posX * 10) / 10, 1, 31, 0xFFFFFFFF, true);
            fr._drawString("\xa7eY:" + Math.round(thePlayer._posY * 10) / 10, 1, 41, 0xFFFFFFFF, true);
            fr._drawString("\xa7eZ:" + Math.round(thePlayer._posZ * 10) / 10, 1, 51, 0xFFFFFFFF, true);
            fr._drawString("\xa7eVRAM:" + Math.round((OriginRenderOcTree_1._OriginRenderOcTree._usedVideoMemory / (1024 * 1024)) * 10) / 10, 1, 61, 0xFFFFFFFF, true);
            fr._drawString("\xa7eBlock:" + debugBlock, this._display._guiWidth - 190, 1, 0xFFFFFFFF, true);
            fr._drawString("\xa7e" + debugBlock2, this._display._guiWidth - 190, 11, 0xFFFFFFFF, true);
            fr._drawString("\xa7e" + debugBlock3, this._display._guiWidth - 190, 21, 0xFFFFFFFF, true);
            fr._drawString("\xa7echunks: " + this._theWorld._loadedUglyLimitedHeightChunks.size, this._display._guiWidth - 190, 41, 0xFFFFFFFF, true);
        }
        this._guiChat._render();
        this._guiOverlayEquipment._render();
        uir._endAndUpload(this._shaderUI);
        gl.flush();
    }
    _calcFps() {
        const now = Date.now();
        const nowLater = now + 1000;
        const nowBefore = now - 1000;
        while (this._fpsDeque._size() > 0) {
            const el = this._fpsDeque._peek(-1);
            if (el > nowBefore && el < nowLater) {
                break;
            }
            this._fpsDeque._dequeue();
        }
        this._fpsDeque._enqueue(now);
    }
    _canJoinNextRegion() {
        return this._joinedThisFrame++ < this._maxJoinsPerFrame;
    }
    _cyclePersonView() {
        this._personViewMode++;
        if (this._personViewMode > 2) {
            this._personViewMode = 0;
        }
    }
    _toggleSmoothCam() {
        this._smoothCam = !this._smoothCam;
    }
    static _hashToPath(hash) {
        return "assets/objects/" + hash.substr(0, 2) + "/" + hash;
    }
    _startGame() {
        this._controls = new Controls_1._Controls(this);
        this._shaderUI = new ShaderUI_1._ShaderUI(this);
        this._shaderWorld = new ShaderWorld_1._ShaderWorld(this);
        this._shaderMobs = new ShaderMobs_1._ShaderMobs(this);
        this._shaderLines = new ShaderLines_1._ShaderLines(this);
        this._renderList = new RenderList_1._RenderList(this, 8, 1, 8);
        this._textureManager = new TextureManager_1._TextureManager(this);
        this._uiRenderer = new UIRenderer_1._UIRenderer(this);
        this._fontRenderer = new FontRenderer_1._FontRenderer(this);
        this._worldRenderer = new WorldRenderer_1._WorldRenderer(this, 2 * 1024 * 1024, false, false);
        this._lineRenderer = new LineRenderer_1._LineRenderer(this);
        this._worldRendererBaker = new WorldRenderer_1._WorldRenderer(this, 8 * 1024 * 1024, false, false);
        this._worldRendererMobs = new WorldRenderer_1._WorldRenderer(this, 32 * 1024 * 1024, false, true);
        this._worldRendererMobsHelper = new WorldRenderer_1._WorldRenderer(this, 0.5 * 1024 * 1024, false, true);
        fetch("assets/indexes/" + this._assetsVersion + ".json").then(response => {
            return response.json();
        }).then(assetsJson => {
            this._assetsJson = assetsJson;
            if (!this._assetsJson.objects) {
                throw new Error("no objects found in assets index file");
            }
            const soundsFileHash = this._assetsJson.objects[_Klocki._forbiddenWord + "/sounds.json"].hash;
            if (!util_1.isString(soundsFileHash)) {
                throw new Error("soundsFileHash is not a string");
            }
            const soundsFilePath = _Klocki._hashToPath(soundsFileHash);
            fetch(soundsFilePath).then(response => {
                return response.json();
            }).then(soundsJson => {
                this._soundsJson = soundsJson;
                this._startGameSecond();
            });
        });
    }
    _startGameSecond() {
        this._modelRegistry = new ModelRegistry_1._ModelRegistry(this);
        this._blockRegistry = new BlockRegistry_1._BlockRegistry(this._textureManager, this._modelRegistry);
        this._blockRegistry._registerBlocks(this._protocol);
        this._blockRegistry._makeGlobalPalette(this._protocol >= 107);
        this._itemRegistry = new ItemRegistry_1._ItemRegistry(this);
        this._itemRegistry._registerItems();
        this._entityRenders = new EntityRenders_1._EntityRenders(this);
        this._audioManager = new AudioManager_1._AudioManager(this);
        const panner = this._audioManager._newPanner();
        panner._setPosition(-150, 75, 150);
        this._guiChat = new GuiChat_1._GuiChat(this);
        this._guiOverlayEquipment = new GuiOverlayEquipment_1._GuiOverlayEquipment(this);
        if (!this._networkManager) {
            this._networkManager = new NetworkManager_1._NetworkManager(this, _Klocki._generateURL("127.0.0.1", 20000));
            this._networkManager._packetListener = new NetHandlerLoginClient_1._NetHandlerLoginClient(this);
            this._networkManager._sendPacket(new CHandshake_1._CHandshake(this._protocol, "klocki.pl", 25565, EnumConnectionState_1._EnumConnectionState._Login));
            this._networkManager._sendPacket(new CPacketLoginStart_1._CPacketLoginStart("Klocek_" + (this._controls._isMobile ? "m_" : "") + _Klocki._randomString(6)));
        }
        const gl = this._display._gl;
        this._mainVao = gl.createVertexArray();
        this._glBuffersEntities = new Array(this._glBuffersEntitiesCount);
        for (let i = 0; i < this._glBuffersEntities.length; i++) {
            const buf = this._display._gl.createBuffer();
            this._glBuffersEntities[i] = buf;
            gl.bindBuffer(gl.ARRAY_BUFFER, buf);
            gl.bufferData(gl.ARRAY_BUFFER, 1024 * 1024 * 32, gl.DYNAMIC_DRAW);
        }
        const ri = this._randomInts = new Uint32Array(1024 * 16);
        for (let i = 0; i < ri.length; ++i) {
            ri[i] = Math.floor(Math.random() * Math.pow(2, 21));
        }
        window.requestIdleCallback((deadline) => { this._runheavyTasks(deadline); }, { timeout: 500 });
        this._nextFrame();
    }
}
exports._Klocki = _Klocki;
_Klocki._utilVec3 = gl_matrix_1.vec3.create();
_Klocki._utilVec4 = gl_matrix_1.vec4.create();
_Klocki._forbiddenWord = "mine" + "craft";


/***/ }),
/* 3 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(135);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(136);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var common_namespaceObject = {};
__webpack_require__.r(common_namespaceObject);
__webpack_require__.d(common_namespaceObject, "EPSILON", function() { return EPSILON; });
__webpack_require__.d(common_namespaceObject, "ARRAY_TYPE", function() { return ARRAY_TYPE; });
__webpack_require__.d(common_namespaceObject, "RANDOM", function() { return RANDOM; });
__webpack_require__.d(common_namespaceObject, "setMatrixArrayType", function() { return setMatrixArrayType; });
__webpack_require__.d(common_namespaceObject, "toRadian", function() { return toRadian; });
__webpack_require__.d(common_namespaceObject, "equals", function() { return equals; });
var mat2_namespaceObject = {};
__webpack_require__.r(mat2_namespaceObject);
__webpack_require__.d(mat2_namespaceObject, "create", function() { return create; });
__webpack_require__.d(mat2_namespaceObject, "clone", function() { return clone; });
__webpack_require__.d(mat2_namespaceObject, "copy", function() { return copy; });
__webpack_require__.d(mat2_namespaceObject, "identity", function() { return identity; });
__webpack_require__.d(mat2_namespaceObject, "fromValues", function() { return fromValues; });
__webpack_require__.d(mat2_namespaceObject, "set", function() { return set; });
__webpack_require__.d(mat2_namespaceObject, "transpose", function() { return transpose; });
__webpack_require__.d(mat2_namespaceObject, "invert", function() { return invert; });
__webpack_require__.d(mat2_namespaceObject, "adjoint", function() { return adjoint; });
__webpack_require__.d(mat2_namespaceObject, "determinant", function() { return determinant; });
__webpack_require__.d(mat2_namespaceObject, "multiply", function() { return multiply; });
__webpack_require__.d(mat2_namespaceObject, "rotate", function() { return rotate; });
__webpack_require__.d(mat2_namespaceObject, "scale", function() { return mat2_scale; });
__webpack_require__.d(mat2_namespaceObject, "fromRotation", function() { return fromRotation; });
__webpack_require__.d(mat2_namespaceObject, "fromScaling", function() { return fromScaling; });
__webpack_require__.d(mat2_namespaceObject, "str", function() { return str; });
__webpack_require__.d(mat2_namespaceObject, "frob", function() { return frob; });
__webpack_require__.d(mat2_namespaceObject, "LDU", function() { return LDU; });
__webpack_require__.d(mat2_namespaceObject, "add", function() { return add; });
__webpack_require__.d(mat2_namespaceObject, "subtract", function() { return subtract; });
__webpack_require__.d(mat2_namespaceObject, "exactEquals", function() { return exactEquals; });
__webpack_require__.d(mat2_namespaceObject, "equals", function() { return mat2_equals; });
__webpack_require__.d(mat2_namespaceObject, "multiplyScalar", function() { return multiplyScalar; });
__webpack_require__.d(mat2_namespaceObject, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
__webpack_require__.d(mat2_namespaceObject, "mul", function() { return mul; });
__webpack_require__.d(mat2_namespaceObject, "sub", function() { return sub; });
var mat2d_namespaceObject = {};
__webpack_require__.r(mat2d_namespaceObject);
__webpack_require__.d(mat2d_namespaceObject, "create", function() { return mat2d_create; });
__webpack_require__.d(mat2d_namespaceObject, "clone", function() { return mat2d_clone; });
__webpack_require__.d(mat2d_namespaceObject, "copy", function() { return mat2d_copy; });
__webpack_require__.d(mat2d_namespaceObject, "identity", function() { return mat2d_identity; });
__webpack_require__.d(mat2d_namespaceObject, "fromValues", function() { return mat2d_fromValues; });
__webpack_require__.d(mat2d_namespaceObject, "set", function() { return mat2d_set; });
__webpack_require__.d(mat2d_namespaceObject, "invert", function() { return mat2d_invert; });
__webpack_require__.d(mat2d_namespaceObject, "determinant", function() { return mat2d_determinant; });
__webpack_require__.d(mat2d_namespaceObject, "multiply", function() { return mat2d_multiply; });
__webpack_require__.d(mat2d_namespaceObject, "rotate", function() { return mat2d_rotate; });
__webpack_require__.d(mat2d_namespaceObject, "scale", function() { return mat2d_scale; });
__webpack_require__.d(mat2d_namespaceObject, "translate", function() { return translate; });
__webpack_require__.d(mat2d_namespaceObject, "fromRotation", function() { return mat2d_fromRotation; });
__webpack_require__.d(mat2d_namespaceObject, "fromScaling", function() { return mat2d_fromScaling; });
__webpack_require__.d(mat2d_namespaceObject, "fromTranslation", function() { return fromTranslation; });
__webpack_require__.d(mat2d_namespaceObject, "str", function() { return mat2d_str; });
__webpack_require__.d(mat2d_namespaceObject, "frob", function() { return mat2d_frob; });
__webpack_require__.d(mat2d_namespaceObject, "add", function() { return mat2d_add; });
__webpack_require__.d(mat2d_namespaceObject, "subtract", function() { return mat2d_subtract; });
__webpack_require__.d(mat2d_namespaceObject, "multiplyScalar", function() { return mat2d_multiplyScalar; });
__webpack_require__.d(mat2d_namespaceObject, "multiplyScalarAndAdd", function() { return mat2d_multiplyScalarAndAdd; });
__webpack_require__.d(mat2d_namespaceObject, "exactEquals", function() { return mat2d_exactEquals; });
__webpack_require__.d(mat2d_namespaceObject, "equals", function() { return mat2d_equals; });
__webpack_require__.d(mat2d_namespaceObject, "mul", function() { return mat2d_mul; });
__webpack_require__.d(mat2d_namespaceObject, "sub", function() { return mat2d_sub; });
var mat3_namespaceObject = {};
__webpack_require__.r(mat3_namespaceObject);
__webpack_require__.d(mat3_namespaceObject, "create", function() { return mat3_create; });
__webpack_require__.d(mat3_namespaceObject, "fromMat4", function() { return fromMat4; });
__webpack_require__.d(mat3_namespaceObject, "clone", function() { return mat3_clone; });
__webpack_require__.d(mat3_namespaceObject, "copy", function() { return mat3_copy; });
__webpack_require__.d(mat3_namespaceObject, "fromValues", function() { return mat3_fromValues; });
__webpack_require__.d(mat3_namespaceObject, "set", function() { return mat3_set; });
__webpack_require__.d(mat3_namespaceObject, "identity", function() { return mat3_identity; });
__webpack_require__.d(mat3_namespaceObject, "transpose", function() { return mat3_transpose; });
__webpack_require__.d(mat3_namespaceObject, "invert", function() { return mat3_invert; });
__webpack_require__.d(mat3_namespaceObject, "adjoint", function() { return mat3_adjoint; });
__webpack_require__.d(mat3_namespaceObject, "determinant", function() { return mat3_determinant; });
__webpack_require__.d(mat3_namespaceObject, "multiply", function() { return mat3_multiply; });
__webpack_require__.d(mat3_namespaceObject, "translate", function() { return mat3_translate; });
__webpack_require__.d(mat3_namespaceObject, "rotate", function() { return mat3_rotate; });
__webpack_require__.d(mat3_namespaceObject, "scale", function() { return mat3_scale; });
__webpack_require__.d(mat3_namespaceObject, "fromTranslation", function() { return mat3_fromTranslation; });
__webpack_require__.d(mat3_namespaceObject, "fromRotation", function() { return mat3_fromRotation; });
__webpack_require__.d(mat3_namespaceObject, "fromScaling", function() { return mat3_fromScaling; });
__webpack_require__.d(mat3_namespaceObject, "fromMat2d", function() { return fromMat2d; });
__webpack_require__.d(mat3_namespaceObject, "fromQuat", function() { return fromQuat; });
__webpack_require__.d(mat3_namespaceObject, "normalFromMat4", function() { return normalFromMat4; });
__webpack_require__.d(mat3_namespaceObject, "projection", function() { return projection; });
__webpack_require__.d(mat3_namespaceObject, "str", function() { return mat3_str; });
__webpack_require__.d(mat3_namespaceObject, "frob", function() { return mat3_frob; });
__webpack_require__.d(mat3_namespaceObject, "add", function() { return mat3_add; });
__webpack_require__.d(mat3_namespaceObject, "subtract", function() { return mat3_subtract; });
__webpack_require__.d(mat3_namespaceObject, "multiplyScalar", function() { return mat3_multiplyScalar; });
__webpack_require__.d(mat3_namespaceObject, "multiplyScalarAndAdd", function() { return mat3_multiplyScalarAndAdd; });
__webpack_require__.d(mat3_namespaceObject, "exactEquals", function() { return mat3_exactEquals; });
__webpack_require__.d(mat3_namespaceObject, "equals", function() { return mat3_equals; });
__webpack_require__.d(mat3_namespaceObject, "mul", function() { return mat3_mul; });
__webpack_require__.d(mat3_namespaceObject, "sub", function() { return mat3_sub; });
var mat4_namespaceObject = {};
__webpack_require__.r(mat4_namespaceObject);
__webpack_require__.d(mat4_namespaceObject, "create", function() { return mat4_create; });
__webpack_require__.d(mat4_namespaceObject, "clone", function() { return mat4_clone; });
__webpack_require__.d(mat4_namespaceObject, "copy", function() { return mat4_copy; });
__webpack_require__.d(mat4_namespaceObject, "fromValues", function() { return mat4_fromValues; });
__webpack_require__.d(mat4_namespaceObject, "set", function() { return mat4_set; });
__webpack_require__.d(mat4_namespaceObject, "identity", function() { return mat4_identity; });
__webpack_require__.d(mat4_namespaceObject, "transpose", function() { return mat4_transpose; });
__webpack_require__.d(mat4_namespaceObject, "invert", function() { return mat4_invert; });
__webpack_require__.d(mat4_namespaceObject, "adjoint", function() { return mat4_adjoint; });
__webpack_require__.d(mat4_namespaceObject, "determinant", function() { return mat4_determinant; });
__webpack_require__.d(mat4_namespaceObject, "multiply", function() { return mat4_multiply; });
__webpack_require__.d(mat4_namespaceObject, "translate", function() { return mat4_translate; });
__webpack_require__.d(mat4_namespaceObject, "scale", function() { return mat4_scale; });
__webpack_require__.d(mat4_namespaceObject, "rotate", function() { return mat4_rotate; });
__webpack_require__.d(mat4_namespaceObject, "rotateX", function() { return rotateX; });
__webpack_require__.d(mat4_namespaceObject, "rotateY", function() { return rotateY; });
__webpack_require__.d(mat4_namespaceObject, "rotateZ", function() { return rotateZ; });
__webpack_require__.d(mat4_namespaceObject, "fromTranslation", function() { return mat4_fromTranslation; });
__webpack_require__.d(mat4_namespaceObject, "fromScaling", function() { return mat4_fromScaling; });
__webpack_require__.d(mat4_namespaceObject, "fromRotation", function() { return mat4_fromRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromXRotation", function() { return fromXRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromYRotation", function() { return fromYRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromZRotation", function() { return fromZRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslation", function() { return fromRotationTranslation; });
__webpack_require__.d(mat4_namespaceObject, "fromQuat2", function() { return fromQuat2; });
__webpack_require__.d(mat4_namespaceObject, "getTranslation", function() { return getTranslation; });
__webpack_require__.d(mat4_namespaceObject, "getScaling", function() { return getScaling; });
__webpack_require__.d(mat4_namespaceObject, "getRotation", function() { return getRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslationScale", function() { return fromRotationTranslationScale; });
__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslationScaleOrigin", function() { return fromRotationTranslationScaleOrigin; });
__webpack_require__.d(mat4_namespaceObject, "fromQuat", function() { return mat4_fromQuat; });
__webpack_require__.d(mat4_namespaceObject, "frustum", function() { return frustum; });
__webpack_require__.d(mat4_namespaceObject, "perspective", function() { return perspective; });
__webpack_require__.d(mat4_namespaceObject, "perspectiveFromFieldOfView", function() { return perspectiveFromFieldOfView; });
__webpack_require__.d(mat4_namespaceObject, "ortho", function() { return ortho; });
__webpack_require__.d(mat4_namespaceObject, "lookAt", function() { return lookAt; });
__webpack_require__.d(mat4_namespaceObject, "targetTo", function() { return targetTo; });
__webpack_require__.d(mat4_namespaceObject, "str", function() { return mat4_str; });
__webpack_require__.d(mat4_namespaceObject, "frob", function() { return mat4_frob; });
__webpack_require__.d(mat4_namespaceObject, "add", function() { return mat4_add; });
__webpack_require__.d(mat4_namespaceObject, "subtract", function() { return mat4_subtract; });
__webpack_require__.d(mat4_namespaceObject, "multiplyScalar", function() { return mat4_multiplyScalar; });
__webpack_require__.d(mat4_namespaceObject, "multiplyScalarAndAdd", function() { return mat4_multiplyScalarAndAdd; });
__webpack_require__.d(mat4_namespaceObject, "exactEquals", function() { return mat4_exactEquals; });
__webpack_require__.d(mat4_namespaceObject, "equals", function() { return mat4_equals; });
__webpack_require__.d(mat4_namespaceObject, "mul", function() { return mat4_mul; });
__webpack_require__.d(mat4_namespaceObject, "sub", function() { return mat4_sub; });
var vec3_namespaceObject = {};
__webpack_require__.r(vec3_namespaceObject);
__webpack_require__.d(vec3_namespaceObject, "create", function() { return vec3_create; });
__webpack_require__.d(vec3_namespaceObject, "clone", function() { return vec3_clone; });
__webpack_require__.d(vec3_namespaceObject, "length", function() { return vec3_length; });
__webpack_require__.d(vec3_namespaceObject, "fromValues", function() { return vec3_fromValues; });
__webpack_require__.d(vec3_namespaceObject, "copy", function() { return vec3_copy; });
__webpack_require__.d(vec3_namespaceObject, "set", function() { return vec3_set; });
__webpack_require__.d(vec3_namespaceObject, "add", function() { return vec3_add; });
__webpack_require__.d(vec3_namespaceObject, "subtract", function() { return vec3_subtract; });
__webpack_require__.d(vec3_namespaceObject, "multiply", function() { return vec3_multiply; });
__webpack_require__.d(vec3_namespaceObject, "divide", function() { return divide; });
__webpack_require__.d(vec3_namespaceObject, "ceil", function() { return ceil; });
__webpack_require__.d(vec3_namespaceObject, "floor", function() { return floor; });
__webpack_require__.d(vec3_namespaceObject, "min", function() { return min; });
__webpack_require__.d(vec3_namespaceObject, "max", function() { return max; });
__webpack_require__.d(vec3_namespaceObject, "round", function() { return round; });
__webpack_require__.d(vec3_namespaceObject, "scale", function() { return vec3_scale; });
__webpack_require__.d(vec3_namespaceObject, "scaleAndAdd", function() { return scaleAndAdd; });
__webpack_require__.d(vec3_namespaceObject, "distance", function() { return distance; });
__webpack_require__.d(vec3_namespaceObject, "squaredDistance", function() { return squaredDistance; });
__webpack_require__.d(vec3_namespaceObject, "squaredLength", function() { return squaredLength; });
__webpack_require__.d(vec3_namespaceObject, "negate", function() { return negate; });
__webpack_require__.d(vec3_namespaceObject, "inverse", function() { return inverse; });
__webpack_require__.d(vec3_namespaceObject, "normalize", function() { return normalize; });
__webpack_require__.d(vec3_namespaceObject, "dot", function() { return vec3_dot; });
__webpack_require__.d(vec3_namespaceObject, "cross", function() { return cross; });
__webpack_require__.d(vec3_namespaceObject, "lerp", function() { return lerp; });
__webpack_require__.d(vec3_namespaceObject, "hermite", function() { return hermite; });
__webpack_require__.d(vec3_namespaceObject, "bezier", function() { return bezier; });
__webpack_require__.d(vec3_namespaceObject, "random", function() { return random; });
__webpack_require__.d(vec3_namespaceObject, "transformMat4", function() { return transformMat4; });
__webpack_require__.d(vec3_namespaceObject, "transformMat3", function() { return transformMat3; });
__webpack_require__.d(vec3_namespaceObject, "transformQuat", function() { return transformQuat; });
__webpack_require__.d(vec3_namespaceObject, "rotateX", function() { return vec3_rotateX; });
__webpack_require__.d(vec3_namespaceObject, "rotateY", function() { return vec3_rotateY; });
__webpack_require__.d(vec3_namespaceObject, "rotateZ", function() { return vec3_rotateZ; });
__webpack_require__.d(vec3_namespaceObject, "angle", function() { return angle; });
__webpack_require__.d(vec3_namespaceObject, "zero", function() { return zero; });
__webpack_require__.d(vec3_namespaceObject, "str", function() { return vec3_str; });
__webpack_require__.d(vec3_namespaceObject, "exactEquals", function() { return vec3_exactEquals; });
__webpack_require__.d(vec3_namespaceObject, "equals", function() { return vec3_equals; });
__webpack_require__.d(vec3_namespaceObject, "sub", function() { return vec3_sub; });
__webpack_require__.d(vec3_namespaceObject, "mul", function() { return vec3_mul; });
__webpack_require__.d(vec3_namespaceObject, "div", function() { return div; });
__webpack_require__.d(vec3_namespaceObject, "dist", function() { return dist; });
__webpack_require__.d(vec3_namespaceObject, "sqrDist", function() { return sqrDist; });
__webpack_require__.d(vec3_namespaceObject, "len", function() { return vec3_len; });
__webpack_require__.d(vec3_namespaceObject, "sqrLen", function() { return sqrLen; });
__webpack_require__.d(vec3_namespaceObject, "forEach", function() { return forEach; });
var vec4_namespaceObject = {};
__webpack_require__.r(vec4_namespaceObject);
__webpack_require__.d(vec4_namespaceObject, "create", function() { return vec4_create; });
__webpack_require__.d(vec4_namespaceObject, "clone", function() { return vec4_clone; });
__webpack_require__.d(vec4_namespaceObject, "fromValues", function() { return vec4_fromValues; });
__webpack_require__.d(vec4_namespaceObject, "copy", function() { return vec4_copy; });
__webpack_require__.d(vec4_namespaceObject, "set", function() { return vec4_set; });
__webpack_require__.d(vec4_namespaceObject, "add", function() { return vec4_add; });
__webpack_require__.d(vec4_namespaceObject, "subtract", function() { return vec4_subtract; });
__webpack_require__.d(vec4_namespaceObject, "multiply", function() { return vec4_multiply; });
__webpack_require__.d(vec4_namespaceObject, "divide", function() { return vec4_divide; });
__webpack_require__.d(vec4_namespaceObject, "ceil", function() { return vec4_ceil; });
__webpack_require__.d(vec4_namespaceObject, "floor", function() { return vec4_floor; });
__webpack_require__.d(vec4_namespaceObject, "min", function() { return vec4_min; });
__webpack_require__.d(vec4_namespaceObject, "max", function() { return vec4_max; });
__webpack_require__.d(vec4_namespaceObject, "round", function() { return vec4_round; });
__webpack_require__.d(vec4_namespaceObject, "scale", function() { return vec4_scale; });
__webpack_require__.d(vec4_namespaceObject, "scaleAndAdd", function() { return vec4_scaleAndAdd; });
__webpack_require__.d(vec4_namespaceObject, "distance", function() { return vec4_distance; });
__webpack_require__.d(vec4_namespaceObject, "squaredDistance", function() { return vec4_squaredDistance; });
__webpack_require__.d(vec4_namespaceObject, "length", function() { return vec4_length; });
__webpack_require__.d(vec4_namespaceObject, "squaredLength", function() { return vec4_squaredLength; });
__webpack_require__.d(vec4_namespaceObject, "negate", function() { return vec4_negate; });
__webpack_require__.d(vec4_namespaceObject, "inverse", function() { return vec4_inverse; });
__webpack_require__.d(vec4_namespaceObject, "normalize", function() { return vec4_normalize; });
__webpack_require__.d(vec4_namespaceObject, "dot", function() { return vec4_dot; });
__webpack_require__.d(vec4_namespaceObject, "cross", function() { return vec4_cross; });
__webpack_require__.d(vec4_namespaceObject, "lerp", function() { return vec4_lerp; });
__webpack_require__.d(vec4_namespaceObject, "random", function() { return vec4_random; });
__webpack_require__.d(vec4_namespaceObject, "transformMat4", function() { return vec4_transformMat4; });
__webpack_require__.d(vec4_namespaceObject, "transformQuat", function() { return vec4_transformQuat; });
__webpack_require__.d(vec4_namespaceObject, "zero", function() { return vec4_zero; });
__webpack_require__.d(vec4_namespaceObject, "str", function() { return vec4_str; });
__webpack_require__.d(vec4_namespaceObject, "exactEquals", function() { return vec4_exactEquals; });
__webpack_require__.d(vec4_namespaceObject, "equals", function() { return vec4_equals; });
__webpack_require__.d(vec4_namespaceObject, "sub", function() { return vec4_sub; });
__webpack_require__.d(vec4_namespaceObject, "mul", function() { return vec4_mul; });
__webpack_require__.d(vec4_namespaceObject, "div", function() { return vec4_div; });
__webpack_require__.d(vec4_namespaceObject, "dist", function() { return vec4_dist; });
__webpack_require__.d(vec4_namespaceObject, "sqrDist", function() { return vec4_sqrDist; });
__webpack_require__.d(vec4_namespaceObject, "len", function() { return vec4_len; });
__webpack_require__.d(vec4_namespaceObject, "sqrLen", function() { return vec4_sqrLen; });
__webpack_require__.d(vec4_namespaceObject, "forEach", function() { return vec4_forEach; });
var quat_namespaceObject = {};
__webpack_require__.r(quat_namespaceObject);
__webpack_require__.d(quat_namespaceObject, "create", function() { return quat_create; });
__webpack_require__.d(quat_namespaceObject, "identity", function() { return quat_identity; });
__webpack_require__.d(quat_namespaceObject, "setAxisAngle", function() { return setAxisAngle; });
__webpack_require__.d(quat_namespaceObject, "getAxisAngle", function() { return getAxisAngle; });
__webpack_require__.d(quat_namespaceObject, "getAngle", function() { return getAngle; });
__webpack_require__.d(quat_namespaceObject, "multiply", function() { return quat_multiply; });
__webpack_require__.d(quat_namespaceObject, "rotateX", function() { return quat_rotateX; });
__webpack_require__.d(quat_namespaceObject, "rotateY", function() { return quat_rotateY; });
__webpack_require__.d(quat_namespaceObject, "rotateZ", function() { return quat_rotateZ; });
__webpack_require__.d(quat_namespaceObject, "calculateW", function() { return calculateW; });
__webpack_require__.d(quat_namespaceObject, "exp", function() { return exp; });
__webpack_require__.d(quat_namespaceObject, "ln", function() { return ln; });
__webpack_require__.d(quat_namespaceObject, "pow", function() { return pow; });
__webpack_require__.d(quat_namespaceObject, "slerp", function() { return slerp; });
__webpack_require__.d(quat_namespaceObject, "random", function() { return quat_random; });
__webpack_require__.d(quat_namespaceObject, "invert", function() { return quat_invert; });
__webpack_require__.d(quat_namespaceObject, "conjugate", function() { return conjugate; });
__webpack_require__.d(quat_namespaceObject, "fromMat3", function() { return fromMat3; });
__webpack_require__.d(quat_namespaceObject, "fromEuler", function() { return fromEuler; });
__webpack_require__.d(quat_namespaceObject, "str", function() { return quat_str; });
__webpack_require__.d(quat_namespaceObject, "clone", function() { return quat_clone; });
__webpack_require__.d(quat_namespaceObject, "fromValues", function() { return quat_fromValues; });
__webpack_require__.d(quat_namespaceObject, "copy", function() { return quat_copy; });
__webpack_require__.d(quat_namespaceObject, "set", function() { return quat_set; });
__webpack_require__.d(quat_namespaceObject, "add", function() { return quat_add; });
__webpack_require__.d(quat_namespaceObject, "mul", function() { return quat_mul; });
__webpack_require__.d(quat_namespaceObject, "scale", function() { return quat_scale; });
__webpack_require__.d(quat_namespaceObject, "dot", function() { return quat_dot; });
__webpack_require__.d(quat_namespaceObject, "lerp", function() { return quat_lerp; });
__webpack_require__.d(quat_namespaceObject, "length", function() { return quat_length; });
__webpack_require__.d(quat_namespaceObject, "len", function() { return quat_len; });
__webpack_require__.d(quat_namespaceObject, "squaredLength", function() { return quat_squaredLength; });
__webpack_require__.d(quat_namespaceObject, "sqrLen", function() { return quat_sqrLen; });
__webpack_require__.d(quat_namespaceObject, "normalize", function() { return quat_normalize; });
__webpack_require__.d(quat_namespaceObject, "exactEquals", function() { return quat_exactEquals; });
__webpack_require__.d(quat_namespaceObject, "equals", function() { return quat_equals; });
__webpack_require__.d(quat_namespaceObject, "rotationTo", function() { return rotationTo; });
__webpack_require__.d(quat_namespaceObject, "sqlerp", function() { return sqlerp; });
__webpack_require__.d(quat_namespaceObject, "setAxes", function() { return setAxes; });
var quat2_namespaceObject = {};
__webpack_require__.r(quat2_namespaceObject);
__webpack_require__.d(quat2_namespaceObject, "create", function() { return quat2_create; });
__webpack_require__.d(quat2_namespaceObject, "clone", function() { return quat2_clone; });
__webpack_require__.d(quat2_namespaceObject, "fromValues", function() { return quat2_fromValues; });
__webpack_require__.d(quat2_namespaceObject, "fromRotationTranslationValues", function() { return fromRotationTranslationValues; });
__webpack_require__.d(quat2_namespaceObject, "fromRotationTranslation", function() { return quat2_fromRotationTranslation; });
__webpack_require__.d(quat2_namespaceObject, "fromTranslation", function() { return quat2_fromTranslation; });
__webpack_require__.d(quat2_namespaceObject, "fromRotation", function() { return quat2_fromRotation; });
__webpack_require__.d(quat2_namespaceObject, "fromMat4", function() { return quat2_fromMat4; });
__webpack_require__.d(quat2_namespaceObject, "copy", function() { return quat2_copy; });
__webpack_require__.d(quat2_namespaceObject, "identity", function() { return quat2_identity; });
__webpack_require__.d(quat2_namespaceObject, "set", function() { return quat2_set; });
__webpack_require__.d(quat2_namespaceObject, "getReal", function() { return getReal; });
__webpack_require__.d(quat2_namespaceObject, "getDual", function() { return getDual; });
__webpack_require__.d(quat2_namespaceObject, "setReal", function() { return setReal; });
__webpack_require__.d(quat2_namespaceObject, "setDual", function() { return setDual; });
__webpack_require__.d(quat2_namespaceObject, "getTranslation", function() { return quat2_getTranslation; });
__webpack_require__.d(quat2_namespaceObject, "translate", function() { return quat2_translate; });
__webpack_require__.d(quat2_namespaceObject, "rotateX", function() { return quat2_rotateX; });
__webpack_require__.d(quat2_namespaceObject, "rotateY", function() { return quat2_rotateY; });
__webpack_require__.d(quat2_namespaceObject, "rotateZ", function() { return quat2_rotateZ; });
__webpack_require__.d(quat2_namespaceObject, "rotateByQuatAppend", function() { return rotateByQuatAppend; });
__webpack_require__.d(quat2_namespaceObject, "rotateByQuatPrepend", function() { return rotateByQuatPrepend; });
__webpack_require__.d(quat2_namespaceObject, "rotateAroundAxis", function() { return rotateAroundAxis; });
__webpack_require__.d(quat2_namespaceObject, "add", function() { return quat2_add; });
__webpack_require__.d(quat2_namespaceObject, "multiply", function() { return quat2_multiply; });
__webpack_require__.d(quat2_namespaceObject, "mul", function() { return quat2_mul; });
__webpack_require__.d(quat2_namespaceObject, "scale", function() { return quat2_scale; });
__webpack_require__.d(quat2_namespaceObject, "dot", function() { return quat2_dot; });
__webpack_require__.d(quat2_namespaceObject, "lerp", function() { return quat2_lerp; });
__webpack_require__.d(quat2_namespaceObject, "invert", function() { return quat2_invert; });
__webpack_require__.d(quat2_namespaceObject, "conjugate", function() { return quat2_conjugate; });
__webpack_require__.d(quat2_namespaceObject, "length", function() { return quat2_length; });
__webpack_require__.d(quat2_namespaceObject, "len", function() { return quat2_len; });
__webpack_require__.d(quat2_namespaceObject, "squaredLength", function() { return quat2_squaredLength; });
__webpack_require__.d(quat2_namespaceObject, "sqrLen", function() { return quat2_sqrLen; });
__webpack_require__.d(quat2_namespaceObject, "normalize", function() { return quat2_normalize; });
__webpack_require__.d(quat2_namespaceObject, "str", function() { return quat2_str; });
__webpack_require__.d(quat2_namespaceObject, "exactEquals", function() { return quat2_exactEquals; });
__webpack_require__.d(quat2_namespaceObject, "equals", function() { return quat2_equals; });
var vec2_namespaceObject = {};
__webpack_require__.r(vec2_namespaceObject);
__webpack_require__.d(vec2_namespaceObject, "create", function() { return vec2_create; });
__webpack_require__.d(vec2_namespaceObject, "clone", function() { return vec2_clone; });
__webpack_require__.d(vec2_namespaceObject, "fromValues", function() { return vec2_fromValues; });
__webpack_require__.d(vec2_namespaceObject, "copy", function() { return vec2_copy; });
__webpack_require__.d(vec2_namespaceObject, "set", function() { return vec2_set; });
__webpack_require__.d(vec2_namespaceObject, "add", function() { return vec2_add; });
__webpack_require__.d(vec2_namespaceObject, "subtract", function() { return vec2_subtract; });
__webpack_require__.d(vec2_namespaceObject, "multiply", function() { return vec2_multiply; });
__webpack_require__.d(vec2_namespaceObject, "divide", function() { return vec2_divide; });
__webpack_require__.d(vec2_namespaceObject, "ceil", function() { return vec2_ceil; });
__webpack_require__.d(vec2_namespaceObject, "floor", function() { return vec2_floor; });
__webpack_require__.d(vec2_namespaceObject, "min", function() { return vec2_min; });
__webpack_require__.d(vec2_namespaceObject, "max", function() { return vec2_max; });
__webpack_require__.d(vec2_namespaceObject, "round", function() { return vec2_round; });
__webpack_require__.d(vec2_namespaceObject, "scale", function() { return vec2_scale; });
__webpack_require__.d(vec2_namespaceObject, "scaleAndAdd", function() { return vec2_scaleAndAdd; });
__webpack_require__.d(vec2_namespaceObject, "distance", function() { return vec2_distance; });
__webpack_require__.d(vec2_namespaceObject, "squaredDistance", function() { return vec2_squaredDistance; });
__webpack_require__.d(vec2_namespaceObject, "length", function() { return vec2_length; });
__webpack_require__.d(vec2_namespaceObject, "squaredLength", function() { return vec2_squaredLength; });
__webpack_require__.d(vec2_namespaceObject, "negate", function() { return vec2_negate; });
__webpack_require__.d(vec2_namespaceObject, "inverse", function() { return vec2_inverse; });
__webpack_require__.d(vec2_namespaceObject, "normalize", function() { return vec2_normalize; });
__webpack_require__.d(vec2_namespaceObject, "dot", function() { return vec2_dot; });
__webpack_require__.d(vec2_namespaceObject, "cross", function() { return vec2_cross; });
__webpack_require__.d(vec2_namespaceObject, "lerp", function() { return vec2_lerp; });
__webpack_require__.d(vec2_namespaceObject, "random", function() { return vec2_random; });
__webpack_require__.d(vec2_namespaceObject, "transformMat2", function() { return transformMat2; });
__webpack_require__.d(vec2_namespaceObject, "transformMat2d", function() { return transformMat2d; });
__webpack_require__.d(vec2_namespaceObject, "transformMat3", function() { return vec2_transformMat3; });
__webpack_require__.d(vec2_namespaceObject, "transformMat4", function() { return vec2_transformMat4; });
__webpack_require__.d(vec2_namespaceObject, "rotate", function() { return vec2_rotate; });
__webpack_require__.d(vec2_namespaceObject, "angle", function() { return vec2_angle; });
__webpack_require__.d(vec2_namespaceObject, "zero", function() { return vec2_zero; });
__webpack_require__.d(vec2_namespaceObject, "str", function() { return vec2_str; });
__webpack_require__.d(vec2_namespaceObject, "exactEquals", function() { return vec2_exactEquals; });
__webpack_require__.d(vec2_namespaceObject, "equals", function() { return vec2_equals; });
__webpack_require__.d(vec2_namespaceObject, "len", function() { return vec2_len; });
__webpack_require__.d(vec2_namespaceObject, "sub", function() { return vec2_sub; });
__webpack_require__.d(vec2_namespaceObject, "mul", function() { return vec2_mul; });
__webpack_require__.d(vec2_namespaceObject, "div", function() { return vec2_div; });
__webpack_require__.d(vec2_namespaceObject, "dist", function() { return vec2_dist; });
__webpack_require__.d(vec2_namespaceObject, "sqrDist", function() { return vec2_sqrDist; });
__webpack_require__.d(vec2_namespaceObject, "sqrLen", function() { return vec2_sqrLen; });
__webpack_require__.d(vec2_namespaceObject, "forEach", function() { return vec2_forEach; });

// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat2.js

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */

function create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */

function clone(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */

function fromValues(m00, m01, m10, m11) {
  var out = new ARRAY_TYPE(4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */

function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3]; // Calculate the determinant

  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;
  return out;
}
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;
  return out;
}
/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/

function mat2_scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3]);
}
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat2_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Alias for {@link mat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2.subtract}
 * @function
 */

var sub = subtract;
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat2d.js

/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b, c,
 *  d, tx, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0,
 *  c, d, 0,
 *  tx, ty, 1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */

function mat2d_create() {
  var out = new ARRAY_TYPE(6);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[4] = 0;
    out[5] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */

function mat2d_clone(a) {
  var out = new ARRAY_TYPE(6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */

function mat2d_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */

function mat2d_identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */

function mat2d_fromValues(a, b, c, d, tx, ty) {
  var out = new ARRAY_TYPE(6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */

function mat2d_set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */

function mat2d_invert(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];
  var det = aa * ad - ab * ac;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}
/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */

function mat2d_determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function mat2d_multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function mat2d_rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/

function mat2d_scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/

function translate(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function mat2d_fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */

function mat2d_fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function mat2d_str(a) {
  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
}
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function mat2d_frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
}
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function mat2d_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function mat2d_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */

function mat2d_multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */

function mat2d_multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat2d_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat2d_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */

var mat2d_mul = mat2d_multiply;
/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

var mat2d_sub = mat2d_subtract;
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat3.js

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function mat3_create() {
  var out = new ARRAY_TYPE(9);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function mat3_clone(a) {
  var out = new ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function mat3_fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function mat3_set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function mat3_identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */

function mat3_determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function mat3_multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */

function mat3_translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function mat3_rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
;
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function mat3_scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */

function mat3_fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function mat3_fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */

function mat3_fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function mat3_str(a) {
  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function mat3_frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function mat3_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function mat3_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function mat3_multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function mat3_multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat3_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat3_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mat3_mul = mat3_multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var mat3_sub = mat3_subtract;
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat4.js

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function mat4_create() {
  var out = new ARRAY_TYPE(16);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function mat4_clone(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function mat4_fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function mat4_set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function mat4_identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */

function mat4_determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function mat4_multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */

function mat4_translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function mat4_scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function mat4_rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function mat4_fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */

function mat4_fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function mat4_fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {quat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function mat4_fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return mat4_identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
;
/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function mat4_str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function mat4_frob(a) {
  return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function mat4_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function mat4_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function mat4_multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function mat4_multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat4_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat4_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mat4_mul = mat4_multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var mat4_sub = mat4_subtract;
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec3.js

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function vec3_create() {
  var out = new ARRAY_TYPE(3);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function vec3_clone(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec3_length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function vec3_fromValues(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */

function vec3_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function vec3_set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function vec3_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function vec3_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function vec3_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function vec3_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec3_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  var z = RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function vec3_rotateX(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function vec3_rotateY(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function vec3_rotateZ(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var tempA = vec3_fromValues(a[0], a[1], a[2]);
  var tempB = vec3_fromValues(b[0], b[1], b[2]);
  normalize(tempA, tempA);
  normalize(tempB, tempB);
  var cosine = vec3_dot(tempA, tempB);

  if (cosine > 1.0) {
    return 0;
  } else if (cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec3_str(a) {
  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec3_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec3_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var vec3_sub = vec3_subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var vec3_mul = vec3_multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var vec3_len = vec3_length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = vec3_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec4.js

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function vec4_create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function vec4_clone(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function vec4_fromValues(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */

function vec4_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function vec4_set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */

function vec4_ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */

function vec4_floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */

function vec4_round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function vec4_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function vec4_scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */

function vec4_distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function vec4_squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec4_length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function vec4_squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */

function vec4_negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */

function vec4_inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */

function vec4_normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec4_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {vec4} result the receiving vector
 * @param {vec4} U the first vector
 * @param {vec4} V the second vector
 * @param {vec4} W the third vector
 * @returns {vec4} result
 */

function vec4_cross(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
;
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function vec4_lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function vec4_random(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = RANDOM() * 2 - 1;
    v2 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */

function vec4_transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */

function vec4_transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function vec4_zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec4_str(a) {
  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec4_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec4_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var vec4_sub = vec4_subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var vec4_mul = vec4_multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var vec4_div = vec4_divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var vec4_dist = vec4_distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var vec4_sqrDist = vec4_squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var vec4_len = vec4_length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var vec4_sqrLen = vec4_squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var vec4_forEach = function () {
  var vec = vec4_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/quat.js




/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function quat_create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function quat_identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > EPSILON) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {quat} a     Origin unit quaternion 
 * @param  {quat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = quat_dot(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */

function quat_multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  quat_scale(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > EPSILON) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 * 
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function quat_random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = RANDOM();
  var u2 = RANDOM();
  var u3 = RANDOM();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */

function quat_invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function quat_str(a) {
  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var quat_clone = vec4_clone;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var quat_fromValues = vec4_fromValues;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var quat_copy = vec4_copy;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var quat_set = vec4_set;
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */

var quat_add = vec4_add;
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var quat_mul = quat_multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var quat_scale = vec4_scale;
/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var quat_dot = vec4_dot;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var quat_lerp = vec4_lerp;
/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */

var quat_length = vec4_length;
/**
 * Alias for {@link quat.length}
 * @function
 */

var quat_len = quat_length;
/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var quat_squaredLength = vec4_squaredLength;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var quat_sqrLen = quat_squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var quat_normalize = vec4_normalize;
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var quat_exactEquals = vec4_exactEquals;
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var quat_equals = vec4_equals;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = vec3_create();
  var xUnitVec3 = vec3_fromValues(1, 0, 0);
  var yUnitVec3 = vec3_fromValues(0, 1, 0);
  return function (out, a, b) {
    var dot = vec3_dot(a, b);

    if (dot < -0.999999) {
      cross(tmpvec3, xUnitVec3, a);
      if (vec3_len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
      normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return quat_normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = quat_create();
  var temp2 = quat_create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = mat3_create();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return quat_normalize(out, fromMat3(out, matr));
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/quat2.js



/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */

/**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */

function quat2_create() {
  var dq = new ARRAY_TYPE(8);

  if (ARRAY_TYPE != Float32Array) {
    dq[0] = 0;
    dq[1] = 0;
    dq[2] = 0;
    dq[4] = 0;
    dq[5] = 0;
    dq[6] = 0;
    dq[7] = 0;
  }

  dq[3] = 1;
  return dq;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */

function quat2_clone(a) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = a[0];
  dq[1] = a[1];
  dq[2] = a[2];
  dq[3] = a[3];
  dq[4] = a[4];
  dq[5] = a[5];
  dq[6] = a[6];
  dq[7] = a[7];
  return dq;
}
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */

function quat2_fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  dq[4] = x2;
  dq[5] = y2;
  dq[6] = z2;
  dq[7] = w2;
  return dq;
}
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  var ax = x2 * 0.5,
      ay = y2 * 0.5,
      az = z2 * 0.5;
  dq[4] = ax * w1 + ay * z1 - az * y1;
  dq[5] = ay * w1 + az * x1 - ax * z1;
  dq[6] = az * w1 + ax * y1 - ay * x1;
  dq[7] = -ax * x1 - ay * y1 - az * z1;
  return dq;
}
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {quat} q a normalized quaternion
 * @param {vec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function quat2_fromRotationTranslation(out, q, t) {
  var ax = t[0] * 0.5,
      ay = t[1] * 0.5,
      az = t[2] * 0.5,
      bx = q[0],
      by = q[1],
      bz = q[2],
      bw = q[3];
  out[0] = bx;
  out[1] = by;
  out[2] = bz;
  out[3] = bw;
  out[4] = ax * bw + ay * bz - az * by;
  out[5] = ay * bw + az * bx - ax * bz;
  out[6] = az * bw + ax * by - ay * bx;
  out[7] = -ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Creates a dual quat from a translation
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {vec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function quat2_fromTranslation(out, t) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = t[0] * 0.5;
  out[5] = t[1] * 0.5;
  out[6] = t[2] * 0.5;
  out[7] = 0;
  return out;
}
/**
 * Creates a dual quat from a quaternion
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {quat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function quat2_fromRotation(out, q) {
  out[0] = q[0];
  out[1] = q[1];
  out[2] = q[2];
  out[3] = q[3];
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {mat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */

function quat2_fromMat4(out, a) {
  //TODO Optimize this
  var outer = quat_create();
  getRotation(outer, a);
  var t = new ARRAY_TYPE(3);
  getTranslation(t, a);
  quat2_fromRotationTranslation(out, outer, t);
  return out;
}
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */

function quat2_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  return out;
}
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */

function quat2_identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */

function quat2_set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
  out[0] = x1;
  out[1] = y1;
  out[2] = z1;
  out[3] = w1;
  out[4] = x2;
  out[5] = y2;
  out[6] = z2;
  out[7] = w2;
  return out;
}
/**
 * Gets the real part of a dual quat
 * @param  {quat} out real part
 * @param  {quat2} a Dual Quaternion
 * @return {quat} real part
 */

var getReal = quat_copy;
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {quat2} a Dual Quaternion
 * @return {quat} dual part
 */

function getDual(out, a) {
  out[0] = a[4];
  out[1] = a[5];
  out[2] = a[6];
  out[3] = a[7];
  return out;
}
/**
 * Set the real component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat} q a quaternion representing the real part
 * @returns {quat2} out
 * @function
 */

var setReal = quat_copy;
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */

function setDual(out, q) {
  out[4] = q[0];
  out[5] = q[1];
  out[6] = q[2];
  out[7] = q[3];
  return out;
}
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {quat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */

function quat2_getTranslation(out, a) {
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3];
  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  return out;
}
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to translate
 * @param {vec3} v vector to translate by
 * @returns {quat2} out
 */

function quat2_translate(out, a, v) {
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3],
      bx1 = v[0] * 0.5,
      by1 = v[1] * 0.5,
      bz1 = v[2] * 0.5,
      ax2 = a[4],
      ay2 = a[5],
      az2 = a[6],
      aw2 = a[7];
  out[0] = ax1;
  out[1] = ay1;
  out[2] = az1;
  out[3] = aw1;
  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
  return out;
}
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function quat2_rotateX(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  quat_rotateX(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function quat2_rotateY(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  quat_rotateY(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function quat2_rotateZ(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  quat_rotateZ(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {quat} q quaternion to rotate by
 * @returns {quat2} out
 */

function rotateByQuatAppend(out, a, q) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
  ax = a[4];
  ay = a[5];
  az = a[6];
  aw = a[7];
  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat} q quaternion to rotate by
 * @param {quat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */

function rotateByQuatPrepend(out, q, a) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      bx = a[0],
      by = a[1],
      bz = a[2],
      bw = a[3];
  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
  bx = a[4];
  by = a[5];
  bz = a[6];
  bw = a[7];
  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
  return out;
}
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {vec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */

function rotateAroundAxis(out, a, axis, rad) {
  //Special case for rad = 0
  if (Math.abs(rad) < EPSILON) {
    return quat2_copy(out, a);
  }

  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
  rad = rad * 0.5;
  var s = Math.sin(rad);
  var bx = s * axis[0] / axisLength;
  var by = s * axis[1] / axisLength;
  var bz = s * axis[2] / axisLength;
  var bw = Math.cos(rad);
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3];
  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  out[4] = ax * bw + aw * bx + ay * bz - az * by;
  out[5] = ay * bw + aw * by + az * bx - ax * bz;
  out[6] = az * bw + aw * bz + ax * by - ay * bx;
  out[7] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {quat2} out
 * @function
 */

function quat2_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  return out;
}
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {quat2} out
 */

function quat2_multiply(out, a, b) {
  var ax0 = a[0],
      ay0 = a[1],
      az0 = a[2],
      aw0 = a[3],
      bx1 = b[4],
      by1 = b[5],
      bz1 = b[6],
      bw1 = b[7],
      ax1 = a[4],
      ay1 = a[5],
      az1 = a[6],
      aw1 = a[7],
      bx0 = b[0],
      by0 = b[1],
      bz0 = b[2],
      bw0 = b[3];
  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
  return out;
}
/**
 * Alias for {@link quat2.multiply}
 * @function
 */

var quat2_mul = quat2_multiply;
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {quat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */

function quat2_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  return out;
}
/**
 * Calculates the dot product of two dual quat's (The dot product of the real parts)
 *
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var quat2_dot = quat_dot;
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */

function quat2_lerp(out, a, b, t) {
  var mt = 1 - t;
  if (quat2_dot(a, b) < 0) t = -t;
  out[0] = a[0] * mt + b[0] * t;
  out[1] = a[1] * mt + b[1] * t;
  out[2] = a[2] * mt + b[2] * t;
  out[3] = a[3] * mt + b[3] * t;
  out[4] = a[4] * mt + b[4] * t;
  out[5] = a[5] * mt + b[5] * t;
  out[6] = a[6] * mt + b[6] * t;
  out[7] = a[7] * mt + b[7] * t;
  return out;
}
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */

function quat2_invert(out, a) {
  var sqlen = quat2_squaredLength(a);
  out[0] = -a[0] / sqlen;
  out[1] = -a[1] / sqlen;
  out[2] = -a[2] / sqlen;
  out[3] = a[3] / sqlen;
  out[4] = -a[4] / sqlen;
  out[5] = -a[5] / sqlen;
  out[6] = -a[6] / sqlen;
  out[7] = a[7] / sqlen;
  return out;
}
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */

function quat2_conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  out[4] = -a[4];
  out[5] = -a[5];
  out[6] = -a[6];
  out[7] = a[7];
  return out;
}
/**
 * Calculates the length of a dual quat
 *
 * @param {quat2} a dual quat to calculate length of
 * @returns {Number} length of a
 * @function
 */

var quat2_length = quat_length;
/**
 * Alias for {@link quat2.length}
 * @function
 */

var quat2_len = quat2_length;
/**
 * Calculates the squared length of a dual quat
 *
 * @param {quat2} a dual quat to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var quat2_squaredLength = quat_squaredLength;
/**
 * Alias for {@link quat2.squaredLength}
 * @function
 */

var quat2_sqrLen = quat2_squaredLength;
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */

function quat2_normalize(out, a) {
  var magnitude = quat2_squaredLength(a);

  if (magnitude > 0) {
    magnitude = Math.sqrt(magnitude);
    var a0 = a[0] / magnitude;
    var a1 = a[1] / magnitude;
    var a2 = a[2] / magnitude;
    var a3 = a[3] / magnitude;
    var b0 = a[4];
    var b1 = a[5];
    var b2 = a[6];
    var b3 = a[7];
    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = (b0 - a0 * a_dot_b) / magnitude;
    out[5] = (b1 - a1 * a_dot_b) / magnitude;
    out[6] = (b2 - a2 * a_dot_b) / magnitude;
    out[7] = (b3 - a3 * a_dot_b) / magnitude;
  }

  return out;
}
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {quat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */

function quat2_str(a) {
  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
}
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat2} a the first dual quaternion.
 * @param {quat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */

function quat2_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {quat2} a the first dual quat.
 * @param {quat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */

function quat2_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec2.js

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function vec2_create() {
  var out = new ARRAY_TYPE(2);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function vec2_clone(a) {
  var out = new ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function vec2_fromValues(x, y) {
  var out = new ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */

function vec2_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function vec2_set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */

function vec2_ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */

function vec2_floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */

function vec2_round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function vec2_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function vec2_scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */

function vec2_distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function vec2_squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec2_length(a) {
  var x = a[0],
      y = a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function vec2_squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */

function vec2_negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */

function vec2_inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */

function vec2_normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec2_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */

function vec2_cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function vec2_lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function vec2_random(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */

function vec2_transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */

function vec2_transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {vec2} a The vec2 point to rotate
 * @param {vec2} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec2} out
 */

function vec2_rotate(out, a, b, c) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(c),
      cosC = Math.cos(c); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {vec2} a The first operand
 * @param {vec2} b The second operand
 * @returns {Number} The angle in radians
 */

function vec2_angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1];
  var len1 = x1 * x1 + y1 * y1;

  if (len1 > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len1 = 1 / Math.sqrt(len1);
  }

  var len2 = x2 * x2 + y2 * y2;

  if (len2 > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len2 = 1 / Math.sqrt(len2);
  }

  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;

  if (cosine > 1.0) {
    return 0;
  } else if (cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function vec2_zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec2_str(a) {
  return 'vec2(' + a[0] + ', ' + a[1] + ')';
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec2_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec2_equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var vec2_len = vec2_length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var vec2_sub = vec2_subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var vec2_mul = vec2_multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var vec2_div = vec2_divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var vec2_dist = vec2_distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var vec2_sqrDist = vec2_squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var vec2_sqrLen = vec2_squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var vec2_forEach = function () {
  var vec = vec2_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/index.js
/* concated harmony reexport glMatrix */__webpack_require__.d(__webpack_exports__, "glMatrix", function() { return common_namespaceObject; });
/* concated harmony reexport mat2 */__webpack_require__.d(__webpack_exports__, "mat2", function() { return mat2_namespaceObject; });
/* concated harmony reexport mat2d */__webpack_require__.d(__webpack_exports__, "mat2d", function() { return mat2d_namespaceObject; });
/* concated harmony reexport mat3 */__webpack_require__.d(__webpack_exports__, "mat3", function() { return mat3_namespaceObject; });
/* concated harmony reexport mat4 */__webpack_require__.d(__webpack_exports__, "mat4", function() { return mat4_namespaceObject; });
/* concated harmony reexport quat */__webpack_require__.d(__webpack_exports__, "quat", function() { return quat_namespaceObject; });
/* concated harmony reexport quat2 */__webpack_require__.d(__webpack_exports__, "quat2", function() { return quat2_namespaceObject; });
/* concated harmony reexport vec2 */__webpack_require__.d(__webpack_exports__, "vec2", function() { return vec2_namespaceObject; });
/* concated harmony reexport vec3 */__webpack_require__.d(__webpack_exports__, "vec3", function() { return vec3_namespaceObject; });
/* concated harmony reexport vec4 */__webpack_require__.d(__webpack_exports__, "vec4", function() { return vec4_namespaceObject; });












/***/ }),
/* 6 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(15);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(11);
util.inherits = __webpack_require__(9);
/*</replacement>*/

var Readable = __webpack_require__(45);
var Writable = __webpack_require__(25);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),
/* 8 */,
/* 9 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _PacketBuffer {
    constructor(b, byteOffsetIn, byteLengthIn) {
        const byteOffset = byteOffsetIn !== void 0 ? byteOffsetIn : 0;
        const byteLength = byteLengthIn !== void 0 ? byteLengthIn : b.byteLength - byteOffset;
        this._v = new DataView(b, byteOffset, byteLength);
        this._u8 = new Uint8Array(b, byteOffset, byteLength);
        this._byteOffset = byteOffset;
        this._b = b;
        this._r = 0;
        this._w = 0;
    }
    static _varIntSize(n) {
        if ((n & 0xFFFFFF80) === 0) {
            return 1;
        }
        if ((n & 0xFFFFC000) === 0) {
            return 2;
        }
        if ((n & 0xFFE00000) === 0) {
            return 3;
        }
        if ((n & 0xF0000000) === 0) {
            return 4;
        }
        return 5;
    }
    static _stringSize(n) {
        n = unescape(encodeURIComponent(n));
        return n.length + this._varIntSize(n.length);
    }
    _reset() {
        this._r = 0;
        this._w = 0;
    }
    _getReaderIndex() {
        return this._r;
    }
    _setReaderIndex(r) {
        this._r = r;
    }
    _getWriterIndex() {
        return this._w;
    }
    _setWriterIndex(w) {
        this._w = w;
    }
    _readUint8() {
        return this._v.getUint8(this._r++);
    }
    _writeUint8(n) {
        this._v.setUint8(this._w++, n);
        return this;
    }
    _readUint16() {
        const n = this._v.getUint16(this._r);
        this._r += 2;
        return n;
    }
    _writeUint16(n) {
        this._v.setUint16(this._w, n);
        this._w += 2;
        return this;
    }
    _readUint32() {
        const n = this._v.getUint32(this._r);
        this._r += 4;
        return n;
    }
    _writeUint32(n) {
        this._v.setUint32(this._w, n);
        this._w += 4;
        return this;
    }
    _readInt8() {
        return this._v.getInt8(this._r++);
    }
    _writeInt8(n) {
        this._v.setInt8(this._w++, n);
        return this;
    }
    _readInt16() {
        const n = this._v.getInt16(this._r);
        this._r += 2;
        return n;
    }
    _writeInt16(n) {
        this._v.setInt16(this._w, n);
        this._w += 2;
        return this;
    }
    _readInt32() {
        const n = this._v.getInt32(this._r);
        this._r += 4;
        return n;
    }
    _writeInt32(n) {
        this._v.setInt32(this._w, n);
        this._w += 4;
        return this;
    }
    _readBoolean() {
        return this._readUint8() !== 0;
    }
    _writeBoolean(n) {
        this._writeUint8(n ? 1 : 0);
        return this;
    }
    _readFloat32() {
        const n = this._v.getFloat32(this._r);
        this._r += 4;
        return n;
    }
    _writeFloat32(n) {
        this._v.setFloat32(this._w, n);
        this._w += 4;
        return this;
    }
    _readFloat64() {
        const n = this._v.getFloat64(this._r);
        this._r += 8;
        return n;
    }
    _writeFloat64(n) {
        this._v.setFloat64(this._w, n);
        this._w += 8;
        return this;
    }
    _writeUint8Array(n) {
        this._u8.set(n, this._w);
        this._w += n.byteLength;
    }
    _readVarInt() {
        let v = 0;
        let moves = 0;
        let buff;
        do {
            buff = this._readInt8();
            v |= (buff & 0x7F) << moves++ * 7;
            if (moves > 5) {
                throw new Error("VarInt too big");
            }
        } while ((buff & 0x80) === 128);
        return v;
    }
    _writeVarInt(n) {
        while (n & 0xFFFFFF80) {
            this._writeInt8(n | 0x80);
            n = n >>> 7;
        }
        this._writeInt8(n);
        return this;
    }
    _readString() {
        const len = this._readVarInt();
        const b = this._peekUint8Array(len);
        return _PacketBuffer._utf8decoder.decode(b);
    }
    _writeString(n) {
        const b = _PacketBuffer._utf8encoder.encode(n);
        this._writeVarInt(b.length);
        new Uint8Array(this._b).set(b, this._w);
        this._w += b.length;
    }
    _peekUint8Array(n) {
        if (n > 1024 * 1024 * 2) {
            throw new Error("tried to peek " + n + " bytes");
        }
        const arr = new Uint8Array(this._b, this._v.byteOffset + this._r, n);
        this._r += n;
        return arr;
    }
    _peekUint32Array(n) {
        const arr = new Uint32Array(this._b, this._v.byteOffset + this._r, n);
        this._r += n * 4;
        return arr;
    }
    _readUint8Array(n) {
        const start = this._v.byteOffset + this._r;
        const arr = new Uint8Array(this._b.slice(start, start + n));
        this._r += n;
        return arr;
    }
    _readUint32Array(n) {
        const start = this._v.byteOffset + this._r;
        const end = start + n * 4;
        if (end > this._v.byteLength) {
            throw new RangeError("can't read " + n + " more uint32s");
        }
        const arr = new Uint32Array(this._b.slice(start, end));
        this._r += n * 4;
        return arr;
    }
    _readInt32Array(n) {
        const start = this._v.byteOffset + this._r;
        const end = start + n * 4;
        if (end > this._v.byteLength) {
            throw new RangeError("can't read " + n + " more int32s");
        }
        const arr = new Int32Array(this._b.slice(start, end));
        this._r += n * 4;
        return arr;
    }
    _readInt64Array(n) {
        const start = this._v.byteOffset + this._r;
        const arr = new BigInt64Array(this._b.slice(start, start + n * 8));
        this._r += n * 8;
        return arr;
    }
    _readUint64Array(n) {
        const start = this._v.byteOffset + this._r;
        const arr = new BigUint64Array(this._b.slice(start, start + n * 8));
        this._r += n * 8;
        return arr;
    }
    _readPosition() {
        const b = this._readUint32();
        const a = this._readUint32();
        const arr = new Int32Array(3);
        arr[0] = b >>> (38 - 32);
        arr[1] = a & 0xFFF;
        arr[2] = (a >>> 12) | ((b & 0x3F) << 12);
        return arr;
    }
}
exports._PacketBuffer = _PacketBuffer;
_PacketBuffer._utf8decoder = new TextDecoder("utf-8");
_PacketBuffer._utf8encoder = new TextEncoder();


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var Buffer = __webpack_require__(1).Buffer;
var Transform = __webpack_require__(14).Transform;
var binding = __webpack_require__(150);
var util = __webpack_require__(4);
var assert = __webpack_require__(26).ok;
var kMaxLength = __webpack_require__(1).kMaxLength;
var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
var bkeys = Object.keys(binding);
for (var bk = 0; bk < bkeys.length; bk++) {
  var bkey = bkeys[bk];
  if (bkey.match(/^Z/)) {
    Object.defineProperty(exports, bkey, {
      enumerable: true, value: binding[bkey], writable: false
    });
  }
}

// translation table for return codes.
var codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

var ckeys = Object.keys(codes);
for (var ck = 0; ck < ckeys.length; ck++) {
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
}

Object.defineProperty(exports, 'codes', {
  enumerable: true, value: Object.freeze(codes), writable: false
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function (o) {
  return new Deflate(o);
};

exports.createInflate = function (o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function (o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function (o) {
  return new InflateRaw(o);
};

exports.createGzip = function (o) {
  return new Gzip(o);
};

exports.createGunzip = function (o) {
  return new Gunzip(o);
};

exports.createUnzip = function (o) {
  return new Unzip(o);
};

// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function (buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function (buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function (buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf;
    var err = null;

    if (nread >= kMaxLength) {
      err = new RangeError(kRangeErrorMessage);
    } else {
      buf = Buffer.concat(buffers, nread);
    }

    buffers = [];
    engine.close();
    callback(err, buf);
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);

  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');

  var flushFlag = engine._finishFlushFlag;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}

// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}

// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}

// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}

function isValidFlushFlag(flag) {
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
}

// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  var _this = this;

  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush && !isValidFlushFlag(opts.flush)) {
    throw new Error('Invalid flush flag: ' + opts.flush);
  }
  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  }

  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._handle = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._handle.onerror = function (message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);

  Object.defineProperty(this, '_closed', {
    get: function () {
      return !_this._handle;
    },
    configurable: true,
    enumerable: true
  });
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function (level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () {
      assert(self._handle, 'zlib binding closed');
      self._handle.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function () {
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function (callback) {
  this._transform(Buffer.alloc(0), '', callback);
};

Zlib.prototype.flush = function (kind, callback) {
  var _this2 = this;

  var ws = this._writableState;

  if (typeof kind === 'function' || kind === undefined && !callback) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback) process.nextTick(callback);
  } else if (ws.ending) {
    if (callback) this.once('end', callback);
  } else if (ws.needDrain) {
    if (callback) {
      this.once('drain', function () {
        return _this2.flush(kind, callback);
      });
    }
  } else {
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  }
};

Zlib.prototype.close = function (callback) {
  _close(this, callback);
  process.nextTick(emitCloseNT, this);
};

function _close(engine, callback) {
  if (callback) process.nextTick(callback);

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) return;

  engine._handle.close();
  engine._handle = null;
}

function emitCloseNT(self) {
  self.emit('close');
}

Zlib.prototype._transform = function (chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));

  if (!this._handle) return cb(new Error('zlib binding closed'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last) flushFlag = this._finishFlushFlag;else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function (er) {
      error = er;
    });

    assert(this._handle, 'zlib binding closed');
    do {
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    if (nread >= kMaxLength) {
      _close(this);
      throw new RangeError(kRangeErrorMessage);
    }

    var buf = Buffer.concat(buffers, nread);
    _close(this);

    return buf;
  }

  assert(this._handle, 'zlib binding closed');
  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) {
      this.buffer = null;
      this.callback = null;
    }

    if (self._hadError) return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;

      if (!async) return true;

      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async) return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = {

  PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],

  TYPE_IHDR: 0x49484452,
  TYPE_IEND: 0x49454e44,
  TYPE_IDAT: 0x49444154,
  TYPE_PLTE: 0x504c5445,
  TYPE_tRNS: 0x74524e53, // eslint-disable-line camelcase
  TYPE_gAMA: 0x67414d41, // eslint-disable-line camelcase

  // color-type bits
  COLORTYPE_GRAYSCALE: 0,
  COLORTYPE_PALETTE: 1,
  COLORTYPE_COLOR: 2,
  COLORTYPE_ALPHA: 4, // e.g. grayscale and alpha

  // color-type combinations
  COLORTYPE_PALETTE_COLOR: 3,
  COLORTYPE_COLOR_ALPHA: 6,

  COLORTYPE_TO_BPP_MAP: {
    0: 1,
    2: 3,
    3: 1,
    4: 2,
    6: 4
  },

  GAMMA_DIVISION: 100000
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(23).EventEmitter;
var inherits = __webpack_require__(9);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(24);
Stream.Writable = __webpack_require__(145);
Stream.Duplex = __webpack_require__(146);
Stream.Transform = __webpack_require__(147);
Stream.PassThrough = __webpack_require__(148);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(1)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GoPoint_1 = __webpack_require__(169);
class _GoRect {
    constructor(x0, y0, x1, y1) {
        if (x0 > x1) {
            const tmp = x0;
            x0 = x1;
            x1 = tmp;
        }
        if (y0 > y1) {
            const tmp = y0;
            y0 = y1;
            y1 = tmp;
        }
        this._min = new GoPoint_1._GoPoint(x0, y0);
        this._max = new GoPoint_1._GoPoint(x1, y1);
        return;
    }
    _dx() {
        return this._max._x - this._min._x;
    }
    _dy() {
        return this._max._y - this._min._y;
    }
}
exports._GoRect = _GoRect;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Shader {
    _loadShader(gl, type, source) {
        const shader = gl.createShader(type);
        if (!shader) {
            throw new Error("can't create shader");
        }
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
            gl.deleteShader(shader);
            throw new Error("can't compile shader");
        }
        return shader;
    }
    _initShaderProgram(gl, vsSource, fsSource) {
        const vertexShader = this._loadShader(gl, gl.VERTEX_SHADER, vsSource);
        const fragmentShader = this._loadShader(gl, gl.FRAGMENT_SHADER, fsSource);
        const shaderProgram = gl.createProgram();
        if (!shaderProgram) {
            throw new Error("can't create shader program");
        }
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));
            throw new Error("can't link shader program");
        }
        return shaderProgram;
    }
}
exports._Shader = _Shader;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Deque {
    constructor(initSize) {
        this._head = 0;
        this._tail = 0;
        this._mask = 1;
        if (!initSize) {
            initSize = 2;
        }
        this._list = Array(initSize);
    }
    _enqueue(value) {
        const list = this._list;
        const head = this._head = (this._head - 1) & this._mask;
        list[head] = value;
        if (head === this._tail) {
            this._resize(list.length, list.length << 1);
        }
        return this;
    }
    _pushLeft(value) {
        const list = this._list;
        const head = this._head = (this._head - 1) & this._mask;
        list[head] = value;
        if (head === this._tail) {
            this._resize(list.length, list.length << 1);
        }
        return this;
    }
    _clear() {
        this._head = 0;
        this._tail = 0;
    }
    _peek(index) {
        const list = this._list;
        const { _head: head, _tail: tail } = this;
        const s = this._size();
        if ((index | 0) !== index || index >= s || index < -s) {
            throw new RangeError('deque index out of range');
        }
        const pos = ((index >= 0 ? head : tail) + index) & this._mask;
        return list[pos];
    }
    _indexOf(needle, start = 0) {
        const list = this._list;
        const { _head: head, _mask: mask } = this;
        const offset = start >= 0 ? start : start < -this._size() ? 0 : this._size() + start;
        for (let i = offset; i < this._size(); i++) {
            if (list[(head + i) & mask] === needle) {
                return i;
            }
        }
        return -1;
    }
    _has(needle) {
        const list = this._list;
        const { _head: head, _mask: mask } = this;
        for (let i = 0; i < this._size(); i++) {
            if (list[(head + i) & mask] === needle) {
                return true;
            }
        }
        return false;
    }
    _size() {
        return (this._tail - this._head) & this._mask;
    }
    _dequeue() {
        if (this._head === this._tail) {
            throw new RangeError('pop from an empty deque');
        }
        this._tail = (this._tail - 1) & this._mask;
        const value = this._list[this._tail];
        this._list[this._tail] = undefined;
        if (this._size() < this._mask >>> 1) {
            this._resize(this._size(), this._list.length >>> 1);
        }
        return value;
    }
    _popLeft() {
        if (this._head === this._tail) {
            throw new RangeError('pop from an empty deque');
        }
        const value = this._list[this._head];
        this._list[this._head] = undefined;
        this._head = (this._head + 1) & this._mask;
        if (this._size() < this._mask >>> 1) {
            this._resize(this._size(), this._list.length >>> 1);
        }
        return value;
    }
    *_entries() {
        const list = this._list;
        const { _head: head, _mask: mask } = this;
        const s = this._size();
        for (let i = 0; i < s; i++) {
            yield list[(head + i) & mask];
        }
    }
    keys() {
        return this._entries();
    }
    _values() {
        return this._entries();
    }
    [Symbol.iterator]() {
        return this._entries();
    }
    _resize(size, length) {
        const { _head: head, _mask: mask } = this;
        this._head = 0;
        this._tail = size;
        this._mask = length - 1;
        const list = this._list;
        if (head === 0) {
            list.length = length;
            return;
        }
        const sorted = new Array(length);
        for (let i = 0; i < size; i++) {
            sorted[i] = list[(head + i) & mask];
        }
        this._list = sorted;
    }
}
exports._Deque = _Deque;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
const BakeTask_1 = __webpack_require__(88);
class _OriginRenderOcTree {
    constructor(klocki, origin, parent, ox, oy, oz, sx, sy, sz) {
        this._klocki = klocki;
        if (origin == null) {
            origin = this;
            this._offsetarr = new Float32Array(4);
            this._offsetarr[0] = 999999.1337;
            this._offsetarr[1] = 999999.1337;
            this._offsetarr[2] = 999999.1337;
        }
        else {
            this._offsetarr = null;
        }
        this._bakeTask = null;
        this._parent = parent;
        this._section = null;
        this._drawCount = 0;
        this._origin = origin;
        this._worldchunkx = 0.1337;
        this._worldchunky = 0.1337;
        this._worldchunkz = 0.1337;
        this._joined = false;
        this._joinSizes = null;
        this._aliveChunks = 0;
        this._dirty = false;
        this._baking = false;
        this._fromoriginx = ox;
        this._fromoriginy = oy;
        this._fromoriginz = oz;
        this._sizex = sx;
        this._sizey = sy;
        this._sizez = sz;
        this._glBuffer = null;
        if (sx == 1 || sy == 1 || sz == 1) {
            this._children = null;
            return;
        }
        const children = this._children = new Array(8);
        const sx2 = sx >> 1;
        const sy2 = sy >> 1;
        const sz2 = sz >> 1;
        children[0] = new _OriginRenderOcTree(klocki, origin, this, ox, oy, oz, sx2, sy2, sz2);
        children[1] = new _OriginRenderOcTree(klocki, origin, this, ox + sx2, oy, oz, sx2, sy2, sz2);
        children[2] = new _OriginRenderOcTree(klocki, origin, this, ox, oy, oz + sz2, sx2, sy2, sz2);
        children[3] = new _OriginRenderOcTree(klocki, origin, this, ox + sx2, oy, oz + sz2, sx2, sy2, sz2);
        children[4] = new _OriginRenderOcTree(klocki, origin, this, ox, oy + sy2, oz, sx2, sy2, sz2);
        children[5] = new _OriginRenderOcTree(klocki, origin, this, ox + sx2, oy + sy2, oz, sx2, sy2, sz2);
        children[6] = new _OriginRenderOcTree(klocki, origin, this, ox, oy + sy2, oz + sz2, sx2, sy2, sz2);
        children[7] = new _OriginRenderOcTree(klocki, origin, this, ox + sx2, oy + sy2, oz + sz2, sx2, sy2, sz2);
    }
    _getBuffer() {
        let buf = this._glBuffer;
        if (buf === null) {
            buf = this._glBuffer = this._klocki._display._gl.createBuffer();
        }
        return buf;
    }
    _setPosition(x, y, z) {
        const offsetarr = this._offsetarr;
        if (offsetarr[0] != x || offsetarr[1] != y || offsetarr[2] != z) {
            offsetarr[0] = x;
            offsetarr[1] = y;
            offsetarr[2] = z;
            this._worldchunkx = x / 16;
            this._worldchunky = y / 16;
            this._worldchunkz = z / 16;
            const children = this._children;
            if (children != null) {
                for (let i = 0; i < children.length; i++) {
                    const child = children[i];
                    child._updatePos();
                }
            }
            return true;
        }
        return false;
    }
    _updatePos() {
        this._joined = false;
        this._dirty = false;
        this._drawCount = 0;
        this._aliveChunks = 0;
        if (this._sizex == 1) {
            if (this._section != null) {
                this._section._watcher = null;
            }
            const world = this._klocki._theWorld;
            if (world !== null) {
                const wx = this._origin._worldchunkx + this._fromoriginx;
                const wy = this._origin._worldchunky + this._fromoriginy;
                const wz = this._origin._worldchunkz + this._fromoriginz;
                this._section = world._getSectionWatcher(wx, wy, wz);
                this._section._addWatcher(this);
                if (this._section._section != null) {
                    this._aliveChunks = 1;
                    this._markDirty();
                }
            }
            return;
        }
        const children = this._children;
        if (children != null) {
            for (let i = 0; i < 8; i++) {
                const child = children[i];
                child._updatePos();
            }
        }
    }
    _calcAliveChunks() {
        let alive = 0;
        const children = this._children;
        if (children != null) {
            for (let i = 0; i < 8; i++) {
                const child = children[i];
                alive += child._aliveChunks;
            }
        }
        return alive;
    }
    _markDirty() {
        if (this._sizex != 1) {
            this._aliveChunks = this._calcAliveChunks();
            const children = this._children;
            if (children != null) {
                let newDirty = false;
                for (let i = 0; i < 8; i++) {
                    const child = children[i];
                    newDirty = newDirty || child._dirty;
                }
                this._dirty = newDirty;
            }
            if (this._joined) {
                this._markDirtyDownSplit();
            }
        }
        else {
            const w = this._section;
            if (w !== null) {
                const section = w._section;
                if (section !== null) {
                    if (!this._baking) {
                        this._bakeTask = new BakeTask_1._BakeTask(this, section);
                        this._klocki._scheduleBaking(this._bakeTask);
                        this._baking = true;
                        this._dirty = true;
                    }
                    this._aliveChunks = 1;
                }
                else {
                }
            }
        }
        this._joined = false;
        const parent = this._parent;
        if (parent != null) {
            parent._markDirty();
        }
    }
    _markDirtyDownSplit() {
        if (this._sizex != 1) {
            this._splitBuffers();
            const children = this._children;
            if (this._sizex > 2 && children != null) {
                for (let i = 0; i < 8; i++) {
                    children[i]._splitBuffers();
                }
            }
        }
    }
    _unmarkDirty() {
        if (this._sizex == 1) {
            this._dirty = false;
        }
        this._joined = false;
        const children = this._children;
        if (children != null) {
            let newDirty = false;
            for (let i = 0; i < 8; i++) {
                const child = children[i];
                newDirty = newDirty || child._dirty;
            }
            this._dirty = newDirty;
        }
        const parent = this._parent;
        if (parent != null) {
            parent._unmarkDirty();
        }
    }
    _notify() {
        this._markDirty();
    }
    _preRender(shaderWorld) {
        if (this._aliveChunks === 0) {
            return;
        }
        const sizex = this._sizex;
        if (sizex == 1) {
            if (this._bakeTask != null || this._drawCount > 0) {
                const off = this._origin._offsetarr;
                const pos = _OriginRenderOcTree._testPosVec3;
                pos[0] = off[0] + this._fromoriginx * 16 + 8;
                pos[1] = off[1] + this._fromoriginy * 16 + 8;
                pos[2] = off[2] + this._fromoriginz * 16 + 8;
                const visible = this._klocki._frustum._testSphereTouches(pos, -13.86);
                if (visible) {
                    const toBake = this._bakeTask != null;
                    const toDraw = this._drawCount > 0;
                    if (toBake || toDraw) {
                        this._addToLastSectionsByDistanceSquared(pos, toBake, toDraw);
                    }
                }
            }
            return;
        }
        const off = this._origin._offsetarr;
        const pos = _OriginRenderOcTree._testPosVec3;
        pos[0] = off[0] + this._fromoriginx * 16 + 8 * sizex;
        pos[1] = off[1] + this._fromoriginy * 16 + 8 * sizex;
        pos[2] = off[2] + this._fromoriginz * 16 + 8 * sizex;
        const sphereDistance = this._klocki._frustum._testSphereFully(pos);
        let visibility = 0;
        if (sphereDistance > 7 * sizex) {
            visibility = 1;
        }
        else if (sphereDistance < _OriginRenderOcTree._outsideHideRadius * sizex) {
        }
        else {
            visibility = 2;
        }
        if (this._joined) {
            if (this._drawCount > 0) {
                if (visibility == 1 || visibility == 2) {
                    this._addToLastSectionsByDistanceSquared(pos, false, true);
                }
                else if (visibility == 2) {
                    this._splitBuffers();
                    const children = this._children;
                    if (children != null) {
                        for (let i = 0; i < 8; i++) {
                            const child = children[i];
                            child._preRender(shaderWorld);
                        }
                    }
                }
            }
        }
        else {
            const children = this._children;
            if (children != null) {
                for (let i = 0; i < 8; i++) {
                    const child = children[i];
                    child._preRender(shaderWorld);
                }
            }
            if (visibility == 1) {
                if (!this._dirty && sizex >= 2 && sizex <= 2) {
                    if (this._calcJoinedSize() > 0 && this._klocki._canJoinNextRegion()) {
                        this._joinBuffers();
                    }
                }
            }
        }
    }
    _addToLastSectionsByDistanceSquared(pos, bake, draw) {
        const klocki = this._klocki;
        const dx = (klocki._renderX - pos[0]) | 0;
        const dy = (klocki._renderY - pos[1]) | 0;
        const dz = (klocki._renderZ - pos[2]) | 0;
        const distanceSq = (dx * dx + dy * dy + dz * dz) | 0;
        const distanceChunk = (distanceSq >> 8) | 0;
        const bakeSec = this._klocki._bakeSectionsByDistanceSquared;
        const sec = this._klocki._sectionsByDistanceSquared;
        if (distanceChunk >= 0 && distanceChunk < bakeSec.length) {
            const bakeSectionsArr = bakeSec[distanceChunk];
            const sectionsArr = sec[distanceChunk];
            const indexLast = 1 + bakeSectionsArr[0] | 0;
            if (!!bake && indexLast < bakeSectionsArr.length) {
                bakeSectionsArr[indexLast] = this;
                bakeSectionsArr[0]++;
            }
            const index = (++sectionsArr[0]) | 0;
            if (index < sectionsArr.length) {
                sectionsArr[index] = [this, this._drawCount, this._glBuffer];
            }
        }
    }
    _bakeAndUpload(shaderWorld) {
        if (this._sizex == 1) {
            return;
        }
        const children = this._children;
        if (children != null) {
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                child._bakeAndUpload(shaderWorld);
            }
        }
    }
    _calcJoinedSize() {
        const children = this._children;
        if (children === null) {
            return 0;
        }
        let sumLength = 0;
        for (let i = 0; i < 8; i++) {
            const child = children[i];
            const dc = child._drawCount;
            if (dc > 0) {
                sumLength += dc;
            }
        }
        return sumLength;
    }
    _joinBuffers() {
        if (this._drawCount > 0) {
            this._clearBuffer();
        }
        this._drawCount = 0;
        const children = this._children;
        const sumLength = this._calcJoinedSize();
        const gl = this._klocki._display._gl;
        if (sumLength > 0) {
            const stride = this._klocki._worldRendererBaker._stride;
            gl.bindBuffer(gl.ARRAY_BUFFER, this._getBuffer());
            _OriginRenderOcTree._usedVideoMemory += sumLength * stride;
            gl.bufferData(gl.ARRAY_BUFFER, sumLength * stride, gl.STATIC_DRAW);
            this._joinSizes = new Uint32Array(8);
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                const dc = child._drawCount;
                if (dc > 0) {
                    child._joined = false;
                    const buf = child._getBuffer();
                    gl.bindBuffer(gl.COPY_READ_BUFFER, buf);
                    gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.ARRAY_BUFFER, 0, this._drawCount * stride, dc * stride);
                    this._drawCount += dc;
                    this._joinSizes[i] = dc;
                }
            }
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                const dc = child._drawCount;
                if (dc > 0) {
                    child._clearBuffer();
                }
            }
            this._joined = true;
        }
    }
    _splitBuffers() {
        const gl = this._klocki._display._gl;
        if (this._joined && this._drawCount > 0) {
            const stride = this._klocki._worldRendererBaker._stride;
            gl.bindBuffer(gl.COPY_READ_BUFFER, this._getBuffer());
            let joinedBufferPos = 0;
            const children = this._children;
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                const dc = this._joinSizes[i];
                if (dc > 0) {
                    let buf = child._glBuffer;
                    if (buf != null) {
                        this._klocki._scheduleDeleteBuffer(buf);
                        child._glBuffer = null;
                    }
                    buf = child._getBuffer();
                    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
                    gl.bufferData(gl.ARRAY_BUFFER, dc * stride, gl.STATIC_DRAW);
                    gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.ARRAY_BUFFER, joinedBufferPos * stride, 0, dc * stride);
                    _OriginRenderOcTree._usedVideoMemory += dc * stride;
                    child._drawCount = dc;
                    joinedBufferPos += dc;
                }
            }
            this._joined = false;
            _OriginRenderOcTree._usedVideoMemory -= this._drawCount * stride;
            this._drawCount = 0;
            this._joinSizes = null;
            this._klocki._scheduleDeleteBuffer(this._glBuffer);
            this._glBuffer = null;
        }
    }
    _clearBuffer() {
        const stride = this._klocki._worldRendererBaker._stride;
        _OriginRenderOcTree._usedVideoMemory -= this._drawCount * stride;
        this._drawCount = 0;
        this._klocki._scheduleDeleteBuffer(this._glBuffer);
        this._glBuffer = null;
    }
    _joinAt(level) {
        if (this._sizex == level) {
            this._joinBuffers();
            return;
        }
        const children = this._children;
        for (let i = 0; i < children.length; i++) {
            const child = children[i];
            child._joinAt(level);
        }
    }
    _drawSelf(shaderWorld, off) {
        const gl = this._klocki._display._gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this._getBuffer());
        this._klocki._worldRendererBaker._setupPointers(shaderWorld);
        shaderWorld._updateOffset(off);
        if (true) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._klocki._display._indexBuffer);
            gl.drawElements(gl.TRIANGLES, this._drawCount * (6 / 4), gl.UNSIGNED_INT, 0);
        }
        else {}
    }
}
exports._OriginRenderOcTree = _OriginRenderOcTree;
_OriginRenderOcTree._usedVideoMemory = 0;
_OriginRenderOcTree._testPosVec3 = gl_matrix_1.vec3.create();
_OriginRenderOcTree._outsideHideRadius = -13.86;
_OriginRenderOcTree._redBuf = new Uint8Array([255, 100, 100, 255]);
_OriginRenderOcTree._greenBuf = new Uint8Array([100, 255, 100, 255]);


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
const simpleCube = [
    { X: 0, Y: 0, Z: 0 },
    { X: 1, Y: 0, Z: 0 },
    { X: 0, Y: 0, Z: 1 },
    { X: 1, Y: 0, Z: 1 },
    { X: 0, Y: 1, Z: 0 },
    { X: 1, Y: 1, Z: 0 },
    { X: 0, Y: 1, Z: 1 },
    { X: 1, Y: 1, Z: 1 },
];
const faceVertices = [
    {
        indices: [0, 1, 2, 3, 2, 1],
        cubeIndices: [4, 5, 6, 7, 6, 5],
        verts: [
            { X: 0, Y: 1, Z: 0, TOffsetX: 0, TOffsetY: 0 },
            { X: 1, Y: 1, Z: 0, TOffsetX: 1, TOffsetY: 0 },
            { X: 0, Y: 1, Z: 1, TOffsetX: 0, TOffsetY: 1 },
            { X: 1, Y: 1, Z: 1, TOffsetX: 1, TOffsetY: 1 }
        ],
        direction: { X: 0, Y: 1, Z: 0 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        cubeIndices: [0, 2, 1, 3, 1, 2],
        verts: [
            { X: 0, Y: 0, Z: 0, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 0, Z: 1, TOffsetX: 0, TOffsetY: 0 },
            { X: 1, Y: 0, Z: 0, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 0, Z: 1, TOffsetX: 1, TOffsetY: 0 },
        ],
        direction: { X: 0, Y: -1, Z: 0 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        cubeIndices: [0, 1, 4, 5, 4, 1],
        verts: [
            { X: 0, Y: 0, Z: 0, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 0, Z: 0, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 0, TOffsetX: 1, TOffsetY: 0 },
            { X: 1, Y: 1, Z: 0, TOffsetX: 0, TOffsetY: 0 },
        ],
        direction: { X: 0, Y: 0, Z: -1 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        cubeIndices: [2, 6, 3, 7, 3, 6],
        verts: [
            { X: 0, Y: 0, Z: 1, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 1, TOffsetX: 0, TOffsetY: 0 },
            { X: 1, Y: 0, Z: 1, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 1, Z: 1, TOffsetX: 1, TOffsetY: 0 },
        ],
        direction: { X: 0, Y: 0, Z: 1 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        cubeIndices: [0, 4, 2, 6, 2, 4],
        verts: [
            { X: 0, Y: 0, Z: 0, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 0, TOffsetX: 0, TOffsetY: 0 },
            { X: 0, Y: 0, Z: 1, TOffsetX: 1, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 1, TOffsetX: 1, TOffsetY: 0 },
        ],
        direction: { X: -1, Y: 0, Z: 0 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        cubeIndices: [1, 3, 5, 7, 5, 3],
        verts: [
            { X: 1, Y: 0, Z: 0, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 0, Z: 1, TOffsetX: 0, TOffsetY: 1 },
            { X: 1, Y: 1, Z: 0, TOffsetX: 1, TOffsetY: 0 },
            { X: 1, Y: 1, Z: 1, TOffsetX: 0, TOffsetY: 0 },
        ],
        direction: { X: 1, Y: 0, Z: 0 },
    }
];
class _RenderPoint {
    constructor(pos) {
        this._pos = pos;
    }
}
class _RenderBox {
    constructor(klocki, x, y, z, dx, dy, dz, textures) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._dx = dx;
        this._dy = dy;
        this._dz = dz;
        this._textures = textures;
        this._positions = [];
        const as = klocki._textureManager._atlasSize;
        const wr = klocki._worldRendererMobsHelper;
        wr._reset();
        wr._atlas = this._textures[0]._atlasId;
        for (let i = 0; i < 8; i++) {
            const cubeVert = simpleCube[i];
            const pos = gl_matrix_1.vec3.fromValues(this._x + this._dx * cubeVert.X, this._y + this._dy * cubeVert.Y, this._z + this._dz * cubeVert.Z);
            this._positions.push(new _RenderPoint(pos));
        }
        for (let facei = 0; facei < 6; facei++) {
            const face = faceVertices[facei];
            const verts = face.verts;
            let color = 0xFFFFFFFF;
            if (facei == 2 || facei == 3) {
                color = 0xFFCCCCCC;
            }
            if (facei == 4 || facei == 5) {
                color = 0xFFAAAAAA;
            }
            if (facei == 1) {
                color = 0xFF999999;
            }
            const tex = this._textures[facei];
            const texOffsetX = tex._subRect._min._x / as;
            const texOffsetY = tex._subRect._min._y / as;
            const texScaleX = tex._subRect._dx() / as;
            const texScaleY = tex._subRect._dy() / as;
            const cubeIndices = face.cubeIndices;
            for (let i = 0; i < 4; i++) {
                const vert = verts[i];
                const pos = this._positions[cubeIndices[i]]._pos;
                wr._pos(pos[0], pos[1], pos[2])._tex(texOffsetX + vert.TOffsetX * texScaleX, texOffsetY + vert.TOffsetY * texScaleY)._color(color)._endVertex();
            }
        }
        this._cachedBuf = new Uint8Array(wr._copyBuf());
    }
    _renderAt(wr, m) {
        wr._putPrepared(this._cachedBuf);
        const matID = wr._klocki._textureManager._pushGroupMatrix(m);
        wr._matMany(matID, 6 * 4);
    }
}
exports._RenderBox = _RenderBox;
_RenderBox._tempPoints = [gl_matrix_1.vec3.create(), gl_matrix_1.vec3.create(), gl_matrix_1.vec3.create(), gl_matrix_1.vec3.create(), gl_matrix_1.vec3.create(), gl_matrix_1.vec3.create(), gl_matrix_1.vec3.create(), gl_matrix_1.vec3.create()];
_RenderBox._identity = gl_matrix_1.mat4.create();


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(45);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(25);
exports.Duplex = __webpack_require__(7);
exports.Transform = __webpack_require__(49);
exports.PassThrough = __webpack_require__(144);


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(15);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(11);
util.inherits = __webpack_require__(9);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(143)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(46);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(16).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(47);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(7);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(7);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(141).setImmediate, __webpack_require__(6)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var objectAssign = __webpack_require__(151);

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(4);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
class _RenderEntity {
    constructor(klocki) {
        this._klocki = klocki;
    }
    _render(entity) {
        const matEntity = _RenderEntity._positionMatrix;
        gl_matrix_1.mat4.identity(matEntity);
        const partial = this._klocki._getPartialTicks();
        gl_matrix_1.mat4.translate(matEntity, matEntity, [entity._renderX(partial), entity._renderY(partial), entity._renderZ(partial)]);
        gl_matrix_1.mat4.rotateY(matEntity, matEntity, Math.PI - entity._renderYaw(partial));
    }
}
exports._RenderEntity = _RenderEntity;
_RenderEntity._positionMatrix = gl_matrix_1.mat4.create();


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Item {
    constructor() {
        this._name = "";
        this._unlocalizedName = "";
    }
    _setName(name) {
        this._name = name;
        return this;
    }
    _setUnlocalizedName(name) {
        this._unlocalizedName = name;
        return this;
    }
    _setCreativeTab(tab) {
        return this;
    }
}
exports._Item = _Item;
_Item._ToolMaterial = {
    _IRON: 1,
    _WOOD: 2,
    _STONE: 3,
    _DIAMOND: 4,
    _GOLD: 5,
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Block {
    constructor(prop) {
        this._prop = prop;
        this._hasModel = true;
        this._name = "notset";
        this._textureInfo = null;
        this._textureCallback = null;
        this._model = null;
        this._opaque = prop._opaque;
        this._states = 1;
        this._baseStateId = -1;
    }
    _loadModelTexture(manager) {
        if (this._hasModel) {
        }
    }
    _textureName() {
        return this._name;
    }
    _getDefaultState() {
        return this;
    }
}
exports._Block = _Block;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Block_1 = __webpack_require__(29);
class _AirBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._hasModel = false;
    }
}
exports._AirBlock = _AirBlock;
class _SnowyDirtBlock extends Block_1._Block {
    constructor(proto, prop) {
        super(prop);
        if (proto >= 480) {
            this._states = 2;
        }
    }
}
exports._SnowyDirtBlock = _SnowyDirtBlock;
class _GrassBlock extends _SnowyDirtBlock {
    constructor(proto, prop) {
        super(proto, prop);
    }
    _textureName() {
        return "grass_block_top";
    }
    getGrassColor(temperature, humidity) {
        humidity = humidity * temperature;
        const i = Math.floor((1 - temperature) * 255);
        const j = Math.floor((1 - humidity) * 255);
        const k = (j << 8) | i;
        return k > _GrassBlock._grassBuffer.length ? -65281 : _GrassBlock._grassBuffer[k];
    }
}
exports._GrassBlock = _GrassBlock;
_GrassBlock._grassBuffer = new Array(65536);
class _StoneBlock extends Block_1._Block {
}
exports._StoneBlock = _StoneBlock;
class _SaplingBlock extends Block_1._Block {
    constructor(proto, tree, prop) {
        super(prop);
        if (proto >= 480) {
            this._states = 2;
        }
        this._tree = tree;
    }
}
exports._SaplingBlock = _SaplingBlock;
class _EmptyDropsBlock extends Block_1._Block {
}
exports._EmptyDropsBlock = _EmptyDropsBlock;
class _SandBlock extends Block_1._Block {
    constructor(color, prop) {
        super(prop);
        this._color = color;
    }
}
exports._SandBlock = _SandBlock;
class _GravelBlock extends Block_1._Block {
}
exports._GravelBlock = _GravelBlock;
class _OreBlock extends Block_1._Block {
}
exports._OreBlock = _OreBlock;
class _RotatedPillarBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 3;
    }
}
exports._RotatedPillarBlock = _RotatedPillarBlock;
class _LogBlock extends _RotatedPillarBlock {
    constructor(matColorDup, prop) {
        super(prop);
        this._matColorDuplicate = matColorDup;
    }
}
exports._LogBlock = _LogBlock;
class _Tree {
}
exports._Tree = _Tree;
class _OakTree extends _Tree {
}
exports._OakTree = _OakTree;
class _SpruceTree extends _Tree {
}
exports._SpruceTree = _SpruceTree;
class _BirchTree extends _Tree {
}
exports._BirchTree = _BirchTree;
class _JungleTree extends _Tree {
}
exports._JungleTree = _JungleTree;
class _AcaciaTree extends _Tree {
}
exports._AcaciaTree = _AcaciaTree;
class _DarkOakTree extends _Tree {
}
exports._DarkOakTree = _DarkOakTree;
var _Fluids;
(function (_Fluids) {
    _Fluids[_Fluids["_WATER"] = 0] = "_WATER";
    _Fluids[_Fluids["_LAVA"] = 1] = "_LAVA";
})(_Fluids = exports._Fluids || (exports._Fluids = {}));
class _FlowingFluidBlock extends Block_1._Block {
    constructor(proto, fluidType, prop) {
        super(prop);
        this._fluidType = fluidType;
        this._states = 16;
    }
}
exports._FlowingFluidBlock = _FlowingFluidBlock;
class _LeavesBlock extends Block_1._Block {
    constructor(proto, prop) {
        super(prop);
        this._states = 2 * 7;
    }
}
exports._LeavesBlock = _LeavesBlock;
class _SpongeBlock extends Block_1._Block {
}
exports._SpongeBlock = _SpongeBlock;
class _WetSpongeBlock extends _SpongeBlock {
}
exports._WetSpongeBlock = _WetSpongeBlock;
class _GlassBlock extends Block_1._Block {
}
exports._GlassBlock = _GlassBlock;
class _DispenserBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6 * 2;
    }
}
exports._DispenserBlock = _DispenserBlock;
class _NoteBlock extends Block_1._Block {
    constructor(proto, prop) {
        super(prop);
        this._states = 16 * 2 * 25;
    }
}
exports._NoteBlock = _NoteBlock;
class _PoweredRailBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6 * 2;
    }
}
exports._PoweredRailBlock = _PoweredRailBlock;
class _DetectorRailBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6 * 2;
    }
}
exports._DetectorRailBlock = _DetectorRailBlock;
class _DirectionalBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6;
    }
}
exports._DirectionalBlock = _DirectionalBlock;
class _PistonBlock extends _DirectionalBlock {
    constructor(sticky, prop) {
        super(prop);
        this._isSticky = sticky;
        this._states *= 2;
    }
}
exports._PistonBlock = _PistonBlock;
class _BlockWeb extends Block_1._Block {
}
exports._BlockWeb = _BlockWeb;
class _BlockPistonExtension extends _DirectionalBlock {
    constructor(prop) {
        super(prop);
        this._states *= 2 * 2;
    }
}
exports._BlockPistonExtension = _BlockPistonExtension;
class _MovingPistonBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6 * 2;
    }
}
exports._MovingPistonBlock = _MovingPistonBlock;
class _FlowerBlock extends Block_1._Block {
    constructor(effect, duration, prop) {
        super(prop);
    }
}
exports._FlowerBlock = _FlowerBlock;
class _WitherRoseBlock extends Block_1._Block {
    constructor(effect, prop) {
        super(prop);
    }
}
exports._WitherRoseBlock = _WitherRoseBlock;
class _MushroomBlock extends Block_1._Block {
}
exports._MushroomBlock = _MushroomBlock;
class _TNTBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._TNTBlock = _TNTBlock;
class _BookshelfBlock extends Block_1._Block {
}
exports._BookshelfBlock = _BookshelfBlock;
class _TorchBlock extends Block_1._Block {
}
exports._TorchBlock = _TorchBlock;
class _WallTorchBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._WallTorchBlock = _WallTorchBlock;
class _FireBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 16 * 2 * 2 * 2 * 2 * 2;
    }
}
exports._FireBlock = _FireBlock;
class _MobSpawnerBlock extends Block_1._Block {
}
exports._MobSpawnerBlock = _MobSpawnerBlock;
class _StairsBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
        this._states = 4 * 2 * 5 * 2;
    }
}
exports._StairsBlock = _StairsBlock;
class _ChestBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 3 * 2;
    }
}
exports._ChestBlock = _ChestBlock;
class _RedstoneWireBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = Math.pow(3, 4) * 16;
    }
}
exports._RedstoneWireBlock = _RedstoneWireBlock;
class _WorkbenchBlock extends Block_1._Block {
}
exports._WorkbenchBlock = _WorkbenchBlock;
class _CropsBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 8;
    }
}
exports._CropsBlock = _CropsBlock;
class _FarmlandBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 8;
    }
}
exports._FarmlandBlock = _FarmlandBlock;
class _AbstractFurnaceBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._AbstractFurnaceBlock = _AbstractFurnaceBlock;
class _FurnaceBlock extends _AbstractFurnaceBlock {
    constructor(prop) {
        super(prop);
    }
}
exports._FurnaceBlock = _FurnaceBlock;
class _StandingSignBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 16 * 2;
    }
}
exports._StandingSignBlock = _StandingSignBlock;
class _DoorBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2 * 2 * 2 * 2;
    }
}
exports._DoorBlock = _DoorBlock;
class _LadderBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._LadderBlock = _LadderBlock;
class _RailBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 10;
    }
}
exports._RailBlock = _RailBlock;
class _WallSignBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._WallSignBlock = _WallSignBlock;
class _LeverBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 3 * 4 * 2;
    }
}
exports._LeverBlock = _LeverBlock;
var _PressureSensitivity;
(function (_PressureSensitivity) {
    _PressureSensitivity[_PressureSensitivity["_MOBS"] = 0] = "_MOBS";
    _PressureSensitivity[_PressureSensitivity["_EVERYTHING"] = 1] = "_EVERYTHING";
})(_PressureSensitivity = exports._PressureSensitivity || (exports._PressureSensitivity = {}));
class _PressurePlateBlock extends Block_1._Block {
    constructor(sensitivity, prop) {
        super(prop);
        this._sensitivity = sensitivity;
        this._states = 2;
    }
}
exports._PressurePlateBlock = _PressurePlateBlock;
class _RedstoneOreBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._RedstoneOreBlock = _RedstoneOreBlock;
class _RedstoneTorchBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._RedstoneTorchBlock = _RedstoneTorchBlock;
class _WallRedstoneTorchBlock extends _RedstoneTorchBlock {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._WallRedstoneTorchBlock = _WallRedstoneTorchBlock;
class _AbstractButtonBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2 * 3;
    }
}
exports._AbstractButtonBlock = _AbstractButtonBlock;
class _StoneButtonBlock extends _AbstractButtonBlock {
}
exports._StoneButtonBlock = _StoneButtonBlock;
class _SnowLayerBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 8;
    }
}
exports._SnowLayerBlock = _SnowLayerBlock;
class _IceBlock extends Block_1._Block {
}
exports._IceBlock = _IceBlock;
class _SnowBlock extends Block_1._Block {
    _textureName() {
        return "snow";
    }
}
exports._SnowBlock = _SnowBlock;
class _CactusBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 16;
    }
}
exports._CactusBlock = _CactusBlock;
class _ClayBlock extends Block_1._Block {
}
exports._ClayBlock = _ClayBlock;
class _SugarCaneBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 16;
    }
}
exports._SugarCaneBlock = _SugarCaneBlock;
class _JukeboxBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._JukeboxBlock = _JukeboxBlock;
class _FenceBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = Math.pow(2, 4) * 2;
    }
}
exports._FenceBlock = _FenceBlock;
class _PumpkinBlock extends Block_1._Block {
}
exports._PumpkinBlock = _PumpkinBlock;
class _NetherrackBlock extends Block_1._Block {
}
exports._NetherrackBlock = _NetherrackBlock;
class _SoulSandBlock extends Block_1._Block {
}
exports._SoulSandBlock = _SoulSandBlock;
class _GlowstoneBlock extends Block_1._Block {
}
exports._GlowstoneBlock = _GlowstoneBlock;
class _PortalBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._PortalBlock = _PortalBlock;
class _CarvedPumpkinBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._CarvedPumpkinBlock = _CarvedPumpkinBlock;
class _CakeBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 7;
    }
}
exports._CakeBlock = _CakeBlock;
class _RedstoneDiodeBlock extends Block_1._Block {
}
exports._RedstoneDiodeBlock = _RedstoneDiodeBlock;
class _RepeaterBlock extends _RedstoneDiodeBlock {
    constructor(prop) {
        super(prop);
        this._states = 4 * 4 * 2 * 2;
    }
}
exports._RepeaterBlock = _RepeaterBlock;
class _TrapDoorBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2 * 2 * 2 * 2;
    }
}
exports._TrapDoorBlock = _TrapDoorBlock;
class _SilverfishBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._SilverfishBlock = _SilverfishBlock;
class _HugeMushroomBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
        this._states = Math.pow(2, 6);
    }
}
exports._HugeMushroomBlock = _HugeMushroomBlock;
class _PaneBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = Math.pow(2, 4) * 2;
    }
}
exports._PaneBlock = _PaneBlock;
class _GlassPaneBlock extends _PaneBlock {
}
exports._GlassPaneBlock = _GlassPaneBlock;
class _MelonBlock extends Block_1._Block {
}
exports._MelonBlock = _MelonBlock;
class _StemBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
        this._states = 8;
    }
}
exports._StemBlock = _StemBlock;
class _AttachedStemBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
        this._states = 4;
    }
}
exports._AttachedStemBlock = _AttachedStemBlock;
class _VineBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = Math.pow(2, 5);
    }
}
exports._VineBlock = _VineBlock;
class _FenceGateBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2 * 2 * 2;
    }
}
exports._FenceGateBlock = _FenceGateBlock;
class _MyceliumBlock extends _SnowyDirtBlock {
}
exports._MyceliumBlock = _MyceliumBlock;
class _LilyPadBlock extends Block_1._Block {
}
exports._LilyPadBlock = _LilyPadBlock;
class _NetherWartBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._NetherWartBlock = _NetherWartBlock;
class _EnchantmentTableBlock extends Block_1._Block {
}
exports._EnchantmentTableBlock = _EnchantmentTableBlock;
class _BrewingStandBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = Math.pow(2, 3);
    }
}
exports._BrewingStandBlock = _BrewingStandBlock;
class _CauldronBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._CauldronBlock = _CauldronBlock;
class _EndPortalBlock extends Block_1._Block {
}
exports._EndPortalBlock = _EndPortalBlock;
class _EndPortalFrameBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._EndPortalFrameBlock = _EndPortalFrameBlock;
class _DragonEggBlock extends Block_1._Block {
}
exports._DragonEggBlock = _DragonEggBlock;
class _RedstoneLampBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._RedstoneLampBlock = _RedstoneLampBlock;
class _CocoaBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 3;
    }
}
exports._CocoaBlock = _CocoaBlock;
class _EnderChestBlock extends _ChestBlock {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._EnderChestBlock = _EnderChestBlock;
class _TripWireBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
        this._states = 2 * 2 * 2 * Math.pow(2, 4);
    }
}
exports._TripWireBlock = _TripWireBlock;
class _TripWireHookBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2 * 2;
    }
}
exports._TripWireHookBlock = _TripWireHookBlock;
class _CommandBlockBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6 * 2;
    }
}
exports._CommandBlockBlock = _CommandBlockBlock;
class _BeaconBlock extends Block_1._Block {
}
exports._BeaconBlock = _BeaconBlock;
class _WallBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = Math.pow(2, 5) * 2;
    }
}
exports._WallBlock = _WallBlock;
class _FlowerPotBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._FlowerPotBlock = _FlowerPotBlock;
class _CarrotBlock extends _CropsBlock {
}
exports._CarrotBlock = _CarrotBlock;
class _PotatoBlock extends _CropsBlock {
}
exports._PotatoBlock = _PotatoBlock;
class _WoodButtonBlock extends _AbstractButtonBlock {
}
exports._WoodButtonBlock = _WoodButtonBlock;
class _SkullBlock extends Block_1._Block {
    constructor(stype, prop) {
        super(prop);
        this._stype = stype;
        this._states = 16;
    }
}
exports._SkullBlock = _SkullBlock;
_SkullBlock._Types = {
    _SKELETON: 0,
    _WITHER: 1,
    _ZOMBIE: 2,
    _PLAYER: 3,
    _CREEPER: 4,
    _DRAGON: 5,
};
class _WallSkullBlock extends _SkullBlock {
    constructor(stype, prop) {
        super(stype, prop);
        this._states = 4;
    }
}
exports._WallSkullBlock = _WallSkullBlock;
class _WitherSkullBlock extends _SkullBlock {
    constructor(prop) {
        super(_SkullBlock._Types._WITHER, prop);
    }
}
exports._WitherSkullBlock = _WitherSkullBlock;
class _WitherWallSkullBlock extends _WallSkullBlock {
    constructor(prop) {
        super(_SkullBlock._Types._WITHER, prop);
    }
}
exports._WitherWallSkullBlock = _WitherWallSkullBlock;
class _PlayerSkullBlock extends _SkullBlock {
    constructor(prop) {
        super(_SkullBlock._Types._PLAYER, prop);
    }
}
exports._PlayerSkullBlock = _PlayerSkullBlock;
class _PlayerWallSkullBlock extends _WallSkullBlock {
    constructor(prop) {
        super(_SkullBlock._Types._PLAYER, prop);
    }
}
exports._PlayerWallSkullBlock = _PlayerWallSkullBlock;
class _BlockAnvil extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._BlockAnvil = _BlockAnvil;
class _TrappedChestBlock extends _ChestBlock {
}
exports._TrappedChestBlock = _TrappedChestBlock;
class _WeightedPressurePlateBlock extends _PressurePlateBlock {
    constructor(sensitivity, prop) {
        super(sensitivity, prop);
        this._states = 16;
    }
}
exports._WeightedPressurePlateBlock = _WeightedPressurePlateBlock;
class _BlockRedstoneComparator extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2 * 2;
    }
}
exports._BlockRedstoneComparator = _BlockRedstoneComparator;
class _BlockDaylightDetector extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 16 * 2;
    }
}
exports._BlockDaylightDetector = _BlockDaylightDetector;
class _BlockRedstone extends Block_1._Block {
}
exports._BlockRedstone = _BlockRedstone;
class _BlockHopper extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 5 * 2;
    }
}
exports._BlockHopper = _BlockHopper;
class _BlockDropper extends _DispenserBlock {
}
exports._BlockDropper = _BlockDropper;
class _StainedGlassPaneBlock extends _PaneBlock {
    constructor(dyeColor, prop) {
        super(prop);
        this._dyeColor = dyeColor;
    }
}
exports._StainedGlassPaneBlock = _StainedGlassPaneBlock;
class _StainedGlassBlock extends Block_1._Block {
    constructor(dyeColor, prop) {
        super(prop);
        this._dyeColor = dyeColor;
    }
}
exports._StainedGlassBlock = _StainedGlassBlock;
class _SlimeBlock extends Block_1._Block {
}
exports._SlimeBlock = _SlimeBlock;
class _BarrierBlock extends Block_1._Block {
}
exports._BarrierBlock = _BarrierBlock;
class _SeaLanternBlock extends Block_1._Block {
}
exports._SeaLanternBlock = _SeaLanternBlock;
class _HayBlock extends _RotatedPillarBlock {
}
exports._HayBlock = _HayBlock;
class _BlockCarpet extends Block_1._Block {
    constructor(dyeColor, prop) {
        super(prop);
        this._dyeColor = dyeColor;
    }
}
exports._BlockCarpet = _BlockCarpet;
class _BlockPackedIce extends Block_1._Block {
}
exports._BlockPackedIce = _BlockPackedIce;
class _BushBlock extends Block_1._Block {
}
exports._BushBlock = _BushBlock;
class _DoublePlantBlock extends _BushBlock {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._DoublePlantBlock = _DoublePlantBlock;
class _BlockTallFlower extends _DoublePlantBlock {
}
exports._BlockTallFlower = _BlockTallFlower;
class _BlockShearableDoublePlant extends _DoublePlantBlock {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._BlockShearableDoublePlant = _BlockShearableDoublePlant;
class _SlabBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 3 * 2;
    }
}
exports._SlabBlock = _SlabBlock;
class _BedBlock extends Block_1._Block {
    constructor(dyeColor, prop) {
        super(prop);
        this._dyeColor = dyeColor;
        this._states = 4 * 2 * 2;
    }
}
exports._BedBlock = _BedBlock;
class _SeaGrassBlock extends _BushBlock {
}
exports._SeaGrassBlock = _SeaGrassBlock;
class _TallSeaGrassBlock extends _DoublePlantBlock {
}
exports._TallSeaGrassBlock = _TallSeaGrassBlock;
class _DeadBushBlock extends _BushBlock {
}
exports._DeadBushBlock = _DeadBushBlock;
class _GrassBushBlock extends _BushBlock {
}
exports._GrassBushBlock = _GrassBushBlock;
class _FernBushBlock extends _BushBlock {
}
exports._FernBushBlock = _FernBushBlock;
class _BannerBlock extends Block_1._Block {
    constructor(dyeColor, prop) {
        super(prop);
        this._dyeColor = dyeColor;
        this._states = 16;
    }
}
exports._BannerBlock = _BannerBlock;
class _WallBannerBlock extends _BannerBlock {
    constructor(dyeColor, prop) {
        super(dyeColor, prop);
        this._states = 4;
    }
}
exports._WallBannerBlock = _WallBannerBlock;
class _EndRodBlock extends _DirectionalBlock {
    constructor(prop) {
        super(prop);
    }
}
exports._EndRodBlock = _EndRodBlock;
class _ChorusPlantBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = Math.pow(2, 6);
    }
}
exports._ChorusPlantBlock = _ChorusPlantBlock;
class _ChorusFlowerBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
        this._states = 6;
    }
}
exports._ChorusFlowerBlock = _ChorusFlowerBlock;
class _BeetrootBlock extends _CropsBlock {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._BeetrootBlock = _BeetrootBlock;
class _GrassPathBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._GrassPathBlock = _GrassPathBlock;
class _EndGatewayBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._EndGatewayBlock = _EndGatewayBlock;
class _FrostedIceBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._FrostedIceBlock = _FrostedIceBlock;
class _MagmaBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._MagmaBlock = _MagmaBlock;
class _StructureVoidBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._StructureVoidBlock = _StructureVoidBlock;
class _ObserverBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6 * 2;
    }
}
exports._ObserverBlock = _ObserverBlock;
class _ShulkerBoxBlock extends Block_1._Block {
    constructor(dyeColor, prop) {
        super(prop);
        this._dyeColor = dyeColor;
        this._states = 6;
    }
}
exports._ShulkerBoxBlock = _ShulkerBoxBlock;
class _GlazedTerracottaBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._GlazedTerracottaBlock = _GlazedTerracottaBlock;
class _ConcretePowderBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._ConcretePowderBlock = _ConcretePowderBlock;
class _KelpTopBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 26;
    }
}
exports._KelpTopBlock = _KelpTopBlock;
class _KelpBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._states = 1;
        this._parent = parent;
    }
}
exports._KelpBlock = _KelpBlock;
class _TurtleEggBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 3 * 4;
    }
}
exports._TurtleEggBlock = _TurtleEggBlock;
class _CoralBlock extends Block_1._Block {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._CoralBlock = _CoralBlock;
class _AbstractCoralPlantBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._AbstractCoralPlantBlock = _AbstractCoralPlantBlock;
class _DeadCoralPlantBlock extends _AbstractCoralPlantBlock {
    constructor(prop) {
        super(prop);
    }
}
exports._DeadCoralPlantBlock = _DeadCoralPlantBlock;
class _CoralPlantBlock extends _AbstractCoralPlantBlock {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._CoralPlantBlock = _CoralPlantBlock;
class _DeadCoralFanBlock extends _AbstractCoralPlantBlock {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._DeadCoralFanBlock = _DeadCoralFanBlock;
class _CoralFanBlock extends _DeadCoralFanBlock {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._CoralFanBlock = _CoralFanBlock;
class _DeadCoralWallFanBlock extends _DeadCoralFanBlock {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._DeadCoralWallFanBlock = _DeadCoralWallFanBlock;
class _CoralWallFanBlock extends _DeadCoralWallFanBlock {
    constructor(parent, prop) {
        super(prop);
        this._parent = parent;
    }
}
exports._CoralWallFanBlock = _CoralWallFanBlock;
class _SeaPickleBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2;
    }
}
exports._SeaPickleBlock = _SeaPickleBlock;
class _BreakableBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._BreakableBlock = _BreakableBlock;
class _ConduitBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._ConduitBlock = _ConduitBlock;
class _BambooSaplingBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._BambooSaplingBlock = _BambooSaplingBlock;
class _BambooBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2 * 3 * 2;
    }
}
exports._BambooBlock = _BambooBlock;
class _BubbleColumnBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._BubbleColumnBlock = _BubbleColumnBlock;
class _ScaffoldingBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 8 * 2 * 2;
    }
}
exports._ScaffoldingBlock = _ScaffoldingBlock;
class _LoomBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._LoomBlock = _LoomBlock;
class _BarrelBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 6 * 2;
    }
}
exports._BarrelBlock = _BarrelBlock;
class _SmokerBlock extends _AbstractFurnaceBlock {
    constructor(prop) {
        super(prop);
    }
}
exports._SmokerBlock = _SmokerBlock;
class _BlastFurnaceBlock extends _AbstractFurnaceBlock {
    constructor(prop) {
        super(prop);
    }
}
exports._BlastFurnaceBlock = _BlastFurnaceBlock;
class _CartographyTableBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._CartographyTableBlock = _CartographyTableBlock;
class _FletchingTableBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._FletchingTableBlock = _FletchingTableBlock;
class _GrindstoneBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 3 * 4;
    }
}
exports._GrindstoneBlock = _GrindstoneBlock;
class _LecternBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 2 * 2;
    }
}
exports._LecternBlock = _LecternBlock;
class _SmithingTableBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
    }
}
exports._SmithingTableBlock = _SmithingTableBlock;
class _StonecutterBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._StonecutterBlock = _StonecutterBlock;
class _BellBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4 * 4;
    }
}
exports._BellBlock = _BellBlock;
class _LanternBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2;
    }
}
exports._LanternBlock = _LanternBlock;
class _CampfireBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 2 * 2 * 2 * 4;
    }
}
exports._CampfireBlock = _CampfireBlock;
class _SweetBerryBushBlock extends _BushBlock {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._SweetBerryBushBlock = _SweetBerryBushBlock;
class _StructureBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._StructureBlock = _StructureBlock;
class _JigsawBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 4;
    }
}
exports._JigsawBlock = _JigsawBlock;
class _ComposterBlock extends Block_1._Block {
    constructor(prop) {
        super(prop);
        this._states = 9;
    }
}
exports._ComposterBlock = _ComposterBlock;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const SoundEvents_1 = __webpack_require__(71);
class _SoundType {
    constructor(volume, pitch, breakSound, stepSound, placeSound, hitSound, fallSound) {
        this._volume = volume;
        this._pitch = pitch;
        this._breakSound = breakSound;
        this._stepSound = stepSound;
        this._placeSound = placeSound;
        this._hitSound = hitSound;
        this._fallSound = fallSound;
    }
}
exports._SoundType = _SoundType;
_SoundType._WOOD = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_WOOD_BREAK, SoundEvents_1._SoundEvents._BLOCK_WOOD_STEP, SoundEvents_1._SoundEvents._BLOCK_WOOD_PLACE, SoundEvents_1._SoundEvents._BLOCK_WOOD_HIT, SoundEvents_1._SoundEvents._BLOCK_WOOD_FALL);
_SoundType._GROUND = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_GRAVEL_BREAK, SoundEvents_1._SoundEvents._BLOCK_GRAVEL_STEP, SoundEvents_1._SoundEvents._BLOCK_GRAVEL_PLACE, SoundEvents_1._SoundEvents._BLOCK_GRAVEL_HIT, SoundEvents_1._SoundEvents._BLOCK_GRAVEL_FALL);
_SoundType._PLANT = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_GRASS_BREAK, SoundEvents_1._SoundEvents._BLOCK_GRASS_STEP, SoundEvents_1._SoundEvents._BLOCK_GRASS_PLACE, SoundEvents_1._SoundEvents._BLOCK_GRASS_HIT, SoundEvents_1._SoundEvents._BLOCK_GRASS_FALL);
_SoundType._STONE = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_STONE_BREAK, SoundEvents_1._SoundEvents._BLOCK_STONE_STEP, SoundEvents_1._SoundEvents._BLOCK_STONE_PLACE, SoundEvents_1._SoundEvents._BLOCK_STONE_HIT, SoundEvents_1._SoundEvents._BLOCK_STONE_FALL);
_SoundType._METAL = new _SoundType(1.0, 1.5, SoundEvents_1._SoundEvents._BLOCK_METAL_BREAK, SoundEvents_1._SoundEvents._BLOCK_METAL_STEP, SoundEvents_1._SoundEvents._BLOCK_METAL_PLACE, SoundEvents_1._SoundEvents._BLOCK_METAL_HIT, SoundEvents_1._SoundEvents._BLOCK_METAL_FALL);
_SoundType._GLASS = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_GLASS_BREAK, SoundEvents_1._SoundEvents._BLOCK_GLASS_STEP, SoundEvents_1._SoundEvents._BLOCK_GLASS_PLACE, SoundEvents_1._SoundEvents._BLOCK_GLASS_HIT, SoundEvents_1._SoundEvents._BLOCK_GLASS_FALL);
_SoundType._CLOTH = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_WOOL_BREAK, SoundEvents_1._SoundEvents._BLOCK_WOOL_STEP, SoundEvents_1._SoundEvents._BLOCK_WOOL_PLACE, SoundEvents_1._SoundEvents._BLOCK_WOOL_HIT, SoundEvents_1._SoundEvents._BLOCK_WOOL_FALL);
_SoundType._SAND = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_SAND_BREAK, SoundEvents_1._SoundEvents._BLOCK_SAND_STEP, SoundEvents_1._SoundEvents._BLOCK_SAND_PLACE, SoundEvents_1._SoundEvents._BLOCK_SAND_HIT, SoundEvents_1._SoundEvents._BLOCK_SAND_FALL);
_SoundType._SNOW = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_SNOW_BREAK, SoundEvents_1._SoundEvents._BLOCK_SNOW_STEP, SoundEvents_1._SoundEvents._BLOCK_SNOW_PLACE, SoundEvents_1._SoundEvents._BLOCK_SNOW_HIT, SoundEvents_1._SoundEvents._BLOCK_SNOW_FALL);
_SoundType._LADDER = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_LADDER_BREAK, SoundEvents_1._SoundEvents._BLOCK_LADDER_STEP, SoundEvents_1._SoundEvents._BLOCK_LADDER_PLACE, SoundEvents_1._SoundEvents._BLOCK_LADDER_HIT, SoundEvents_1._SoundEvents._BLOCK_LADDER_FALL);
_SoundType._ANVIL = new _SoundType(0.3, 1.0, SoundEvents_1._SoundEvents._BLOCK_ANVIL_BREAK, SoundEvents_1._SoundEvents._BLOCK_ANVIL_STEP, SoundEvents_1._SoundEvents._BLOCK_ANVIL_PLACE, SoundEvents_1._SoundEvents._BLOCK_ANVIL_HIT, SoundEvents_1._SoundEvents._BLOCK_ANVIL_FALL);
_SoundType._SLIME = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_SLIME_BLOCK_BREAK, SoundEvents_1._SoundEvents._BLOCK_SLIME_BLOCK_STEP, SoundEvents_1._SoundEvents._BLOCK_SLIME_BLOCK_PLACE, SoundEvents_1._SoundEvents._BLOCK_SLIME_BLOCK_HIT, SoundEvents_1._SoundEvents._BLOCK_SLIME_BLOCK_FALL);
_SoundType._WET_GRASS = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_WET_GRASS_BREAK, SoundEvents_1._SoundEvents._BLOCK_WET_GRASS_STEP, SoundEvents_1._SoundEvents._BLOCK_WET_GRASS_PLACE, SoundEvents_1._SoundEvents._BLOCK_WET_GRASS_HIT, SoundEvents_1._SoundEvents._BLOCK_WET_GRASS_FALL);
_SoundType._CORAL = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_CORAL_BLOCK_BREAK, SoundEvents_1._SoundEvents._BLOCK_CORAL_BLOCK_STEP, SoundEvents_1._SoundEvents._BLOCK_CORAL_BLOCK_PLACE, SoundEvents_1._SoundEvents._BLOCK_CORAL_BLOCK_HIT, SoundEvents_1._SoundEvents._BLOCK_CORAL_BLOCK_FALL);
_SoundType._BAMBOO = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_BREAK, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_STEP, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_PLACE, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_HIT, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_FALL);
_SoundType._BAMBOO_SAPLING = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_SAPLING_BREAK, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_STEP, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_SAPLING_PLACE, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_SAPLING_HIT, SoundEvents_1._SoundEvents._BLOCK_BAMBOO_FALL);
_SoundType._SCAFFOLDING = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_SCAFFOLDING_BREAK, SoundEvents_1._SoundEvents._BLOCK_SCAFFOLDING_STEP, SoundEvents_1._SoundEvents._BLOCK_SCAFFOLDING_PLACE, SoundEvents_1._SoundEvents._BLOCK_SCAFFOLDING_HIT, SoundEvents_1._SoundEvents._BLOCK_SCAFFOLDING_FALL);
_SoundType._SWEET_BERRY_BUSH = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_SWEET_BERRY_BUSH_BREAK, SoundEvents_1._SoundEvents._BLOCK_GRASS_STEP, SoundEvents_1._SoundEvents._BLOCK_SWEET_BERRY_BUSH_PLACE, SoundEvents_1._SoundEvents._BLOCK_GRASS_HIT, SoundEvents_1._SoundEvents._BLOCK_GRASS_FALL);
_SoundType._CROP = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_CROP_BREAK, SoundEvents_1._SoundEvents._BLOCK_GRASS_STEP, SoundEvents_1._SoundEvents._ITEM_CROP_PLANT, SoundEvents_1._SoundEvents._BLOCK_GRASS_HIT, SoundEvents_1._SoundEvents._BLOCK_GRASS_FALL);
_SoundType._STEM = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_WOOD_BREAK, SoundEvents_1._SoundEvents._BLOCK_WOOD_STEP, SoundEvents_1._SoundEvents._ITEM_CROP_PLANT, SoundEvents_1._SoundEvents._BLOCK_WOOD_HIT, SoundEvents_1._SoundEvents._BLOCK_WOOD_FALL);
_SoundType._NETHER_WART = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_NETHER_WART_BREAK, SoundEvents_1._SoundEvents._BLOCK_STONE_STEP, SoundEvents_1._SoundEvents._ITEM_NETHER_WART_PLANT, SoundEvents_1._SoundEvents._BLOCK_STONE_HIT, SoundEvents_1._SoundEvents._BLOCK_STONE_FALL);
_SoundType._LANTERN = new _SoundType(1.0, 1.0, SoundEvents_1._SoundEvents._BLOCK_LANTERN_BREAK, SoundEvents_1._SoundEvents._BLOCK_LANTERN_STEP, SoundEvents_1._SoundEvents._BLOCK_LANTERN_PLACE, SoundEvents_1._SoundEvents._BLOCK_LANTERN_HIT, SoundEvents_1._SoundEvents._BLOCK_LANTERN_FALL);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _EnumConnectionState {
}
exports._EnumConnectionState = _EnumConnectionState;
_EnumConnectionState._Handshake = 0;
_EnumConnectionState._Status = 1;
_EnumConnectionState._Login = 2;
_EnumConnectionState._Play = 3;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _PacketRegistry {
    constructor(version) {
        this._protocol = 0;
        this._CLIENT_KEEPALIVE = 0x00;
        this._CLIENT_JOIN_GAME = 0x01;
        this._CLIENT_CHAT = 0x02;
        this._CLIENT_TIME_UPDATE = 0x03;
        this._CLIENT_ENTITY_EQUIPMENT = 0x04;
        this._CLIENT_SPAWN_POSITION = 0x05;
        this._CLIENT_UPDATE_HEALTH = 0x06;
        this._CLIENT_RESPAWN = 0x07;
        this._CLIENT_PLAYER_POSITION_AND_LOOK = 0x08;
        this._CLIENT_HELD_ITEM_CHANGE = 0x09;
        this._CLIENT_USE_BED = 0x0A;
        this._CLIENT_ANIMATION = 0x0B;
        this._CLIENT_SPAWN_PLAYER = 0x0C;
        this._CLIENT_COLLECT_ITEM = 0x0D;
        this._CLIENT_SPAWN_OBJECT = 0x0E;
        this._CLIENT_SPAWN_MOB = 0x0F;
        this._CLIENT_SPAWN_PAINTING = 0x10;
        this._CLIENT_SPAWN_EXPERIENCE_ORB = 0x11;
        this._CLIENT_ENTITY_VELOCITY = 0x12;
        this._CLIENT_DESTROY_ENTITIES = 0x13;
        this._CLIENT_ENTITY = 0x14;
        this._CLIENT_ENTITY_RELATIVE_MOVE = 0x15;
        this._CLIENT_ENTITY_LOOK = 0x16;
        this._CLIENT_ENTITY_LOOK_AND_RELATIVE_MOVE = 0x17;
        this._CLIENT_ENTITY_TELEPORT = 0x18;
        this._CLIENT_ENTITY_HEAD_LOOK = 0x19;
        this._CLIENT_ENTITY_STATUS = 0x1A;
        this._CLIENT_ATTACH_ENTITY = 0x1B;
        this._CLIENT_ENTITY_METADATA = 0x1C;
        this._CLIENT_ENTITY_EFFECT = 0x1D;
        this._CLIENT_REMOVE_ENTITY_EFFECT = 0x1E;
        this._CLIENT_SET_EXPERIENCE = 0x1F;
        this._CLIENT_ENTITY_PROPERTIES = 0x20;
        this._CLIENT_CHUNK_DATA = 0x21;
        this._CLIENT_MULTI_BLOCK_CHANGE = 0x22;
        this._CLIENT_BLOCK_CHANGE = 0x23;
        this._CLIENT_BLOCK_ACTION = 0x24;
        this._CLIENT_BLOCK_BREAK_ANIMATION = 0x25;
        this._CLIENT_MAP_CHUNK_BULK = 0x26;
        this._CLIENT_EXPLOSION = 0x27;
        this._CLIENT_EFFECT = 0x28;
        this._CLIENT_NAMED_SOUND_EFFECT = 0x29;
        this._CLIENT_PARTICLE = 0x2A;
        this._CLIENT_CHANGE_GAME_STATE = 0x2B;
        this._CLIENT_SPAWN_GLOBAL_ENTITY = 0x2C;
        this._CLIENT_OPEN_WINDOW = 0x2D;
        this._CLIENT_CLOSE_WINDOW = 0x2E;
        this._CLIENT_SET_SLOT = 0x2F;
        this._CLIENT_WINDOW_ITEMS = 0x30;
        this._CLIENT_WINDOW_PROPERTY = 0x31;
        this._CLIENT_CONFIRM_TRANSACTION = 0x32;
        this._CLIENT_UPDATE_SIGN = 0x33;
        this._CLIENT_MAPS = 0x34;
        this._CLIENT_UPDATE_BLOCK_ENTITY = 0x35;
        this._CLIENT_SIGN_EDITOR_OPEN = 0x36;
        this._CLIENT_STATISTICS = 0x37;
        this._CLIENT_PLAYER_LIST = 0x38;
        this._CLIENT_PLAYER_ABILITIES = 0x39;
        this._CLIENT_TAB_COMPLETE = 0x3A;
        this._CLIENT_SCOREBOARD_OBJECTIVE = 0x3B;
        this._CLIENT_UPDATE_SCORE = 0x3C;
        this._CLIENT_DISPLAY_SCOREBOARD = 0x3D;
        this._CLIENT_TEAMS = 0x3E;
        this._CLIENT_PLUGIN_MESSAGE = 0x3F;
        this._CLIENT_DISCONNECT = 0x40;
        this._CLIENT_DIFFICULTY = 0x41;
        this._CLIENT_COMBAT_EVENT = 0x42;
        this._CLIENT_CAMERA = 0x43;
        this._CLIENT_WORLD_BORDER = 0x44;
        this._CLIENT_TITLE = 0x45;
        this._CLIENT_SET_COMPRESSION = 0x46;
        this._CLIENT_PLAYER_LIST_HEAD_FOOT = 0x47;
        this._CLIENT_RESOURCE_PACK = 0x48;
        this._CLIENT_UPDATE_ENTITY_NBT = 0x49;
        this._SERVER_KEEPALIVE = 0x00;
        this._SERVER_CHAT = 0x01;
        this._SERVER_USE_ENTITY = 0x02;
        this._SERVER_PLAYER = 0x03;
        this._SERVER_PLAYER_POSITION = 0x04;
        this._SERVER_PLAYER_LOOK = 0x05;
        this._SERVER_PLAYER_LOOK_AND_POSITION = 0x06;
        this._SERVER_PLAYER_DIGGING = 0x07;
        this._SERVER_PLAYER_BLOCK_PLACEMENT = 0x08;
        this._SERVER_HELD_ITEM_CHANGE = 0x09;
        this._SERVER_ANIMATION = 0x0A;
        this._SERVER_ENTITY_ACTION = 0x0B;
        this._SERVER_STEER_VEHICLE = 0x0C;
        this._SERVER_CLOSE_WINDOW = 0x0D;
        this._SERVER_CLICK_WINDOW = 0x0E;
        this._SERVER_CONFIRM_TRANSACTION = 0x0F;
        this._SERVER_CREATIVE_INVENTORY_ACTION = 0x10;
        this._SERVER_ENCHANT_ITEM = 0x11;
        this._SERVER_UPDATE_SIGN = 0x12;
        this._SERVER_PLAYER_ABILITIES = 0x13;
        this._SERVER_TAB_COMPLETE = 0x14;
        this._SERVER_CLIENT_SETTINGS = 0x15;
        this._SERVER_CLIENT_STATUS = 0x16;
        this._SERVER_PLUGIN_MESSAGE = 0x17;
        this._SERVER_SPECTATE = 0x18;
        this._SERVER_RESOURCE_PACK_STATUS = 0x19;
        this._CLIENT_LOGIN_DISCONNECT = 0x00;
        this._CLIENT_LOGIN_ENCRYPT_REQUEST = 0x01;
        this._CLIENT_LOGIN_SUCCESS = 0x02;
        this._CLIENT_LOGIN_SET_COMPRESSION = 0x03;
        this._SERVER_LOGIN_START = 0x00;
        this._SERVER_LOGIN_ENCRYPT_RESPONSE = 0x01;
        this._CLIENT_BOSS_BAR = -1;
        this._CLIENT_DECLARE_COMMANDS = -1;
        this._CLIENT_SET_COOLDOWN = -1;
        this._CLIENT_UNLOAD_CHUNK = -1;
        this._CLIENT_OPEN_HORSE_WINDOW = -1;
        this._CLIENT_UPDATE_LIGHT = -1;
        this._CLIENT_TRADE_LIST = -1;
        this._CLIENT_VEHICLE_MOVE = -1;
        this._CLIENT_OPEN_BOOK = -1;
        this._CLIENT_CRAFT_RECIPE_RESPONSE = -1;
        this._CLIENT_FACE_PLAYER = -1;
        this._CLIENT_UNLOCK_RECIPES = -1;
        this._CLIENT_ADVANCEMENT_PROGRESS = -1;
        this._CLIENT_UPDATE_VIEW_POSITION = -1;
        this._CLIENT_UPDATE_VIEW_DISTANCE = -1;
        this._CLIENT_SET_PASSENGERS = -1;
        this._CLIENT_ENTITY_SOUND_EFFECT = -1;
        this._CLIENT_SOUND_EFFECT = -1;
        this._CLIENT_STOP_SOUND = -1;
        this._CLIENT_NBT_QUERY_RESPONSE = -1;
        this._CLIENT_ADVANCEMENTS = -1;
        this._CLIENT_DECLARE_RECIPES = -1;
        this._CLIENT_TAGS = -1;
        this._SERVER_TELEPORT_CONFIRM = -1;
        this._SERVER_QUERY_BLOCK_NBT = -1;
        this._SERVER_SET_DIFFICULTY = -1;
        this._SERVER_EDIT_BOOK = -1;
        this._SERVER_QUERY_ENTITY_NBT = -1;
        this._SERVER_LOCK_DIFFICULTY = -1;
        this._SERVER_VEHICLE_MOVE = -1;
        this._SERVER_STEER_BOAT = -1;
        this._SERVER_PICK_ITEM = -1;
        this._SERVER_CRAFT_RECIPE_REQUEST = -1;
        this._SERVER_CRAFTING_BOOK_DATA = -1;
        this._SERVER_NAME_ITEM = -1;
        this._SERVER_ADVANCEMENT_TAB = -1;
        this._SERVER_SELECT_TRADE = -1;
        this._SERVER_SET_BEACON_EFFECT = -1;
        this._SERVER_UPDATE_COMMAND_BLOCK = -1;
        this._SERVER_UPDATE_COMMAND_BLOCK_MINECART = -1;
        this._SERVER_UPDATE_JIGSAW_BLOCK = -1;
        this._SERVER_UPDATE_STRUCTURE_BLOCK = -1;
        this._SERVER_USE_ITEM = -1;
        this._SERVER_PREPARE_CRAFTING_GRID = -1;
        this._protocol = version;
    }
}
exports._PacketRegistry = _PacketRegistry;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _ChunkSection {
    constructor(x, y, z, chunkStorage) {
        this._chunkStorage = chunkStorage;
        this._posX = x;
        this._posY = y;
        this._posZ = z;
        this._data = chunkStorage._data;
    }
    _getBlockType(x, y, z) {
        const data = this._data;
        return data[y << 8 | z << 4 | x];
    }
    _setBlockType(x, y, z, blockID) {
        const data = this._data;
        data[y << 8 | z << 4 | x] = blockID;
    }
}
exports._ChunkSection = _ChunkSection;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const NibbleArray_1 = __webpack_require__(89);
class _Uint32BlockStorage {
    constructor(y, storeSkylight, data, blocklightArray, skylightArray) {
        this._blockRefCount = 0;
        this._tickRefCount = 0;
        this._yBase = y;
        if (data) {
            this._data = data;
            if (data.length !== 4096) {
                throw new Error(`data len should be 4096 instead of ${data.byteLength}`);
            }
        }
        else {
            this._data = new Uint32Array(4096);
        }
        this._blocklightArray = blocklightArray || new NibbleArray_1._NibbleArray();
        if (storeSkylight) {
            this._skylightArray = skylightArray || new NibbleArray_1._NibbleArray();
        }
        else {
            this._skylightArray = null;
        }
    }
    isEmpty() {
        return this._blockRefCount === 0;
    }
    _getNeedsRandomTick() {
        return this._tickRefCount > 0;
    }
    _getYLocation() {
        return this._yBase;
    }
    _setExtSkylightValue(x, y, z, value) {
        if (this._skylightArray) {
            this._skylightArray._set(x, y, z, value);
        }
        else {
            throw new Error("There is no skylight");
        }
    }
    _getExtSkylightValue(x, y, z) {
        if (this._skylightArray) {
            return this._skylightArray._get(x, y, z);
        }
        else {
            throw new Error("There is no skylight");
        }
    }
    _setExtBlocklightValue(x, y, z, value) {
        this._blocklightArray._set(x, y, z, value);
    }
    _getExtBlocklightValue(x, y, z) {
        return this._blocklightArray._get(x, y, z);
    }
    _removeInvalidBlocks() {
        this._blockRefCount = 0;
        this._tickRefCount = 0;
        for (let i = 0; i < 16 * 16 * 16; i++) {
        }
    }
}
exports._Uint32BlockStorage = _Uint32BlockStorage;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ChatColor_1 = __webpack_require__(37);
class _ChatUtils {
    static _toPlainTextFromChat(chat) {
        let v = "";
        const fut = [chat];
        while (fut.length > 0) {
            const j = fut.pop();
            if (typeof j === "string") {
                v += j;
            }
            else if (j instanceof Array) {
                j.forEach((element) => {
                    fut.unshift(element);
                });
            }
            else if (j instanceof Object) {
                if (j.text) {
                    v += j.text;
                }
                if (j.extra) {
                    fut.unshift(j.extra);
                }
            }
        }
        return v;
    }
    static _toLegacyTextFromChat(chat) {
        let v = "";
        const fut = [chat];
        while (fut.length > 0) {
            const j = fut.pop();
            if (typeof j === "string") {
                v += j;
            }
            else if (j instanceof Array) {
                j.forEach((element) => {
                    fut.unshift(element);
                });
            }
            else if (j instanceof Object) {
                if (j.color) {
                    v += "\xa7" + ChatColor_1._ChatColor._colorCodeByName(j.color);
                }
                if (j.text) {
                    v += j.text;
                }
                if (j.extra) {
                    fut.unshift(j.extra);
                }
                if (j.translate) {
                    fut.unshift("trans:" + j.translate);
                }
                if (j.with) {
                    fut.unshift(j.with);
                }
                v += "\xa7r";
            }
        }
        return v;
    }
}
exports._ChatUtils = _ChatUtils;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _ChatColor {
    static _stripColor(input) {
        return input.replace(_ChatColor._STRIP_COLOR_PATTERN, "");
    }
    static _colorCodeByName(name) {
        if (_ChatColor._colorCodes.hasOwnProperty(name)) {
            return _ChatColor._colorCodes[name];
        }
        return 'r';
    }
}
exports._ChatColor = _ChatColor;
_ChatColor._COLOR_CHAR = '\u00A7';
_ChatColor._STRIP_COLOR_PATTERN = /\u00A7[0-9A-FK-OR]/gi;
_ChatColor._colorCodes = {
    black: '0',
    dark_blue: '1',
    dark_green: '2',
    dark_aqua: '3',
    dark_red: '4',
    dark_purple: '5',
    gold: '6',
    gray: '7',
    dark_gray: '8',
    blue: '9',
    green: 'a',
    aqua: 'b',
    red: 'c',
    light_purple: 'd',
    yellow: 'e',
    white: 'f',
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _AxisAlignedBB {
    constructor(arr) {
        if (arr) {
            this._arr = arr;
        }
        else {
            this._arr = new Float64Array(6);
        }
    }
    static _createEntityAABB(X, Y, Z, W, H) {
        W = W / 2 - 0.000001;
        return new _AxisAlignedBB(new Float64Array([X - W, Y, Z - W, X + W, Y + H, Z + W]));
    }
    static _fromBounds(x1, y1, z1, x2, y2, z2) {
        const aabb = new _AxisAlignedBB();
        const arr = aabb._arr;
        arr[0] = Math.min(x1, x2);
        arr[1] = Math.min(y1, y2);
        arr[2] = Math.min(z1, z2);
        arr[3] = Math.max(x1, x2);
        arr[4] = Math.max(y1, y2);
        arr[5] = Math.max(z1, z2);
        return aabb;
    }
    _minX() {
        return this._arr[0];
    }
    _minY() {
        return this._arr[1];
    }
    _minZ() {
        return this._arr[2];
    }
    _maxX() {
        return this._arr[3];
    }
    _maxY() {
        return this._arr[4];
    }
    _maxZ() {
        return this._arr[5];
    }
    _copy() {
        return new _AxisAlignedBB(this._arr.slice(0));
    }
    _offset(x, y, z) {
        const arr = this._arr;
        arr[0] += x;
        arr[1] += y;
        arr[2] += z;
        arr[3] += x;
        arr[4] += y;
        arr[5] += z;
        return this;
    }
    _union(other) {
        const v = this._copy();
        const arr = v._arr;
        arr[0] = Math.min(this._arr[0], other._arr[0]);
        arr[1] = Math.min(this._arr[1], other._arr[1]);
        arr[2] = Math.min(this._arr[2], other._arr[2]);
        arr[3] = Math.max(this._arr[3], other._arr[3]);
        arr[4] = Math.max(this._arr[4], other._arr[4]);
        arr[5] = Math.max(this._arr[5], other._arr[5]);
        return v;
    }
    _createWithOffset(x, y, z) {
        return this._copy()._offset(x, y, z);
    }
    _fix() {
        const arr = this._arr;
        const minx = arr[0] < arr[3] ? arr[0] : arr[3];
        const miny = arr[1] < arr[4] ? arr[1] : arr[4];
        const minz = arr[2] < arr[5] ? arr[2] : arr[5];
        const maxx = arr[0] < arr[3] ? arr[3] : arr[0];
        const maxy = arr[1] < arr[4] ? arr[4] : arr[1];
        const maxz = arr[2] < arr[5] ? arr[5] : arr[2];
        arr[0] = minx;
        arr[1] = miny;
        arr[2] = minz;
        arr[3] = maxx;
        arr[4] = maxy;
        arr[5] = maxz;
        return this;
    }
    _addCoord(x, y, z) {
        let minx = this._arr[0];
        let miny = this._arr[1];
        let minz = this._arr[2];
        let maxx = this._arr[3];
        let maxy = this._arr[4];
        let maxz = this._arr[5];
        if (x < 0) {
            minx += x;
        }
        else {
            maxx += x;
        }
        if (y < 0) {
            miny += y;
        }
        else {
            maxy += y;
        }
        if (z < 0) {
            minz += z;
        }
        else {
            maxz += z;
        }
        return new _AxisAlignedBB(new Float64Array([minx, miny, minz, maxx, maxy, maxz]));
    }
    _expand(x, y, z) {
        const arr = this._arr;
        arr[0] -= x;
        arr[1] -= y;
        arr[2] -= z;
        arr[3] += x;
        arr[4] += y;
        arr[5] += z;
        return this;
    }
    _createWithExpand(x, y, z) {
        return this._copy()._expand(x, y, z);
    }
    _calculateXOffset(aabb, offset) {
        if (aabb._maxY() > this._minY() && aabb._minY() < this._maxY()) {
            if (aabb._maxZ() > this._minZ() && aabb._minZ() < this._maxZ()) {
                let temp = 0;
                if (offset > 0 && aabb._maxX() <= this._minX()) {
                    temp = this._minX() - aabb._maxX() - 0.0000001;
                    if (temp < offset) {
                        offset = temp;
                    }
                }
                if (offset < 0 && aabb._minX() >= this._maxX()) {
                    temp = this._maxX() - aabb._minX() + 0.0000001;
                    if (temp > offset) {
                        offset = temp;
                    }
                }
            }
        }
        return offset;
    }
    _calculateYOffset(aabb, offset) {
        if (aabb._maxX() > this._minX() && aabb._minX() < this._maxX()) {
            if (aabb._maxZ() > this._minZ() && aabb._minZ() < this._maxZ()) {
                let temp = 0;
                if (offset > 0 && aabb._maxY() <= this._minY()) {
                    temp = this._minY() - aabb._maxY() - 0.0000001;
                    if (temp < offset) {
                        offset = temp;
                    }
                }
                if (offset < 0 && aabb._minY() >= this._maxY()) {
                    temp = this._maxY() - aabb._minY() + 0.0000001;
                    if (temp > offset) {
                        offset = temp;
                    }
                }
            }
        }
        return offset;
    }
    _calculateZOffset(aabb, offset) {
        if (aabb._maxX() > this._minX() && aabb._minX() < this._maxX()) {
            if (aabb._maxY() > this._minY() && aabb._minY() < this._maxY()) {
                let temp = 0;
                if (offset > 0 && aabb._maxZ() <= this._minZ()) {
                    temp = this._minZ() - aabb._maxZ() - 0.0000001;
                    if (temp < offset) {
                        offset = temp;
                    }
                }
                if (offset < 0 && aabb._minZ() >= this._maxZ()) {
                    temp = this._maxZ() - aabb._minZ() + 0.0000001;
                    if (temp > offset) {
                        offset = temp;
                    }
                }
            }
        }
        return offset;
    }
    _intersectsWith(other) {
        return other._maxX() > this._minX() && other._minX() < this._maxX() ? (other._maxY() > this._minY() && other._minY() < this._maxY() ? other._maxZ() > this._minZ() && other._minZ() < this._maxZ() : false) : false;
    }
    _getAverageEdgeLength() {
        const x = this._maxX() - this._minX();
        const y = this._maxY() - this._minY();
        const z = this._maxZ() - this._minZ();
        return (x + y + z) / 3;
    }
    _contract(x, y, z) {
        const x1 = this._minX() + x;
        const y1 = this._minY() + y;
        const z1 = this._minZ() + z;
        const x2 = this._maxX() - x;
        const y2 = this._maxY() - y;
        const z2 = this._maxZ() - z;
        return _AxisAlignedBB._fromBounds(x1, y1, z1, x2, y2, z2)._fix();
    }
    _intersectsLine(origin, dir) {
        const right = 0;
        const left = 1;
        const middle = 2;
        const quadrant = new Uint8Array(3);
        const candidatePlane = new Float64Array(3);
        const maxT = new Float64Array([-1, -1, -1]);
        let inside = true;
        for (let i = 0; i < 3; i++) {
            if (origin[i] < this._arr[i]) {
                quadrant[i] = left;
                candidatePlane[i] = this._arr[i];
                inside = false;
            }
            else if (origin[i] > this._arr[3 + i]) {
                quadrant[i] = right;
                candidatePlane[i] = this._arr[3 + i];
                inside = false;
            }
            else {
                quadrant[i] = middle;
            }
        }
        if (inside) {
            return origin;
        }
        for (let i = 0; i < 3; i++) {
            if (quadrant[i] != middle && dir[i] != 0) {
                maxT[i] = (candidatePlane[i] - origin[i]) / dir[i];
            }
        }
        let whichPlane = 0;
        for (let i = 1; i < 3; i++) {
            if (maxT[whichPlane] < maxT[i]) {
                whichPlane = i;
            }
        }
        if (maxT[whichPlane] < 0) {
            return origin;
        }
        const coord = new Float64Array(3);
        for (let i = 0; i < 3; i++) {
            if (whichPlane != i) {
                coord[i] = origin[i] + maxT[whichPlane] * dir[i];
                if (coord[i] < this._arr[i] || coord[i] > this._arr[3 + i]) {
                    return origin;
                }
            }
            else {
                coord[i] = candidatePlane[i];
            }
        }
        return coord;
    }
}
exports._AxisAlignedBB = _AxisAlignedBB;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Slot {
    constructor() {
        this._item = null;
    }
    static _makeSlotArray(n) {
        const arr = new Array(n);
        for (let i = 0; i < n; i++) {
            arr[i] = new _Slot();
        }
        return arr;
    }
    _setItem(is) {
        this._item = is;
    }
}
exports._Slot = _Slot;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Klocki_1 = __webpack_require__(2);
const KlockiEntityLiving_1 = __webpack_require__(41);
const RenderBox_1 = __webpack_require__(22);
class _KlockiEntityPlayer extends KlockiEntityLiving_1._KlockiEntityLiving {
    constructor(klocki) {
        super(klocki);
        this._gameMode = 0;
        this._width = 0.6;
        this._height = 1.8;
        this._skinLoaded = false;
        this._idleTime = 0;
        const skinInfo = klocki._textureManager._loadTextureFromURL("assets/" + Klocki_1._Klocki._forbiddenWord + "/textures/entity/steve.png", null, (tex) => {
            const limbOffsets = [
                [0, 16, 0, 32],
                [16, 48, 0, 48],
                [32, 48, 48, 48],
                [40, 16, 40, 32],
            ];
            const limbBoxes = this._limbBoxes = new Array(8);
            for (let i = 0; i < 4; i++) {
                const off = limbOffsets[i];
                const litex = tex._stdBox64(off[0] + 4, off[1] + 4, 4, 12, 4);
                const lotex = tex._stdBox64(off[2] + 4, off[3] + 4, 4, 12, 4);
                limbBoxes[i * 2] = new RenderBox_1._RenderBox(klocki, -2 / 16, -12 / 16, -2 / 16, 4 / 16, 12 / 16, 4 / 16, litex);
                limbBoxes[i * 2 + 1] = new RenderBox_1._RenderBox(klocki, -2.2 / 16, -12.2 / 16, -2.2 / 16, 4.4 / 16, 12.4 / 16, 4.4 / 16, lotex);
            }
            this._headBox = new RenderBox_1._RenderBox(klocki, -4 / 16, 0, -4 / 16, 8 / 16, 8 / 16, 8 / 16, tex._stdBox64(8, 8, 8, 8, 8));
            this._headOBox = new RenderBox_1._RenderBox(klocki, -4.2 / 16, -0.2 / 16, -4.2 / 16, 8.4 / 16, 8.4 / 16, 8.4 / 16, tex._stdBox64(8 + 32, 8, 8, 8, 8));
            this._chestBox = new RenderBox_1._RenderBox(klocki, -4 / 16, -6 / 16, -2 / 16, 8 / 16, 12 / 16, 4 / 16, tex._stdBox64(20, 20, 8, 12, 4));
            this._chestOBox = new RenderBox_1._RenderBox(klocki, -4.2 / 16, -6.2 / 16, -2.2 / 16, 8.4 / 16, 12.4 / 16, 4.4 / 16, tex._stdBox64(20, 20 + 16, 8, 12, 4));
            this._legRightBox = limbBoxes[0];
            this._legRightOBox = limbBoxes[1];
            this._legLeftBox = limbBoxes[2];
            this._legLeftOBox = limbBoxes[3];
            this._armRightBox = limbBoxes[4];
            this._armRightOBox = limbBoxes[5];
            this._armLeftBox = limbBoxes[6];
            this._armLeftOBox = limbBoxes[7];
            this._skinLoaded = true;
        }, false);
        this._skinInfo = skinInfo;
    }
    _tick() {
        super._tick();
        const dx = this._posX - this._prevPosX;
        const dz = this._posZ - this._prevPosZ;
        this._prevLimbSwingAmount = this._limbSwingAmount;
        let dist = Math.sqrt(dx * dx + dz * dz) * 4;
        if (dist > 1) {
            dist = 1;
        }
        this._limbSwingAmount += (dist - this._limbSwingAmount) * 0.4;
        this._limbSwing += this._limbSwingAmount;
    }
    _render() {
        if (!this._skinLoaded) {
            console.log("skin not loaded");
            return;
        }
        this._klocki._entityRenders._renderPlayer._render(this);
    }
}
exports._KlockiEntityPlayer = _KlockiEntityPlayer;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const KlockiEntityBase_1 = __webpack_require__(42);
const Blocks_1 = __webpack_require__(30);
function wrapAngle(x) {
    x = x % (Math.PI * 2);
    if (x >= Math.PI) {
        x -= Math.PI * 2;
    }
    if (x < -Math.PI) {
        x += Math.PI * 2;
    }
    return x;
}
class _KlockiEntityLiving extends KlockiEntityBase_1._KlockiEntityBase {
    constructor(klocki) {
        super(klocki);
        this._jumping = false;
        this._onGround = false;
        this._isColidedHorizontally = false;
        this._movementForward = 0;
        this._movementStrafe = 0;
        this._isFlying = false;
        this._newPosX = 0;
        this._newPosY = 0;
        this._newPosZ = 0;
        this._newRotationYaw = 0;
        this._newRotationPitch = 0;
        this._newPosIterations = 0;
        this._limbSwingAmount = 0;
        this._prevLimbSwingAmount = 0;
        this._limbSwing = 0;
        this._doGravity = false;
        this._distanceWalkedXZ = 0;
        this._distanceWalkedOnStepXYZ = 0;
        this._nextStepDistance = 0;
    }
    _tick() {
        super._tick();
        this._tickLiving();
    }
    _tickLiving() {
        if (this._newPosIterations > 0) {
            const nextX = this._posX + (this._newPosX - this._posX) / this._newPosIterations;
            const nextY = this._posY + (this._newPosY - this._posY) / this._newPosIterations;
            const nextZ = this._posZ + (this._newPosZ - this._posZ) / this._newPosIterations;
            const deltaYaw = wrapAngle(this._newRotationYaw - this._yaw);
            const nextYaw = this._yaw + deltaYaw / this._newPosIterations;
            const nextPitch = this._pitch + (this._newRotationPitch - this._pitch) / this._newPosIterations;
            this._setPos(nextX, nextY, nextZ);
            this._setYaw(nextYaw);
            this._setPitch(nextPitch);
        }
        if (this._doGravity) {
            this._moveEntityWithHeading();
        }
    }
    _isSneaking() {
        return this._metadata[1];
    }
    _setSneaking(v) {
        return this._metadata[1] = v;
    }
    _setNewLocation(x, y, z, yaw, pitch, iterations, isTeleport) {
        this._newPosX = x;
        this._newPosY = y;
        this._newPosZ = z;
        this._newRotationYaw = yaw;
        this._newRotationPitch = pitch;
        if (iterations >= 0) {
            this._newPosIterations = iterations;
        }
    }
    _getFlyFactor(x, y, z, onground, sprinting) {
        const blocktypefloor = this._world._getBlockType(x, y, z);
        let slipperiness = 0.91;
        if (onground) {
            if (blocktypefloor == 79 || blocktypefloor == 174) {
                slipperiness = 0.98;
            }
            else {
                slipperiness = 0.6;
            }
            slipperiness *= 0.91;
        }
        const wat = 0.16277 / (slipperiness * slipperiness * slipperiness);
        let flyfactor = 0.02;
        if (onground) {
            flyfactor = 0.1 * wat;
            if (sprinting) {
                flyfactor *= 1.3;
            }
        }
        return [flyfactor, slipperiness];
    }
    _jump() {
        this._motionY = 0.42;
        if (this._getSprinting()) {
            let radYaw = this._yaw;
            this._motionX -= Math.sin(radYaw) * 0.2;
            this._motionZ += Math.cos(radYaw) * 0.2;
        }
    }
    _moveEntityWithHeading() {
        const blocktypein = this._world._getBlockType(Math.floor(this._posX), Math.floor(this._posY), Math.floor(this._posZ));
        const globalPallette = this._klocki._blockRegistry._globalPalette;
        const block = globalPallette[blocktypein];
        const h = this._klocki._blockRegistry._helper;
        let moveFactor = 1;
        const flySpeed = 0.05;
        if (this._isFlying) {
            this._motionY *= 0.6;
            moveFactor *= 4;
            if (this._isSneaking()) {
                this._motionY -= flySpeed * 3;
            }
            if (this._jumping) {
                this._motionY += flySpeed * 3;
            }
        }
        if (this._jumping) {
            this._jumping = false;
            if (!(block == h._WATER || block == h._LAVA)) {
                if (this._onGround) {
                    this._jump();
                }
            }
            else {
                this._motionY += 0.04;
            }
        }
        else {
        }
        let lastX = this._posX;
        let lastY = this._posY;
        let lastZ = this._posZ;
        if (true) {
            if (!this._isFlying && (block == h._WATER || block == h._LAVA)) {
                this.accelerateFlying(this._movementStrafe, this._movementForward, 0.02 * moveFactor);
                const [nextPosX, nextPosY, nextPosZ, nextMotionX, nextMotionY, nextMotionZ, nextIsColidedHorizontally, nextOnGround] = this.moveEntity(this._motionX, this._motionY, this._motionZ, this._onGround, this.getAABB());
                this._posX = nextPosX;
                this._posY = nextPosY;
                this._posZ = nextPosZ;
                this._motionX = nextMotionX;
                this._motionY = nextMotionY;
                this._motionZ = nextMotionZ;
                this._isColidedHorizontally = nextIsColidedHorizontally;
                this._onGround = nextOnGround;
                if (block == h._WATER) {
                    this._motionX *= 0.8;
                    this._motionY *= 0.8;
                    this._motionZ *= 0.8;
                    this._motionY -= 0.02;
                }
                else if (block == h._LAVA) {
                    this._motionX *= 0.5;
                    this._motionY *= 0.5;
                    this._motionZ *= 0.5;
                    this._motionY -= 0.02;
                }
                if (this._isColidedHorizontally) {
                }
            }
            else {
                let [flyfactor, slipperiness] = this._getFlyFactor(Math.floor(this._posX), Math.floor(this._posY - 0.05), Math.floor(this._posZ), this._onGround, this._getSprinting());
                if (this._isFlying && this._getSprinting()) {
                    flyfactor *= 4;
                }
                this.accelerateFlying(this._movementStrafe, this._movementForward, flyfactor * moveFactor);
                const [nextPosX, nextPosY, nextPosZ, nextMotionX, nextMotionY, nextMotionZ, nextIsColidedHorizontally, nextOnGround] = this.moveEntity(this._motionX, this._motionY, this._motionZ, this._onGround, this.getAABB());
                this._posX = nextPosX;
                this._posY = nextPosY;
                this._posZ = nextPosZ;
                this._motionX = nextMotionX;
                this._motionY = nextMotionY;
                this._motionZ = nextMotionZ;
                this._isColidedHorizontally = nextIsColidedHorizontally;
                this._onGround = nextOnGround;
                if (!this._isFlying) {
                    this._motionY -= 0.08;
                }
                this._motionY *= 0.98;
                this._motionX *= slipperiness;
                this._motionZ *= slipperiness;
            }
        }
        let deltaX = this._posX - lastX;
        let deltaY = this._posY - lastY;
        let deltaZ = this._posZ - lastZ;
        this._distanceWalkedXZ += Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 0.6;
        this._distanceWalkedOnStepXYZ += Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 0.6;
        const blockTypeGround = this._world._getBlockType(Math.floor(this._posX), Math.floor(this._posY - 0.2), Math.floor(this._posZ));
        const blockGround = globalPallette[blockTypeGround];
        if (this._distanceWalkedOnStepXYZ > this._nextStepDistance && !(blockGround instanceof Blocks_1._AirBlock)) {
            this._nextStepDistance = Math.floor(this._distanceWalkedOnStepXYZ) + 1;
            if (blockGround instanceof Blocks_1._FlowingFluidBlock) {
                let vol = Math.sqrt(this._motionX * this._motionX * 0.2 + this._motionY * this._motionY + this._motionZ * this._motionZ * 0.2) * 0.35;
                if (vol > 1.0) {
                    vol = 1.0;
                }
                const soundKey = "entity.player.swim";
                const pitch = 1.0 + (Math.random() - Math.random()) * 0.4;
                this._klocki._audioManager._playSoundKeyAt(soundKey, vol, pitch, lastX, lastY, lastZ);
            }
            else {
                const soundType = blockGround._prop._soundType;
                const soundKey = soundType._stepSound._key;
                this._klocki._audioManager._playSoundKeyAt(soundKey, 1, 1, lastX, lastY, lastZ);
            }
        }
    }
}
exports._KlockiEntityLiving = _KlockiEntityLiving;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const AxisAlignedBB_1 = __webpack_require__(38);
class _KlockiEntityBase {
    constructor(klocki) {
        this._klocki = klocki;
        const world = klocki._theWorld;
        if (!world) {
            throw new Error("world undefined");
        }
        this._world = world;
        this._eid = 0;
        this._width = 0;
        this._height = 0;
        this._serverPosX = 0;
        this._serverPosY = 0;
        this._serverPosZ = 0;
        this._serverYaw = 0;
        this._serverPitch = 0;
        this._posX = 0;
        this._posY = 0;
        this._posZ = 0;
        this._lastTickPosX = 0;
        this._lastTickPosY = 0;
        this._lastTickPosZ = 0;
        this._prevPosX = 0;
        this._prevPosY = 0;
        this._prevPosZ = 0;
        this._motionX = 0;
        this._motionY = 0;
        this._motionZ = 0;
        this._prevYaw = 0;
        this._prevPitch = 0;
        this._yaw = 0;
        this._pitch = 0;
        this._lastAccelerationX = 0;
        this._lastAccelerationZ = 0;
        this._sprinting = false;
        this._metadata = new Array(32);
    }
    _tick() {
        this._prevPosX = this._posX;
        this._prevPosY = this._posY;
        this._prevPosZ = this._posZ;
        this._prevYaw = this._yaw;
        this._prevPitch = this._pitch;
    }
    getAABB() {
        return AxisAlignedBB_1._AxisAlignedBB._createEntityAABB(this._posX, this._posY, this._posZ, this._width, this._height);
    }
    _renderX(partial) {
        const prev = this._prevPosX;
        return prev + (this._posX - prev) * partial;
    }
    _renderY(partial) {
        const prev = this._prevPosY;
        return prev + (this._posY - prev) * partial;
    }
    _renderZ(partial) {
        const prev = this._prevPosZ;
        return prev + (this._posZ - prev) * partial;
    }
    _renderYaw(partial) {
        const prev = this._prevYaw;
        let current = this._yaw;
        if (prev > Math.PI / 2 && current < -Math.PI / 2) {
            current += Math.PI * 2;
        }
        if (prev < -Math.PI / 2 && current > Math.PI / 2) {
            current -= Math.PI * 2;
        }
        return prev + (current - prev) * partial;
    }
    _renderPitch(partial) {
        const prev = this._prevPitch;
        return prev + (this._pitch - prev) * partial;
    }
    _fixPitch() {
        if (this._pitch > Math.PI / 2) {
            this._pitch = Math.PI / 2;
        }
        if (this._pitch < -Math.PI / 2) {
            this._pitch = -Math.PI / 2;
        }
        if (this._yaw > Math.PI) {
            this._yaw -= 2 * Math.PI;
        }
        if (this._yaw < -Math.PI) {
            this._yaw += 2 * Math.PI;
        }
    }
    _setPos(x, y, z) {
        this._posX = x;
        this._posY = y;
        this._posZ = z;
    }
    _setYaw(yaw) {
        this._yaw = yaw;
    }
    _setPitch(pitch) {
        this._pitch = pitch;
    }
    _onDestroy() {
    }
    _setNewLocation(x, y, z, yaw, pitch, iterations, isTeleport) {
        this._posX = x;
        this._posY = y;
        this._posZ = z;
        this._prevPosX = x;
        this._prevPosY = y;
        this._prevPosZ = z;
    }
    calcAccelerationFlying(strafe, forward, moveFactor, yaw) {
        let v = strafe * strafe + forward * forward;
        if (v >= 0.0001) {
            v = Math.sqrt(v);
            if (v < 1) {
                v = 1;
            }
            v = moveFactor / v;
            strafe *= v;
            forward *= v;
            const sin = Math.sin(yaw);
            const cos = Math.cos(yaw);
            this._lastAccelerationX = strafe * cos - forward * sin;
            this._lastAccelerationZ = forward * cos + strafe * sin;
        }
        else {
            this._lastAccelerationX = 0;
            this._lastAccelerationZ = 0;
        }
    }
    accelerateFlying(strafe, forward, moveFactor) {
        this.calcAccelerationFlying(strafe, forward, moveFactor, this._yaw);
        this._motionX += this._lastAccelerationX;
        this._motionZ += this._lastAccelerationZ;
    }
    _viewVector() {
        const sinyaw = Math.sin(this._yaw);
        const cosyaw = Math.cos(this._yaw);
        const cospitch = Math.cos(this._pitch);
        const sinpitch = Math.cos(this._pitch);
        let x = -sinyaw;
        let z = cosyaw;
        x *= cospitch;
        z *= cospitch;
        return [x, sinpitch, z];
    }
    moveEntity(deltaX, deltaY, deltaZ, inputOnGround, inputaabb) {
        let predeltaX = deltaX;
        let predeltaY = deltaY;
        let predeltaZ = deltaZ;
        const cpaabb = inputaabb;
        let onGround = inputOnGround;
        let isColidedHorizontally = false;
        const theWorld = this._world;
        const colidedList = theWorld._getBlockAABBsInAABB(cpaabb._addCoord(deltaX, deltaY, deltaZ));
        const colidedLen = colidedList.length;
        for (let i = 0; i < colidedLen; i++) {
            const colided = colidedList[i];
            const pre = deltaY;
            deltaY = colided._calculateYOffset(cpaabb, deltaY);
            if (deltaY != pre) {
            }
        }
        cpaabb._offset(0, deltaY, 0);
        for (let i = 0; i < colidedLen; i++) {
            const colided = colidedList[i];
            deltaX = colided._calculateXOffset(cpaabb, deltaX);
        }
        cpaabb._offset(deltaX, 0, 0);
        for (let i = 0; i < colidedLen; i++) {
            const colided = colidedList[i];
            deltaZ = colided._calculateZOffset(cpaabb, deltaZ);
        }
        cpaabb._offset(0, 0, deltaZ);
        const x = (cpaabb._minX() + cpaabb._maxX()) * 0.5;
        const y = cpaabb._minY();
        const z = (cpaabb._minZ() + cpaabb._maxZ()) * 0.5;
        onGround = false;
        isColidedHorizontally = false;
        if (predeltaX != deltaX) {
            predeltaX = 0;
            isColidedHorizontally = true;
        }
        if (predeltaY != deltaY) {
            predeltaY = 0;
            if (deltaY < 0.00001) {
                onGround = true;
            }
        }
        if (predeltaZ != deltaZ) {
            predeltaZ = 0;
            isColidedHorizontally = true;
        }
        return [x, y, z, predeltaX, predeltaY, predeltaZ, isColidedHorizontally, onGround];
    }
    _distanceSquaredTo(x, y, z) {
        const dx = this._posX - x;
        const dy = this._posY - y;
        const dz = this._posZ - z;
        return dx * dx + dy * dy + dz * dz;
    }
    _render() {
    }
    _setSprinting(sprinting) {
        this._sprinting = sprinting;
    }
    _getSprinting() {
        return this._sprinting;
    }
}
exports._KlockiEntityBase = _KlockiEntityBase;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const PacketBuffer_1 = __webpack_require__(10);
class _NbtByte {
    constructor(initial) {
        this._val = new Int8Array(1);
        this._val[0] = initial;
    }
}
exports._NbtByte = _NbtByte;
class _NbtShort {
    constructor(initial) {
        this._val = new Int16Array(1);
        this._val[0] = initial;
    }
}
exports._NbtShort = _NbtShort;
class _NbtInt {
    constructor(initial) {
        this._val = new Int32Array(1);
        this._val[0] = initial;
    }
}
exports._NbtInt = _NbtInt;
class _NbtLong {
    constructor(initial) {
        if (initial) {
            this._val = initial;
        }
        else {
            this._val = new Uint8Array(8);
        }
    }
}
exports._NbtLong = _NbtLong;
class _NbtFloat {
    constructor(initial) {
        this._val = new Float32Array(1);
        this._val[0] = initial;
    }
}
exports._NbtFloat = _NbtFloat;
class _NbtDouble {
    constructor(initial) {
        this._val = new Float64Array(1);
        this._val[0] = initial;
    }
}
exports._NbtDouble = _NbtDouble;
class _NbtByteArray {
    constructor(initial) {
        if (initial) {
            this._val = initial;
        }
        else {
            this._val = new Uint8Array(0);
        }
    }
}
exports._NbtByteArray = _NbtByteArray;
class _NbtString {
    constructor(initial) {
        if (initial) {
            this._val = initial;
        }
        else {
            this._val = new Uint8Array(0);
        }
    }
}
exports._NbtString = _NbtString;
class _NbtList {
    constructor(initial) {
        if (initial) {
            this._val = initial;
        }
        else {
            this._val = new Array(0);
        }
    }
}
exports._NbtList = _NbtList;
class _NbtIntArray {
    constructor(initial) {
        if (initial) {
            this._val = initial;
        }
        else {
            this._val = new Int32Array(0);
        }
    }
}
exports._NbtIntArray = _NbtIntArray;
class _NbtLongArray {
    constructor(initial) {
        if (initial) {
            this._val = initial;
        }
        else {
            this._val = new BigInt64Array(0);
        }
    }
}
exports._NbtLongArray = _NbtLongArray;
class _NbtReader {
    constructor(buf) {
        this._buf = buf;
    }
    static _readNBT(buf) {
        const m = new Map();
        return m;
    }
    static _readMainTag(buf) {
        const m = new Map();
        const r = _NbtReader._instance;
        r._buf = buf;
        r._readIdNameTag(m, 100);
        return m;
    }
    static _readOptionalMainTag(buf) {
        let m = null;
        const nbtId = buf._readUint8();
        if (nbtId != 0) {
            m = new Map();
            const r = _NbtReader._instance;
            r._buf = buf;
            r._readNameTag(nbtId, m, 100);
        }
        return m;
    }
    _readTag(id, level) {
        if (id == 0) {
            return null;
        }
        else if (id == 1) {
            return new _NbtByte(this._buf._readInt8());
        }
        else if (id == 2) {
            return new _NbtShort(this._buf._readInt16());
        }
        else if (id == 3) {
            return new _NbtInt(this._buf._readInt32());
        }
        else if (id == 4) {
            return new _NbtLong(this._buf._readUint8Array(8));
        }
        else if (id == 5) {
            return new _NbtFloat(this._buf._readFloat32());
        }
        else if (id == 6) {
            return new _NbtDouble(this._buf._readFloat64());
        }
        else if (id == 7) {
            const size = this._buf._readUint32();
            if (size < 0 || size > 1024 * 1024) {
                throw new Error("nbt byte array size " + size + " too large");
            }
            return new _NbtByteArray(this._buf._readUint8Array(size));
        }
        else if (id == 8) {
            const size = this._buf._readUint16();
            return new _NbtString(this._buf._readUint8Array(size));
        }
        else if (id == 9) {
            const listedTagId = this._buf._readUint8();
            const listSize = this._buf._readUint32();
            if (listSize > 1024 * 1024) {
                throw new Error("nbt list size " + listSize + " too large");
            }
            const list = new Array(listSize);
            for (let i = 0; i < listSize; i++) {
                list[i] = this._readTag(listedTagId, level - 1);
            }
            return new _NbtList(list);
        }
        else if (id == 10) {
            const m = new Map();
            for (let i = 0;; i++) {
                const tagId = this._readIdNameTag(m, level - 1);
                if (tagId == 0) {
                    break;
                }
                if (i > 10000) {
                    throw new Error("too many nbt tags in compound");
                }
            }
            return m;
        }
        else if (id == 11) {
            const size = this._buf._readUint32();
            if (size < 0 || size > 1024 * 1024) {
                throw new Error("nbt int array size " + size + " too large");
            }
            return new _NbtIntArray(this._buf._readInt32Array(size));
        }
        else if (id == 12) {
            const size = this._buf._readUint32();
            if (size < 0 || size > 1024 * 1024) {
                throw new Error("nbt long array size " + size + " too large");
            }
            return new _NbtLongArray(this._buf._readInt64Array(size));
        }
        else {
            throw new Error("wrong nbt tag ID " + id);
        }
        return null;
    }
    _readNameTag(id, obj, level) {
        const nameLen = this._buf._readInt16();
        const arr = this._buf._peekUint8Array(nameLen);
        const name = _NbtReader.utf8decoder.decode(arr);
        const tagdata = this._readTag(id, level - 1);
        obj.set(name, tagdata);
    }
    _readIdNameTag(obj, level) {
        const id = this._buf._readUint8();
        if (id == 0) {
            return 0;
        }
        this._readNameTag(id, obj, level);
        return id;
    }
}
exports._NbtReader = _NbtReader;
_NbtReader.utf8decoder = new TextDecoder("utf-8");
_NbtReader._instance = new _NbtReader(new PacketBuffer_1._PacketBuffer(new ArrayBuffer(0)));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Nbt_1 = __webpack_require__(43);
class _ItemStack {
    constructor() {
        this._count = 1;
        this._damage = 0;
        this._id = 0;
        this._nbt = null;
    }
    static _read(buf, protocol) {
        const id = buf._readInt16();
        if (id == -1) {
            return null;
        }
        const is = new _ItemStack();
        is._id = id;
        const count = buf._readInt8();
        is._count = count;
        const damage = buf._readInt16();
        is._damage = damage;
        const nbt = Nbt_1._NbtReader._readOptionalMainTag(buf);
        is._nbt = nbt;
        return is;
    }
}
exports._ItemStack = _ItemStack;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(15);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(137);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(23).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(46);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(16).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(11);
util.inherits = __webpack_require__(9);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(138);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(139);
var destroyImpl = __webpack_require__(47);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(7);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(48).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(7);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(48).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6), __webpack_require__(3)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(23).EventEmitter;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(15);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(16).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(7);

/*<replacement>*/
var util = __webpack_require__(11);
util.inherits = __webpack_require__(9);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {


var util = __webpack_require__(4);
var Stream = __webpack_require__(14);


var ChunkStream = module.exports = function() {
  Stream.call(this);

  this._buffers = [];
  this._buffered = 0;

  this._reads = [];
  this._paused = false;

  this._encoding = 'utf8';
  this.writable = true;
};
util.inherits(ChunkStream, Stream);


ChunkStream.prototype.read = function(length, callback) {

  this._reads.push({
    length: Math.abs(length), // if length < 0 then at most this length
    allowLess: length < 0,
    func: callback
  });

  process.nextTick(function() {
    this._process();

    // its paused and there is not enought data then ask for more
    if (this._paused && this._reads.length > 0) {
      this._paused = false;

      this.emit('drain');
    }
  }.bind(this));
};

ChunkStream.prototype.write = function(data, encoding) {

  if (!this.writable) {
    this.emit('error', new Error('Stream not writable'));
    return false;
  }

  var dataBuffer;
  if (Buffer.isBuffer(data)) {
    dataBuffer = data;
  }
  else {
    dataBuffer = new Buffer(data, encoding || this._encoding);
  }

  this._buffers.push(dataBuffer);
  this._buffered += dataBuffer.length;

  this._process();

  // ok if there are no more read requests
  if (this._reads && this._reads.length === 0) {
    this._paused = true;
  }

  return this.writable && !this._paused;
};

ChunkStream.prototype.end = function(data, encoding) {

  if (data) {
    this.write(data, encoding);
  }

  this.writable = false;

  // already destroyed
  if (!this._buffers) {
    return;
  }

  // enqueue or handle end
  if (this._buffers.length === 0) {
    this._end();
  }
  else {
    this._buffers.push(null);
    this._process();
  }
};

ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;

ChunkStream.prototype._end = function() {

  if (this._reads.length > 0) {
    this.emit('error',
      new Error('Unexpected end of input')
    );
  }

  this.destroy();
};

ChunkStream.prototype.destroy = function() {

  if (!this._buffers) {
    return;
  }

  this.writable = false;
  this._reads = null;
  this._buffers = null;

  this.emit('close');
};

ChunkStream.prototype._processReadAllowingLess = function(read) {
  // ok there is any data so that we can satisfy this request
  this._reads.shift(); // == read

  // first we need to peek into first buffer
  var smallerBuf = this._buffers[0];

  // ok there is more data than we need
  if (smallerBuf.length > read.length) {

    this._buffered -= read.length;
    this._buffers[0] = smallerBuf.slice(read.length);

    read.func.call(this, smallerBuf.slice(0, read.length));

  }
  else {
    // ok this is less than maximum length so use it all
    this._buffered -= smallerBuf.length;
    this._buffers.shift(); // == smallerBuf

    read.func.call(this, smallerBuf);
  }
};

ChunkStream.prototype._processRead = function(read) {
  this._reads.shift(); // == read

  var pos = 0;
  var count = 0;
  var data = new Buffer(read.length);

  // create buffer for all data
  while (pos < read.length) {

    var buf = this._buffers[count++];
    var len = Math.min(buf.length, read.length - pos);

    buf.copy(data, pos, 0, len);
    pos += len;

    // last buffer wasn't used all so just slice it and leave
    if (len !== buf.length) {
      this._buffers[--count] = buf.slice(len);
    }
  }

  // remove all used buffers
  if (count > 0) {
    this._buffers.splice(0, count);
  }

  this._buffered -= read.length;

  read.func.call(this, data);
};

ChunkStream.prototype._process = function() {

  try {
    // as long as there is any data and read requests
    while (this._buffered > 0 && this._reads && this._reads.length > 0) {

      var read = this._reads[0];

      // read any data (but no more than length)
      if (read.allowLess) {
        this._processReadAllowingLess(read);

      }
      else if (this._buffered >= read.length) {
        // ok we can meet some expectations

        this._processRead(read);
      }
      else {
        // not enought data to satisfy first request in queue
        // so we need to wait for more
        break;
      }
    }

    if (this._buffers && !this.writable) {
      this._end();
    }
  }
  catch (ex) {
    this.emit('error', ex);
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(1).Buffer))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var interlaceUtils = __webpack_require__(54);
var paethPredictor = __webpack_require__(55);

function getByteWidth(width, bpp, depth) {
  var byteWidth = width * bpp;
  if (depth !== 8) {
    byteWidth = Math.ceil(byteWidth / (8 / depth));
  }
  return byteWidth;
}

var Filter = module.exports = function(bitmapInfo, dependencies) {

  var width = bitmapInfo.width;
  var height = bitmapInfo.height;
  var interlace = bitmapInfo.interlace;
  var bpp = bitmapInfo.bpp;
  var depth = bitmapInfo.depth;

  this.read = dependencies.read;
  this.write = dependencies.write;
  this.complete = dependencies.complete;

  this._imageIndex = 0;
  this._images = [];
  if (interlace) {
    var passes = interlaceUtils.getImagePasses(width, height);
    for (var i = 0; i < passes.length; i++) {
      this._images.push({
        byteWidth: getByteWidth(passes[i].width, bpp, depth),
        height: passes[i].height,
        lineIndex: 0
      });
    }
  }
  else {
    this._images.push({
      byteWidth: getByteWidth(width, bpp, depth),
      height: height,
      lineIndex: 0
    });
  }

  // when filtering the line we look at the pixel to the left
  // the spec also says it is done on a byte level regardless of the number of pixels
  // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
  // a pixel rather than just a different byte part. However if we are sub byte, we ignore.
  if (depth === 8) {
    this._xComparison = bpp;
  }
  else if (depth === 16) {
    this._xComparison = bpp * 2;
  }
  else {
    this._xComparison = 1;
  }
};

Filter.prototype.start = function() {
  this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
};

Filter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {

  var xComparison = this._xComparison;
  var xBiggerThan = xComparison - 1;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
    unfilteredLine[x] = rawByte + f1Left;
  }
};

Filter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {

  var lastLine = this._lastLine;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f2Up = lastLine ? lastLine[x] : 0;
    unfilteredLine[x] = rawByte + f2Up;
  }
};

Filter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {

  var xComparison = this._xComparison;
  var xBiggerThan = xComparison - 1;
  var lastLine = this._lastLine;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f3Up = lastLine ? lastLine[x] : 0;
    var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
    var f3Add = Math.floor((f3Left + f3Up) / 2);
    unfilteredLine[x] = rawByte + f3Add;
  }
};

Filter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {

  var xComparison = this._xComparison;
  var xBiggerThan = xComparison - 1;
  var lastLine = this._lastLine;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f4Up = lastLine ? lastLine[x] : 0;
    var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
    var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;
    var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);
    unfilteredLine[x] = rawByte + f4Add;
  }
};

Filter.prototype._reverseFilterLine = function(rawData) {

  var filter = rawData[0];
  var unfilteredLine;
  var currentImage = this._images[this._imageIndex];
  var byteWidth = currentImage.byteWidth;

  if (filter === 0) {
    unfilteredLine = rawData.slice(1, byteWidth + 1);
  }
  else {

    unfilteredLine = new Buffer(byteWidth);

    switch (filter) {
      case 1:
        this._unFilterType1(rawData, unfilteredLine, byteWidth);
        break;
      case 2:
        this._unFilterType2(rawData, unfilteredLine, byteWidth);
        break;
      case 3:
        this._unFilterType3(rawData, unfilteredLine, byteWidth);
        break;
      case 4:
        this._unFilterType4(rawData, unfilteredLine, byteWidth);
        break;
      default:
        throw new Error('Unrecognised filter type - ' + filter);
    }
  }

  this.write(unfilteredLine);

  currentImage.lineIndex++;
  if (currentImage.lineIndex >= currentImage.height) {
    this._lastLine = null;
    this._imageIndex++;
    currentImage = this._images[this._imageIndex];
  }
  else {
    this._lastLine = unfilteredLine;
  }

  if (currentImage) {
    // read, using the byte width that may be from the new current image
    this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
  }
  else {
    this._lastLine = null;
    this.complete();
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Adam 7
//   0 1 2 3 4 5 6 7
// 0 x 6 4 6 x 6 4 6
// 1 7 7 7 7 7 7 7 7
// 2 5 6 5 6 5 6 5 6
// 3 7 7 7 7 7 7 7 7
// 4 3 6 4 6 3 6 4 6
// 5 7 7 7 7 7 7 7 7
// 6 5 6 5 6 5 6 5 6
// 7 7 7 7 7 7 7 7 7


var imagePasses = [
  { // pass 1 - 1px
    x: [0],
    y: [0]
  },
  { // pass 2 - 1px
    x: [4],
    y: [0]
  },
  { // pass 3 - 2px
    x: [0, 4],
    y: [4]
  },
  { // pass 4 - 4px
    x: [2, 6],
    y: [0, 4]
  },
  { // pass 5 - 8px
    x: [0, 2, 4, 6],
    y: [2, 6]
  },
  { // pass 6 - 16px
    x: [1, 3, 5, 7],
    y: [0, 2, 4, 6]
  },
  { // pass 7 - 32px
    x: [0, 1, 2, 3, 4, 5, 6, 7],
    y: [1, 3, 5, 7]
  }
];

exports.getImagePasses = function(width, height) {
  var images = [];
  var xLeftOver = width % 8;
  var yLeftOver = height % 8;
  var xRepeats = (width - xLeftOver) / 8;
  var yRepeats = (height - yLeftOver) / 8;
  for (var i = 0; i < imagePasses.length; i++) {
    var pass = imagePasses[i];
    var passWidth = xRepeats * pass.x.length;
    var passHeight = yRepeats * pass.y.length;
    for (var j = 0; j < pass.x.length; j++) {
      if (pass.x[j] < xLeftOver) {
        passWidth++;
      }
      else {
        break;
      }
    }
    for (j = 0; j < pass.y.length; j++) {
      if (pass.y[j] < yLeftOver) {
        passHeight++;
      }
      else {
        break;
      }
    }
    if (passWidth > 0 && passHeight > 0) {
      images.push({ width: passWidth, height: passHeight, index: i });
    }
  }
  return images;
};

exports.getInterlaceIterator = function(width) {
  return function(x, y, pass) {
    var outerXLeftOver = x % imagePasses[pass].x.length;
    var outerX = (((x - outerXLeftOver) / imagePasses[pass].x.length) * 8) + imagePasses[pass].x[outerXLeftOver];
    var outerYLeftOver = y % imagePasses[pass].y.length;
    var outerY = (((y - outerYLeftOver) / imagePasses[pass].y.length) * 8) + imagePasses[pass].y[outerYLeftOver];
    return (outerX * 4) + (outerY * width * 4);
  };
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function paethPredictor(left, above, upLeft) {

  var paeth = left + above - upLeft;
  var pLeft = Math.abs(paeth - left);
  var pAbove = Math.abs(paeth - above);
  var pUpLeft = Math.abs(paeth - upLeft);

  if (pLeft <= pAbove && pLeft <= pUpLeft) {
    return left;
  }
  if (pAbove <= pUpLeft) {
    return above;
  }
  return upLeft;
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var constants = __webpack_require__(13);
var CrcCalculator = __webpack_require__(57);


var Parser = module.exports = function(options, dependencies) {

  this._options = options;
  options.checkCRC = options.checkCRC !== false;

  this._hasIHDR = false;
  this._hasIEND = false;
  this._emittedHeadersFinished = false;

  // input flags/metadata
  this._palette = [];
  this._colorType = 0;

  this._chunks = {};
  this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);
  this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);
  this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);
  this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);
  this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);
  this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);

  this.read = dependencies.read;
  this.error = dependencies.error;
  this.metadata = dependencies.metadata;
  this.gamma = dependencies.gamma;
  this.transColor = dependencies.transColor;
  this.palette = dependencies.palette;
  this.parsed = dependencies.parsed;
  this.inflateData = dependencies.inflateData;
  this.finished = dependencies.finished;
  this.simpleTransparency = dependencies.simpleTransparency;
  this.headersFinished = dependencies.headersFinished || function() {};
};

Parser.prototype.start = function() {
  this.read(constants.PNG_SIGNATURE.length,
    this._parseSignature.bind(this)
  );
};

Parser.prototype._parseSignature = function(data) {

  var signature = constants.PNG_SIGNATURE;

  for (var i = 0; i < signature.length; i++) {
    if (data[i] !== signature[i]) {
      this.error(new Error('Invalid file signature'));
      return;
    }
  }
  this.read(8, this._parseChunkBegin.bind(this));
};

Parser.prototype._parseChunkBegin = function(data) {

  // chunk content length
  var length = data.readUInt32BE(0);

  // chunk type
  var type = data.readUInt32BE(4);
  var name = '';
  for (var i = 4; i < 8; i++) {
    name += String.fromCharCode(data[i]);
  }

  //console.log('chunk ', name, length);

  // chunk flags
  var ancillary = Boolean(data[4] & 0x20); // or critical
  //    priv = Boolean(data[5] & 0x20), // or public
  //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe

  if (!this._hasIHDR && type !== constants.TYPE_IHDR) {
    this.error(new Error('Expected IHDR on beggining'));
    return;
  }

  this._crc = new CrcCalculator();
  this._crc.write(new Buffer(name));

  if (this._chunks[type]) {
    return this._chunks[type](length);
  }

  if (!ancillary) {
    this.error(new Error('Unsupported critical chunk type ' + name));
    return;
  }

  this.read(length + 4, this._skipChunk.bind(this));
};

Parser.prototype._skipChunk = function(/*data*/) {
  this.read(8, this._parseChunkBegin.bind(this));
};

Parser.prototype._handleChunkEnd = function() {
  this.read(4, this._parseChunkEnd.bind(this));
};

Parser.prototype._parseChunkEnd = function(data) {

  var fileCrc = data.readInt32BE(0);
  var calcCrc = this._crc.crc32();

  // check CRC
  if (this._options.checkCRC && calcCrc !== fileCrc) {
    this.error(new Error('Crc error - ' + fileCrc + ' - ' + calcCrc));
    return;
  }

  if (!this._hasIEND) {
    this.read(8, this._parseChunkBegin.bind(this));
  }
};

Parser.prototype._handleIHDR = function(length) {
  this.read(length, this._parseIHDR.bind(this));
};
Parser.prototype._parseIHDR = function(data) {

  this._crc.write(data);

  var width = data.readUInt32BE(0);
  var height = data.readUInt32BE(4);
  var depth = data[8];
  var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha
  var compr = data[10];
  var filter = data[11];
  var interlace = data[12];

  // console.log('    width', width, 'height', height,
  //     'depth', depth, 'colorType', colorType,
  //     'compr', compr, 'filter', filter, 'interlace', interlace
  // );

  if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
    this.error(new Error('Unsupported bit depth ' + depth));
    return;
  }
  if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {
    this.error(new Error('Unsupported color type'));
    return;
  }
  if (compr !== 0) {
    this.error(new Error('Unsupported compression method'));
    return;
  }
  if (filter !== 0) {
    this.error(new Error('Unsupported filter method'));
    return;
  }
  if (interlace !== 0 && interlace !== 1) {
    this.error(new Error('Unsupported interlace method'));
    return;
  }

  this._colorType = colorType;

  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];

  this._hasIHDR = true;

  this.metadata({
    width: width,
    height: height,
    depth: depth,
    interlace: Boolean(interlace),
    palette: Boolean(colorType & constants.COLORTYPE_PALETTE),
    color: Boolean(colorType & constants.COLORTYPE_COLOR),
    alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),
    bpp: bpp,
    colorType: colorType
  });

  this._handleChunkEnd();
};


Parser.prototype._handlePLTE = function(length) {
  this.read(length, this._parsePLTE.bind(this));
};
Parser.prototype._parsePLTE = function(data) {

  this._crc.write(data);

  var entries = Math.floor(data.length / 3);
  // console.log('Palette:', entries);

  for (var i = 0; i < entries; i++) {
    this._palette.push([
      data[i * 3],
      data[i * 3 + 1],
      data[i * 3 + 2],
      0xff
    ]);
  }

  this.palette(this._palette);

  this._handleChunkEnd();
};

Parser.prototype._handleTRNS = function(length) {
  this.simpleTransparency();
  this.read(length, this._parseTRNS.bind(this));
};
Parser.prototype._parseTRNS = function(data) {

  this._crc.write(data);

  // palette
  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {
    if (this._palette.length === 0) {
      this.error(new Error('Transparency chunk must be after palette'));
      return;
    }
    if (data.length > this._palette.length) {
      this.error(new Error('More transparent colors than palette size'));
      return;
    }
    for (var i = 0; i < data.length; i++) {
      this._palette[i][3] = data[i];
    }
    this.palette(this._palette);
  }

  // for colorType 0 (grayscale) and 2 (rgb)
  // there might be one gray/color defined as transparent
  if (this._colorType === constants.COLORTYPE_GRAYSCALE) {
    // grey, 2 bytes
    this.transColor([data.readUInt16BE(0)]);
  }
  if (this._colorType === constants.COLORTYPE_COLOR) {
    this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
  }

  this._handleChunkEnd();
};

Parser.prototype._handleGAMA = function(length) {
  this.read(length, this._parseGAMA.bind(this));
};
Parser.prototype._parseGAMA = function(data) {

  this._crc.write(data);
  this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);

  this._handleChunkEnd();
};

Parser.prototype._handleIDAT = function(length) {
  if (!this._emittedHeadersFinished) {
    this._emittedHeadersFinished = true;
    this.headersFinished();
  }
  this.read(-length, this._parseIDAT.bind(this, length));
};
Parser.prototype._parseIDAT = function(length, data) {

  this._crc.write(data);

  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
    throw new Error('Expected palette not found');
  }

  this.inflateData(data);
  var leftOverLength = length - data.length;

  if (leftOverLength > 0) {
    this._handleIDAT(leftOverLength);
  }
  else {
    this._handleChunkEnd();
  }
};

Parser.prototype._handleIEND = function(length) {
  this.read(length, this._parseIEND.bind(this));
};
Parser.prototype._parseIEND = function(data) {

  this._crc.write(data);

  this._hasIEND = true;
  this._handleChunkEnd();

  if (this.finished) {
    this.finished();
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var crcTable = [];

(function() {
  for (var i = 0; i < 256; i++) {
    var currentCrc = i;
    for (var j = 0; j < 8; j++) {
      if (currentCrc & 1) {
        currentCrc = 0xedb88320 ^ (currentCrc >>> 1);
      }
      else {
        currentCrc = currentCrc >>> 1;
      }
    }
    crcTable[i] = currentCrc;
  }
}());

var CrcCalculator = module.exports = function() {
  this._crc = -1;
};

CrcCalculator.prototype.write = function(data) {

  for (var i = 0; i < data.length; i++) {
    this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ (this._crc >>> 8);
  }
  return true;
};

CrcCalculator.prototype.crc32 = function() {
  return this._crc ^ -1;
};


CrcCalculator.crc32 = function(buf) {

  var crc = -1;
  for (var i = 0; i < buf.length; i++) {
    crc = crcTable[(crc ^ buf[i]) & 0xff] ^ (crc >>> 8);
  }
  return crc ^ -1;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var interlaceUtils = __webpack_require__(54);

var pixelBppMapper = [
  // 0 - dummy entry
  function() {},

  // 1 - L
  // 0: 0, 1: 0, 2: 0, 3: 0xff
  function(pxData, data, pxPos, rawPos) {
    if (rawPos === data.length) {
      throw new Error('Ran out of data');
    }

    var pixel = data[rawPos];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = 0xff;
  },

  // 2 - LA
  // 0: 0, 1: 0, 2: 0, 3: 1
  function(pxData, data, pxPos, rawPos) {
    if (rawPos + 1 >= data.length) {
      throw new Error('Ran out of data');
    }

    var pixel = data[rawPos];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = data[rawPos + 1];
  },

  // 3 - RGB
  // 0: 0, 1: 1, 2: 2, 3: 0xff
  function(pxData, data, pxPos, rawPos) {
    if (rawPos + 2 >= data.length) {
      throw new Error('Ran out of data');
    }

    pxData[pxPos] = data[rawPos];
    pxData[pxPos + 1] = data[rawPos + 1];
    pxData[pxPos + 2] = data[rawPos + 2];
    pxData[pxPos + 3] = 0xff;
  },

  // 4 - RGBA
  // 0: 0, 1: 1, 2: 2, 3: 3
  function(pxData, data, pxPos, rawPos) {
    if (rawPos + 3 >= data.length) {
      throw new Error('Ran out of data');
    }

    pxData[pxPos] = data[rawPos];
    pxData[pxPos + 1] = data[rawPos + 1];
    pxData[pxPos + 2] = data[rawPos + 2];
    pxData[pxPos + 3] = data[rawPos + 3];
  }
];

var pixelBppCustomMapper = [
  // 0 - dummy entry
  function() {},

  // 1 - L
  // 0: 0, 1: 0, 2: 0, 3: 0xff
  function(pxData, pixelData, pxPos, maxBit) {
    var pixel = pixelData[0];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = maxBit;
  },

  // 2 - LA
  // 0: 0, 1: 0, 2: 0, 3: 1
  function(pxData, pixelData, pxPos) {
    var pixel = pixelData[0];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = pixelData[1];
  },

  // 3 - RGB
  // 0: 0, 1: 1, 2: 2, 3: 0xff
  function(pxData, pixelData, pxPos, maxBit) {
    pxData[pxPos] = pixelData[0];
    pxData[pxPos + 1] = pixelData[1];
    pxData[pxPos + 2] = pixelData[2];
    pxData[pxPos + 3] = maxBit;
  },

  // 4 - RGBA
  // 0: 0, 1: 1, 2: 2, 3: 3
  function(pxData, pixelData, pxPos) {
    pxData[pxPos] = pixelData[0];
    pxData[pxPos + 1] = pixelData[1];
    pxData[pxPos + 2] = pixelData[2];
    pxData[pxPos + 3] = pixelData[3];
  }
];

function bitRetriever(data, depth) {

  var leftOver = [];
  var i = 0;

  function split() {
    if (i === data.length) {
      throw new Error('Ran out of data');
    }
    var byte = data[i];
    i++;
    var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;
    switch (depth) {
      default:
        throw new Error('unrecognised depth');
      case 16:
        byte2 = data[i];
        i++;
        leftOver.push(((byte << 8) + byte2));
        break;
      case 4:
        byte2 = byte & 0x0f;
        byte1 = byte >> 4;
        leftOver.push(byte1, byte2);
        break;
      case 2:
        byte4 = byte & 3;
        byte3 = byte >> 2 & 3;
        byte2 = byte >> 4 & 3;
        byte1 = byte >> 6 & 3;
        leftOver.push(byte1, byte2, byte3, byte4);
        break;
      case 1:
        byte8 = byte & 1;
        byte7 = byte >> 1 & 1;
        byte6 = byte >> 2 & 1;
        byte5 = byte >> 3 & 1;
        byte4 = byte >> 4 & 1;
        byte3 = byte >> 5 & 1;
        byte2 = byte >> 6 & 1;
        byte1 = byte >> 7 & 1;
        leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);
        break;
    }
  }

  return {
    get: function(count) {
      while (leftOver.length < count) {
        split();
      }
      var returner = leftOver.slice(0, count);
      leftOver = leftOver.slice(count);
      return returner;
    },
    resetAfterLine: function() {
      leftOver.length = 0;
    },
    end: function() {
      if (i !== data.length) {
        throw new Error('extra data found');
      }
    }
  };
}

function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) { // eslint-disable-line max-params
  var imageWidth = image.width;
  var imageHeight = image.height;
  var imagePass = image.index;
  for (var y = 0; y < imageHeight; y++) {
    for (var x = 0; x < imageWidth; x++) {
      var pxPos = getPxPos(x, y, imagePass);
      pixelBppMapper[bpp](pxData, data, pxPos, rawPos);
      rawPos += bpp; //eslint-disable-line no-param-reassign
    }
  }
  return rawPos;
}

function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) { // eslint-disable-line max-params
  var imageWidth = image.width;
  var imageHeight = image.height;
  var imagePass = image.index;
  for (var y = 0; y < imageHeight; y++) {
    for (var x = 0; x < imageWidth; x++) {
      var pixelData = bits.get(bpp);
      var pxPos = getPxPos(x, y, imagePass);
      pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);
    }
    bits.resetAfterLine();
  }
}

exports.dataToBitMap = function(data, bitmapInfo) {

  var width = bitmapInfo.width;
  var height = bitmapInfo.height;
  var depth = bitmapInfo.depth;
  var bpp = bitmapInfo.bpp;
  var interlace = bitmapInfo.interlace;

  if (depth !== 8) {
    var bits = bitRetriever(data, depth);
  }
  var pxData;
  if (depth <= 8) {
    pxData = new Buffer(width * height * 4);
  }
  else {
    pxData = new Uint16Array(width * height * 4);
  }
  var maxBit = Math.pow(2, depth) - 1;
  var rawPos = 0;
  var images;
  var getPxPos;

  if (interlace) {
    images = interlaceUtils.getImagePasses(width, height);
    getPxPos = interlaceUtils.getInterlaceIterator(width, height);
  }
  else {
    var nonInterlacedPxPos = 0;
    getPxPos = function() {
      var returner = nonInterlacedPxPos;
      nonInterlacedPxPos += 4;
      return returner;
    };
    images = [{ width: width, height: height }];
  }

  for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {
    if (depth === 8) {
      rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
    }
    else {
      mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
    }
  }
  if (depth === 8) {
    if (rawPos !== data.length) {
      throw new Error('extra data found');
    }
  }
  else {
    bits.end();
  }

  return pxData;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function dePalette(indata, outdata, width, height, palette) {
  var pxPos = 0;
  // use values from palette
  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      var color = palette[indata[pxPos]];

      if (!color) {
        throw new Error('index ' + indata[pxPos] + ' not in palette');
      }

      for (var i = 0; i < 4; i++) {
        outdata[pxPos + i] = color[i];
      }
      pxPos += 4;
    }
  }
}

function replaceTransparentColor(indata, outdata, width, height, transColor) {
  var pxPos = 0;
  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      var makeTrans = false;

      if (transColor.length === 1) {
        if (transColor[0] === indata[pxPos]) {
          makeTrans = true;
        }
      }
      else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
        makeTrans = true;
      }
      if (makeTrans) {
        for (var i = 0; i < 4; i++) {
          outdata[pxPos + i] = 0;
        }
      }
      pxPos += 4;
    }
  }
}

function scaleDepth(indata, outdata, width, height, depth) {
  var maxOutSample = 255;
  var maxInSample = Math.pow(2, depth) - 1;
  var pxPos = 0;

  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      for (var i = 0; i < 4; i++) {
        outdata[pxPos + i] = Math.floor((indata[pxPos + i] * maxOutSample) / maxInSample + 0.5);
      }
      pxPos += 4;
    }
  }
}

module.exports = function(indata, imageData) {

  var depth = imageData.depth;
  var width = imageData.width;
  var height = imageData.height;
  var colorType = imageData.colorType;
  var transColor = imageData.transColor;
  var palette = imageData.palette;

  var outdata = indata; // only different for 16 bits

  if (colorType === 3) { // paletted
    dePalette(indata, outdata, width, height, palette);
  }
  else {
    if (transColor) {
      replaceTransparentColor(indata, outdata, width, height, transColor);
    }
    // if it needs scaling
    if (depth !== 8) {
      // if we need to change the buffer size
      if (depth === 16) {
        outdata = new Buffer(width * height * 4);
      }
      scaleDepth(indata, outdata, width, height, depth);
    }
  }
  return outdata;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var constants = __webpack_require__(13);
var CrcStream = __webpack_require__(57);
var bitPacker = __webpack_require__(162);
var filter = __webpack_require__(163);
var zlib = __webpack_require__(12);

var Packer = module.exports = function(options) {
  this._options = options;

  options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
  options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;
  options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;
  options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;
  options.deflateFactory = options.deflateFactory || zlib.createDeflate;
  options.bitDepth = options.bitDepth || 8;
  // This is outputColorType
  options.colorType = (typeof options.colorType === 'number') ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;
  options.inputColorType = (typeof options.inputColorType === 'number') ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;

  if ([
    constants.COLORTYPE_GRAYSCALE,
    constants.COLORTYPE_COLOR,
    constants.COLORTYPE_COLOR_ALPHA,
    constants.COLORTYPE_ALPHA
  ].indexOf(options.colorType) === -1) {
    throw new Error('option color type:' + options.colorType + ' is not supported at present');
  }
  if ([
    constants.COLORTYPE_GRAYSCALE,
    constants.COLORTYPE_COLOR,
    constants.COLORTYPE_COLOR_ALPHA,
    constants.COLORTYPE_ALPHA
  ].indexOf(options.inputColorType) === -1) {
    throw new Error('option input color type:' + options.inputColorType + ' is not supported at present');
  }
  if (options.bitDepth !== 8 && options.bitDepth !== 16) {
    throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
  }
};

Packer.prototype.getDeflateOptions = function() {
  return {
    chunkSize: this._options.deflateChunkSize,
    level: this._options.deflateLevel,
    strategy: this._options.deflateStrategy
  };
};

Packer.prototype.createDeflate = function() {
  return this._options.deflateFactory(this.getDeflateOptions());
};

Packer.prototype.filterData = function(data, width, height) {
  // convert to correct format for filtering (e.g. right bpp and bit depth)
  var packedData = bitPacker(data, width, height, this._options);

  // filter pixel data
  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];
  var filteredData = filter(packedData, width, height, this._options, bpp);
  return filteredData;
};

Packer.prototype._packChunk = function(type, data) {

  var len = (data ? data.length : 0);
  var buf = new Buffer(len + 12);

  buf.writeUInt32BE(len, 0);
  buf.writeUInt32BE(type, 4);

  if (data) {
    data.copy(buf, 8);
  }

  buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
  return buf;
};

Packer.prototype.packGAMA = function(gamma) {
  var buf = new Buffer(4);
  buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);
  return this._packChunk(constants.TYPE_gAMA, buf);
};

Packer.prototype.packIHDR = function(width, height) {

  var buf = new Buffer(13);
  buf.writeUInt32BE(width, 0);
  buf.writeUInt32BE(height, 4);
  buf[8] = this._options.bitDepth; // Bit depth
  buf[9] = this._options.colorType; // colorType
  buf[10] = 0; // compression
  buf[11] = 0; // filter
  buf[12] = 0; // interlace

  return this._packChunk(constants.TYPE_IHDR, buf);
};

Packer.prototype.packIDAT = function(data) {
  return this._packChunk(constants.TYPE_IDAT, data);
};

Packer.prototype.packIEND = function() {
  return this._packChunk(constants.TYPE_IEND, null);
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var SyncReader = module.exports = function(buffer) {

  this._buffer = buffer;
  this._reads = [];
};

SyncReader.prototype.read = function(length, callback) {

  this._reads.push({
    length: Math.abs(length), // if length < 0 then at most this length
    allowLess: length < 0,
    func: callback
  });
};

SyncReader.prototype.process = function() {

  // as long as there is any data and read requests
  while (this._reads.length > 0 && this._buffer.length) {

    var read = this._reads[0];

    if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {

      // ok there is any data so that we can satisfy this request
      this._reads.shift(); // == read

      var buf = this._buffer;

      this._buffer = buf.slice(read.length);

      read.func.call(this, buf.slice(0, read.length));

    }
    else {
      break;
    }

  }

  if (this._reads.length > 0) {
    return new Error('There are some read requests waitng on finished stream');
  }

  if (this._buffer.length > 0) {
    return new Error('unrecognised content at end of stream');
  }

};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Gui {
    constructor(klocki) {
        this._klocki = klocki;
    }
    _render() {
    }
}
exports._Gui = _Gui;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Shader_1 = __webpack_require__(19);
class _ShaderMobs extends Shader_1._Shader {
    constructor(klocki) {
        super();
        this._klocki = klocki;
        const vsSource = `#version 300 es
    in vec4 aVertexPosition;
    in vec2 aTextureCoord;
    in int aTextureAtlas;
    in vec4 aColor;
    in int aGroupMatrixID;

  
    uniform mat4 uProjectionMatrix;
    uniform lowp sampler2D uGroupinfoSampler;
  
    out lowp vec4 vertexColor;
    out lowp vec3 vTextureCoord;
  
    mat4 getGroupMatrix(int id){
      id = id << 2;
      int groupMatrixX = id & 255;
      int groupMatrixY = id >> 8;
      vec4 ga = texelFetch(uGroupinfoSampler, ivec2(groupMatrixX, groupMatrixY), 0);
      vec4 gb = texelFetch(uGroupinfoSampler, ivec2(groupMatrixX+1, groupMatrixY), 0);
      vec4 gc = texelFetch(uGroupinfoSampler, ivec2(groupMatrixX+2, groupMatrixY), 0);
      vec4 gd = texelFetch(uGroupinfoSampler, ivec2(groupMatrixX+3, groupMatrixY), 0);
      return mat4(ga, gb, gc, gd);
    }
    void main(void) {
      vec4 pos = aVertexPosition;

      
      pos = getGroupMatrix(aGroupMatrixID) * pos;

      gl_Position = uProjectionMatrix * (pos);
      vertexColor = aColor;
      vTextureCoord = vec3(aTextureCoord, aTextureAtlas);
    }
  `;
        const fsSource = `#version 300 es
  precision lowp float;
  
    in lowp vec3 vTextureCoord;
    in lowp vec4 vertexColor;
  
    uniform lowp sampler2DArray uSampler;
    
  
    out vec4 fragColor;
    void main(void) {
      fragColor = texture(uSampler, vTextureCoord) * vertexColor;
      if(fragColor.a < 0.1){
        discard;
      }
    }
  `;
        const gl = klocki._display._gl;
        this._gl = gl;
        const program = this._initShaderProgram(gl, vsSource, fsSource);
        this._program = program;
        this._attribLocations = {
            _vertexPosition: gl.getAttribLocation(program, 'aVertexPosition'),
            _textureCoord: gl.getAttribLocation(program, 'aTextureCoord'),
            _textureAtlas: gl.getAttribLocation(program, 'aTextureAtlas'),
            _color: gl.getAttribLocation(program, 'aColor'),
            _groupMatrixID: gl.getAttribLocation(program, 'aGroupMatrixID'),
        };
        this._uniformLocations = {
            _projectionMatrix: gl.getUniformLocation(program, 'uProjectionMatrix'),
            _uSampler: gl.getUniformLocation(program, 'uSampler'),
            _uGroupinfoSampler: gl.getUniformLocation(program, 'uGroupinfoSampler'),
        };
    }
}
exports._ShaderMobs = _ShaderMobs;


/***/ }),
/* 64 */,
/* 65 */,
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Klocki_1 = __webpack_require__(2);
window.klocki = window.klocki || {};
window.addEventListener("load", (ev) => (window.klocki = new Klocki_1._Klocki()));
document.addEventListener("mouseup", (e) => {
    e.preventDefault();
});
document.addEventListener("keydown", (e) => {
    if (e.ctrlKey || e.key === "F3" || e.key === "F5" || e.key === "F8" || e.key == "Tab" || e.key == "Control" || e.key == "Shift") {
        e.preventDefault();
        e.stopPropagation();
        return false;
    }
    return undefined;
});


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const MaterialColor_1 = __webpack_require__(68);
const Block_1 = __webpack_require__(29);
const Blocks_1 = __webpack_require__(30);
const Material_1 = __webpack_require__(69);
const BlockProperties_1 = __webpack_require__(70);
const LegacyBlockDataMap_1 = __webpack_require__(73);
const SoundType_1 = __webpack_require__(31);
const BlocksHelper_1 = __webpack_require__(74);
const DyeColor_1 = __webpack_require__(75);
const Effects_1 = __webpack_require__(76);
class _BlockRegistry {
    constructor(textureManager, models) {
        this._textureManager = textureManager;
        this._blocksByLegacyId = Array(256);
        this._blocksByNameOrder = Array(1024 * 16);
        this._blocksByName = new Map();
        this._currentNameOrderIndex = 0;
        this._modelRegistry = models;
        this._globalPaletteSize = 1024 * 16;
        this._globalPalette = new Array(this._globalPaletteSize);
        this._globalPaletteOpaque = new Uint8Array(this._globalPaletteSize);
        this._currentGlobalPaletteIndex = 0;
    }
    _registerBlock(legacyId, legacyData, name, blockTypeInstance) {
        blockTypeInstance._name = name;
        this._blocksByName.set(name, blockTypeInstance);
        this._blocksByNameOrder[this._currentNameOrderIndex++] = blockTypeInstance;
        if (legacyId >= 0) {
            let legacyBDM = this._blocksByLegacyId[legacyId];
            if (legacyBDM === undefined) {
                legacyBDM = new LegacyBlockDataMap_1._LegacyBlockDataMap();
                this._blocksByLegacyId[legacyId] = legacyBDM;
                legacyBDM._fillAll(name, blockTypeInstance);
            }
            legacyBDM._byData[legacyData] = blockTypeInstance;
            legacyBDM._names[legacyData] = name;
            legacyBDM._opaque = blockTypeInstance._prop._opaque;
        }
        if (this._textureManager !== null) {
            blockTypeInstance._loadModelTexture(this._textureManager);
        }
    }
    _postRegister() {
        for (let i = 0; i < this._currentNameOrderIndex; i++) {
            const b = this._blocksByNameOrder[i];
            this._modelRegistry._loadModel("block/" + b._name).then(function (model) {
                b._model = model;
            });
        }
    }
    _makeGlobalPalette(stated) {
        if (stated) {
            for (let i = 0; i < this._currentNameOrderIndex; i++) {
                const block = this._blocksByNameOrder[i];
                block._baseStateId = this._currentGlobalPaletteIndex;
                for (let state = 0; state < block._states; state++) {
                    const gi = this._currentGlobalPaletteIndex;
                    this._globalPalette[gi] = block;
                    this._globalPaletteOpaque[gi] = block._opaque ? 1 : 0;
                    this._currentGlobalPaletteIndex++;
                }
            }
        }
        else {
        }
    }
    _byLegacyId(id) {
        if (id < 0 || id >= 256) {
            return null;
        }
        return this._blocksByLegacyId[id];
    }
    _byStateId(id) {
        if (id < 0 || id >= this._currentGlobalPaletteIndex) {
            return null;
        }
        return this._globalPalette[id];
    }
    _registerBlocks(proto) {
        const registry = this;
        const h = new BlocksHelper_1._BlocksHelper();
        this._helper = h;
        const register = function (legacyId, legacyData, name, blockTypeInstance) {
            registry._registerBlock(legacyId, legacyData, name, blockTypeInstance);
            return blockTypeInstance;
        };
        const blockAir = new Blocks_1._AirBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._AIR, MaterialColor_1._MaterialColor._AIR)._setTranslucent());
        h._AIR = register(0, 0, "air", blockAir);
        const blockStone = new Blocks_1._StoneBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(1.5, 6));
        h._STONE = register(1, 0, "stone", blockStone);
        h._GRANITE = register(1, 1, "granite", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(1.5, 6)));
        h._POLISHED_GRANITE = register(1, 2, "polished_granite", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(1.5, 6)));
        h._DIORITE = register(1, 3, "diorite", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(1.5, 6)));
        h._POLISHED_DIORITE = register(1, 4, "polished_diorite", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(1.5, 6)));
        h._ANDESITE = register(1, 5, "andesite", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(1.5, 6)));
        h._POLISHED_ANDESITE = register(1, 6, "polished_andesite", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(1.5, 6)));
        h._GRASS_BLOCK = register(2, 0, "grass_block", new Blocks_1._GrassBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._GRASS)._needsRandomTick()._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._PLANT)));
        h._DIRT = register(3, 0, "dirt", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._GROUND, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._GROUND)));
        register(3, 1, "coarse_dirt", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._GROUND, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._GROUND)));
        register(3, 2, "podzol", new Blocks_1._SnowyDirtBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._GROUND, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._GROUND)));
        const block2 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(2, 6));
        register(4, 0, "cobblestone", block2);
        const block3 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._WOOD)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD));
        const block4 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD));
        const block5 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD));
        const block6 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD));
        const block7 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD));
        const block8 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD));
        register(5, 0, "oak_planks", block3);
        register(5, 1, "spruce_planks", block4);
        register(5, 2, "birch_planks", block5);
        register(5, 3, "jungle_planks", block6);
        register(5, 4, "acacia_planks", block7);
        register(5, 5, "dark_oak_planks", block8);
        const block9 = new Blocks_1._SaplingBlock(proto, new Blocks_1._OakTree(), BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const block10 = new Blocks_1._SaplingBlock(proto, new Blocks_1._SpruceTree(), BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const block11 = new Blocks_1._SaplingBlock(proto, new Blocks_1._BirchTree(), BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const block12 = new Blocks_1._SaplingBlock(proto, new Blocks_1._JungleTree(), BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const block13 = new Blocks_1._SaplingBlock(proto, new Blocks_1._AcaciaTree(), BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const block14 = new Blocks_1._SaplingBlock(proto, new Blocks_1._DarkOakTree(), BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        register(6, 0, "oak_sapling", block9);
        register(6, 1, "spruce_sapling", block10);
        register(6, 2, "birch_sapling", block11);
        register(6, 3, "jungle_sapling", block12);
        register(6, 4, "acacia_sapling", block13);
        register(6, 5, "dark_oak_sapling", block14);
        register(7, 0, "bedrock", new Blocks_1._EmptyDropsBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(-1, 3600000)));
        h._WATER = register(8, 0, "water", new Blocks_1._FlowingFluidBlock(proto, Blocks_1._Fluids._WATER, BlockProperties_1._BlockProperties._create(Material_1._Material._WATER)._setTranslucent()._hardnessAndResistance(100)));
        h._LAVA = register(10, 0, "lava", new Blocks_1._FlowingFluidBlock(proto, Blocks_1._Fluids._LAVA, BlockProperties_1._BlockProperties._create(Material_1._Material._LAVA)._setTranslucent()._needsRandomTick()._hardnessAndResistance(100)._lightValue(15)));
        register(12, 0, "sand", new Blocks_1._SandBlock(14406560, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
        register(12, 1, "red_sand", new Blocks_1._SandBlock(11098145, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
        register(13, 0, "gravel", new Blocks_1._GravelBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._GROUND)));
        register(14, 0, "gold_ore", new Blocks_1._OreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3, 3)));
        register(15, 0, "iron_ore", new Blocks_1._OreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3, 3)));
        register(16, 0, "coal_ore", new Blocks_1._OreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3, 3)));
        register(17, 0, "oak_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._WOOD, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2)._sound(SoundType_1._SoundType._WOOD)));
        register(17, 1, "spruce_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._OBSIDIAN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2)._sound(SoundType_1._SoundType._WOOD)));
        register(17, 2, "birch_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._SAND, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(2)._sound(SoundType_1._SoundType._WOOD)));
        register(17, 3, "jungle_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._DIRT, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2)._sound(SoundType_1._SoundType._WOOD)));
        register(162, 0, "acacia_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._ADOBE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(2)._sound(SoundType_1._SoundType._WOOD)));
        register(162, 1, "dark_oak_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_spruce_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._OBSIDIAN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_birch_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._SAND, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_jungle_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._DIRT, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_acacia_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._ADOBE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_dark_oak_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_oak_log", new Blocks_1._LogBlock(MaterialColor_1._MaterialColor._WOOD, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._WOOD)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "oak_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._WOOD)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "spruce_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "birch_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "jungle_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "acacia_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "dark_oak_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_oak_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._WOOD)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_spruce_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_birch_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_jungle_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_acacia_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(-1, -1, "stripped_dark_oak_wood", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)));
        register(18, 0, "oak_leaves", new Blocks_1._LeavesBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._LEAVES)._hardnessAndResistance(0.2)._needsRandomTick()._sound(SoundType_1._SoundType._PLANT)));
        register(18, 1, "spruce_leaves", new Blocks_1._LeavesBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._LEAVES)._hardnessAndResistance(0.2)._needsRandomTick()._sound(SoundType_1._SoundType._PLANT)));
        register(18, 2, "birch_leaves", new Blocks_1._LeavesBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._LEAVES)._hardnessAndResistance(0.2)._needsRandomTick()._sound(SoundType_1._SoundType._PLANT)));
        register(18, 3, "jungle_leaves", new Blocks_1._LeavesBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._LEAVES)._hardnessAndResistance(0.2)._needsRandomTick()._sound(SoundType_1._SoundType._PLANT)));
        register(161, 0, "acacia_leaves", new Blocks_1._LeavesBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._LEAVES)._hardnessAndResistance(0.2)._needsRandomTick()._sound(SoundType_1._SoundType._PLANT)));
        register(161, 1, "dark_oak_leaves", new Blocks_1._LeavesBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._LEAVES)._hardnessAndResistance(0.2)._needsRandomTick()._sound(SoundType_1._SoundType._PLANT)));
        register(19, 0, "sponge", new Blocks_1._SpongeBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._SPONGE)._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._PLANT)));
        register(19, 1, "wet_sponge", new Blocks_1._WetSpongeBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._SPONGE)._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._PLANT)));
        register(20, 0, "glass", new Blocks_1._GlassBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(21, 0, "lapis_ore", new Blocks_1._OreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3, 3)));
        register(22, 0, "lapis_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._LAPIS)._hardnessAndResistance(3, 3)));
        register(23, 0, "dispenser", new Blocks_1._DispenserBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3.5)));
        const blockSandstone = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(0.8));
        h._SANDSTONE = register(24, 0, "sandstone", blockSandstone);
        register(24, 1, "chiseled_sandstone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(0.8)));
        register(24, 2, "cut_sandstone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(0.8)));
        register(25, 0, "note_block", new Blocks_1._NoteBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.8)));
        register(-1, -1, "white_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._WHITE, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "orange_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._ORANGE, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "magenta_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._MAGENTA, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "light_blue_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._LIGHT_BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "yellow_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._YELLOW, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "lime_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._LIME, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "pink_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._PINK, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "gray_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "light_gray_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._LIGHT_GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "cyan_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._CYAN, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "purple_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._PURPLE, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "blue_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "brown_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "green_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._GREEN, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "red_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._RED, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(-1, -1, "black_bed", new Blocks_1._BedBlock(DyeColor_1._DyeColor._BLACK, BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH)._sound(SoundType_1._SoundType._WOOD)._hardnessAndResistance(0.2)));
        register(27, 0, "powered_rail", new Blocks_1._PoweredRailBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.7)._sound(SoundType_1._SoundType._METAL)));
        register(28, 0, "detector_rail", new Blocks_1._DetectorRailBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.7)._sound(SoundType_1._SoundType._METAL)));
        register(29, 0, "sticky_piston", new Blocks_1._PistonBlock(true, BlockProperties_1._BlockProperties._create(Material_1._Material._PISTON)._hardnessAndResistance(0.5)));
        register(30, 0, "cobweb", new Blocks_1._BlockWeb(BlockProperties_1._BlockProperties._create(Material_1._Material._WEB)._setTranslucent()._hardnessAndResistance(4)));
        const blockGrass = new Blocks_1._GrassBushBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const blockFern = new Blocks_1._FernBushBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const blockDeadBush = new Blocks_1._DeadBushBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE, MaterialColor_1._MaterialColor._WOOD)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        register(31, 1, "grass", blockGrass);
        register(31, 2, "fern", blockFern);
        register(31, 0, "dead_bush", blockDeadBush);
        if (proto >= 340) {
            let block19 = new Blocks_1._SeaGrassBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._SEA_GRASS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS));
            register(-1, -1, "seagrass", block19);
            register(-1, -1, "tall_seagrass", new Blocks_1._TallSeaGrassBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._SEA_GRASS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
        }
        register(33, 0, "piston", new Blocks_1._PistonBlock(false, BlockProperties_1._BlockProperties._create(Material_1._Material._PISTON)._hardnessAndResistance(0.5)));
        register(34, 0, "piston_head", new Blocks_1._BlockPistonExtension(BlockProperties_1._BlockProperties._create(Material_1._Material._PISTON)._hardnessAndResistance(0.5)));
        register(35, 0, "white_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._SNOW)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 1, "orange_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 2, "magenta_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._MAGENTA)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 3, "light_blue_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._LIGHT_BLUE)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 4, "yellow_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._YELLOW)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 5, "lime_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._LIME)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 6, "pink_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._PINK)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 7, "gray_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 8, "light_gray_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._LIGHT_GRAY)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 9, "cyan_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._CYAN)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 10, "purple_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._PURPLE)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 11, "blue_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._BLUE)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 12, "brown_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 13, "green_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._GREEN)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 14, "red_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(35, 15, "black_wool", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._CLOTH, MaterialColor_1._MaterialColor._BLACK)._hardnessAndResistance(0.8)._sound(SoundType_1._SoundType._CLOTH)));
        register(36, 0, "moving_piston", new Blocks_1._MovingPistonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PISTON)._hardnessAndResistance(-1.0)._variableOpacity()));
        const dandelion = new Blocks_1._FlowerBlock(Effects_1._Effects._SATURATION, 7, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const poppy = new Blocks_1._FlowerBlock(Effects_1._Effects._SPEED, 6, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const blue_orchid = new Blocks_1._FlowerBlock(Effects_1._Effects._SATURATION, 7, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const allium = new Blocks_1._FlowerBlock(Effects_1._Effects._FIRE_RESISTANCE, 4, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const azure_bluet = new Blocks_1._FlowerBlock(Effects_1._Effects._BLINDNESS, 8, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const red_tulip = new Blocks_1._FlowerBlock(Effects_1._Effects._WEAKNESS, 9, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const orange_tulip = new Blocks_1._FlowerBlock(Effects_1._Effects._WEAKNESS, 9, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const white_tulip = new Blocks_1._FlowerBlock(Effects_1._Effects._WEAKNESS, 9, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const pink_tulip = new Blocks_1._FlowerBlock(Effects_1._Effects._WEAKNESS, 9, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        const oxeye_daisy = new Blocks_1._FlowerBlock(Effects_1._Effects._REGENERATION, 8, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        register(37, 0, "dandelion", dandelion);
        register(38, 0, "poppy", poppy);
        register(38, 1, "blue_orchid", blue_orchid);
        register(38, 2, "allium", allium);
        register(38, 3, "azure_bluet", azure_bluet);
        register(38, 4, "red_tulip", red_tulip);
        register(38, 5, "orange_tulip", orange_tulip);
        register(38, 6, "white_tulip", white_tulip);
        register(38, 7, "pink_tulip", pink_tulip);
        register(38, 8, "oxeye_daisy", oxeye_daisy);
        if (proto >= 480) {
            h._CORNFLOWER = register(-1, -1, "cornflower", new Blocks_1._FlowerBlock(Effects_1._Effects._JUMP_BOOST, 6, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
            h._WITHER_ROSE = register(-1, -1, "wither_rose", new Blocks_1._WitherRoseBlock(Effects_1._Effects._WITHER, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
            h._LILY_OF_THE_VALLEY = register(-1, -1, "lily_of_the_valley", new Blocks_1._FlowerBlock(Effects_1._Effects._POISON, 12, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        }
        const block30 = new Blocks_1._MushroomBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)._lightValue(1));
        const block31 = new Blocks_1._MushroomBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT));
        register(39, 0, "brown_mushroom", block30);
        register(40, 0, "red_mushroom", block31);
        register(41, 0, "gold_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._GOLD)._hardnessAndResistance(3, 6)._sound(SoundType_1._SoundType._METAL)));
        register(42, 0, "iron_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._IRON)._hardnessAndResistance(5, 6)._sound(SoundType_1._SoundType._METAL)));
        const block32 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(2, 6));
        h._BRICKS = register(45, 0, "bricks", block32);
        register(46, 0, "tnt", new Blocks_1._TNTBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._TNT)._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(47, 0, "bookshelf", new Blocks_1._BookshelfBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(1.5)._sound(SoundType_1._SoundType._WOOD)));
        h._MOSSY_COBBLESTONE = register(48, 0, "mossy_cobblestone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(2, 6)));
        register(49, 0, "obsidian", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._BLACK)._hardnessAndResistance(50, 1200)));
        register(50, 0, "torch", new Blocks_1._TorchBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._zeroHardnessAndResistance()._lightValue(14)._sound(SoundType_1._SoundType._WOOD)));
        register(50, 1, "wall_torch", new Blocks_1._WallTorchBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._zeroHardnessAndResistance()._lightValue(14)._sound(SoundType_1._SoundType._WOOD)));
        register(51, 0, "fire", new Blocks_1._FireBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._FIRE, MaterialColor_1._MaterialColor._TNT)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._lightValue(15)._sound(SoundType_1._SoundType._CLOTH)));
        register(52, 0, "spawner", new Blocks_1._MobSpawnerBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(5)._sound(SoundType_1._SoundType._METAL)));
        register(53, 0, "oak_stairs", new Blocks_1._StairsBlock(block3, BlockProperties_1._BlockProperties._from(block3._prop)));
        register(54, 0, "chest", new Blocks_1._ChestBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
        register(55, 0, "redstone_wire", new Blocks_1._RedstoneWireBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._zeroHardnessAndResistance()));
        register(56, 0, "diamond_ore", new Blocks_1._OreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3, 3)));
        register(57, 0, "diamond_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._DIAMOND)._hardnessAndResistance(5, 6)._sound(SoundType_1._SoundType._METAL)));
        register(58, 0, "crafting_table", new Blocks_1._WorkbenchBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
        register(59, 0, "wheat", new Blocks_1._CropsBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        const block33 = new Blocks_1._FarmlandBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GROUND)._needsRandomTick()._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._GROUND));
        register(60, 0, "farmland", block33);
        register(61, 0, "furnace", new Blocks_1._FurnaceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3.5)._lightValue(13)));
        h._OAK_SIGN = register(63, 0, "oak_sign", new Blocks_1._StandingSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1)._sound(SoundType_1._SoundType._WOOD)));
        if (proto >= 480) {
            h._SPRUCE_SIGN = register(-1, -1, "spruce_sign", new Blocks_1._StandingSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
            h._BIRCH_SIGN = register(-1, -1, "birch_sign", new Blocks_1._StandingSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._SAND)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
            h._ACACIA_SIGN = register(-1, -1, "acacia_sign", new Blocks_1._StandingSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._ADOBE)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
            h._JUNGLE_SIGN = register(-1, -1, "jungle_sign", new Blocks_1._StandingSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
            h._DARK_OAK_SIGN = register(-1, -1, "dark_oak_sign", new Blocks_1._StandingSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        }
        h._OAK_DOOR = register(64, 0, "oak_door", new Blocks_1._DoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block3._prop._materialColor)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        h._LADDER = register(65, 0, "ladder", new Blocks_1._LadderBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(0.4)._sound(SoundType_1._SoundType._LADDER)));
        h._RAIL = register(66, 0, "rail", new Blocks_1._RailBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.7)._sound(SoundType_1._SoundType._METAL)));
        h._COBBLESTONE_STAIRS = register(67, 0, "cobblestone_stairs", new Blocks_1._StairsBlock(block2, BlockProperties_1._BlockProperties._from(block2._prop)));
        h._OAK_WALL_SIGN = register(68, 0, "oak_wall_sign", new Blocks_1._WallSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1)._sound(SoundType_1._SoundType._WOOD)));
        if (proto >= 480) {
            h._SPRUCE_WALL_SIGN = register(-1, -1, "spruce_wall_sign", new Blocks_1._WallSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)._lootFrom(h._SPRUCE_SIGN)));
            h._BIRCH_WALL_SIGN = register(-1, -1, "birch_wall_sign", new Blocks_1._WallSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)._lootFrom(h._BIRCH_SIGN)));
            h._ACACIA_WALL_SIGN = register(-1, -1, "acacia_wall_sign", new Blocks_1._WallSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)._lootFrom(h._ACACIA_SIGN)));
            h._JUNGLE_WALL_SIGN = register(-1, -1, "jungle_wall_sign", new Blocks_1._WallSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)._lootFrom(h._JUNGLE_SIGN)));
            h._DARK_OAK_WALL_SIGN = register(-1, -1, "dark_oak_wall_sign", new Blocks_1._WallSignBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)._lootFrom(h._DARK_OAK_SIGN)));
        }
        h._LEVER = register(69, 0, "lever", new Blocks_1._LeverBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        h._STONE_PRESSURE_PLATE = register(70, 0, "stone_pressure_plate", new Blocks_1._PressurePlateBlock(Blocks_1._PressureSensitivity._MOBS, BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._setTranslucent()._hardnessAndResistance(0.5)));
        h._IRON_DOOR = register(71, 0, "iron_door", new Blocks_1._DoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._IRON)._hardnessAndResistance(5)._sound(SoundType_1._SoundType._METAL)));
        register(72, 0, "oak_pressure_plate", new Blocks_1._PressurePlateBlock(Blocks_1._PressureSensitivity._EVERYTHING, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block3._prop._materialColor)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(72, 1, "spruce_pressure_plate", new Blocks_1._PressurePlateBlock(Blocks_1._PressureSensitivity._EVERYTHING, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block4._prop._materialColor)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(72, 2, "birch_pressure_plate", new Blocks_1._PressurePlateBlock(Blocks_1._PressureSensitivity._EVERYTHING, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block5._prop._materialColor)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(72, 3, "jungle_pressure_plate", new Blocks_1._PressurePlateBlock(Blocks_1._PressureSensitivity._EVERYTHING, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block6._prop._materialColor)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(72, 4, "acacia_pressure_plate", new Blocks_1._PressurePlateBlock(Blocks_1._PressureSensitivity._EVERYTHING, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block7._prop._materialColor)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(72, 5, "dark_oak_pressure_plate", new Blocks_1._PressurePlateBlock(Blocks_1._PressureSensitivity._EVERYTHING, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block8._prop._materialColor)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(73, 0, "redstone_ore", new Blocks_1._RedstoneOreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._needsRandomTick()._lightValue(9)._hardnessAndResistance(3, 3)));
        register(75, 0, "redstone_torch", new Blocks_1._RedstoneTorchBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._zeroHardnessAndResistance()._lightValue(7)._sound(SoundType_1._SoundType._WOOD)));
        register(75, 1, "redstone_wall_torch", new Blocks_1._WallRedstoneTorchBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._zeroHardnessAndResistance()._lightValue(7)._sound(SoundType_1._SoundType._WOOD)._lootFrom(h._REDSTONE_TORCH)));
        register(77, 0, "stone_button", new Blocks_1._StoneButtonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)));
        register(78, 0, "snow", new Blocks_1._SnowLayerBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._SNOW)._needsRandomTick()._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._SNOW)));
        register(79, 0, "ice", new Blocks_1._IceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ICE)._slipperiness(0.98)._needsRandomTick()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._GLASS)));
        register(80, 0, "snow_block", new Blocks_1._SnowBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CRAFTED_SNOW)._needsRandomTick()._hardnessAndResistance(0.2)._sound(SoundType_1._SoundType._SNOW)));
        const block34 = new Blocks_1._CactusBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CACTUS)._needsRandomTick()._hardnessAndResistance(0.4)._sound(SoundType_1._SoundType._CLOTH));
        register(81, 0, "cactus", block34);
        register(82, 0, "clay", new Blocks_1._ClayBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY)._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._GROUND)));
        register(83, 0, "sugar_cane", new Blocks_1._SugarCaneBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(84, 0, "jukebox", new Blocks_1._JukeboxBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(2, 6)));
        register(85, 0, "oak_fence", new Blocks_1._FenceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block3._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        const blockstemgrown = new Blocks_1._PumpkinBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GOURD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(1)._sound(SoundType_1._SoundType._WOOD));
        register(86, 0, "pumpkin", blockstemgrown);
        register(87, 0, "netherrack", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._NETHERRACK)._hardnessAndResistance(0.4)));
        register(88, 0, "soul_sand", new Blocks_1._SoulSandBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, MaterialColor_1._MaterialColor._BROWN)._needsRandomTick()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
        register(89, 0, "glowstone", new Blocks_1._GlowstoneBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)._lightValue(15)));
        register(90, 0, "nether_portal", new Blocks_1._PortalBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PORTAL)._setTranslucent()._needsRandomTick()._hardnessAndResistance(-1)._sound(SoundType_1._SoundType._GLASS)._lightValue(11)));
        register(91, 4, "carved_pumpkin", new Blocks_1._CarvedPumpkinBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GOURD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(1)._sound(SoundType_1._SoundType._WOOD)));
        register(91, 0, "jack_o_lantern", new Blocks_1._CarvedPumpkinBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GOURD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(1)._sound(SoundType_1._SoundType._WOOD)._lightValue(15)));
        register(92, 0, "cake", new Blocks_1._CakeBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CAKE)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._CLOTH)));
        register(93, 0, "repeater", new Blocks_1._RepeaterBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WOOD)));
        register(95, 0, "white_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._WHITE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._WHITE)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 1, "orange_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._ORANGE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._ORANGE)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 2, "magenta_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._MAGENTA, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._MAGENTA)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 3, "light_blue_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._LIGHT_BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._LIGHT_BLUE)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 4, "yellow_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._YELLOW, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._YELLOW)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 5, "lime_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._LIME, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._LIME)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 6, "pink_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._PINK, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._PINK)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 7, "gray_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._GRAY)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 8, "light_gray_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._LIGHT_GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._LIGHT_GRAY)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 9, "cyan_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._CYAN, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._CYAN)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 10, "purple_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._PURPLE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._PURPLE)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 11, "blue_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._BLUE)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 12, "brown_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._BROWN)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 13, "green_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._GREEN, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._GREEN)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 14, "red_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._RED, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._RED)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(95, 15, "black_stained_glass", new Blocks_1._StainedGlassBlock(DyeColor_1._DyeColor._BLACK, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, DyeColor_1._DyeColor._BLACK)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(96, 0, "oak_trapdoor", new Blocks_1._TrapDoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._WOOD)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(96, 1, "spruce_trapdoor", new Blocks_1._TrapDoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(96, 2, "birch_trapdoor", new Blocks_1._TrapDoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(96, 3, "jungle_trapdoor", new Blocks_1._TrapDoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(96, 4, "acacia_trapdoor", new Blocks_1._TrapDoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(96, 5, "dark_oak_trapdoor", new Blocks_1._TrapDoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        h._STONE_BRICKS = register(98, 0, "stone_bricks", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(1.5, 6)));
        h._MOSSY_STONE_BRICKS = register(98, 1, "mossy_stone_bricks", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(1.5, 6)));
        h._CRACKED_STONE_BRICKS = register(98, 2, "cracked_stone_bricks", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(1.5, 6)));
        h._CHISELED_STONE_BRICKS = register(98, 3, "chiseled_stone_bricks", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(1.5, 6)));
        register(97, 0, "infested_stone", new Blocks_1._SilverfishBlock(blockStone, BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY)._hardnessAndResistance(0, 0.75)));
        register(97, 1, "infested_cobblestone", new Blocks_1._SilverfishBlock(block2, BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY)._hardnessAndResistance(0, 0.75)));
        register(97, 2, "infested_stone_bricks", new Blocks_1._SilverfishBlock(h._STONE_BRICKS, BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY)._hardnessAndResistance(0, 0.75)));
        register(97, 3, "infested_mossy_stone_bricks", new Blocks_1._SilverfishBlock(h._MOSSY_STONE_BRICKS, BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY)._hardnessAndResistance(0, 0.75)));
        register(97, 4, "infested_cracked_stone_bricks", new Blocks_1._SilverfishBlock(h._CRACKED_STONE_BRICKS, BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY)._hardnessAndResistance(0, 0.75)));
        register(97, 5, "infested_chiseled_stone_bricks", new Blocks_1._SilverfishBlock(h._CHISELED_STONE_BRICKS, BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY)._hardnessAndResistance(0, 0.75)));
        const block39 = new Blocks_1._HugeMushroomBlock(block30, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(0.2)._sound(SoundType_1._SoundType._WOOD));
        register(99, 0, "brown_mushroom_block", block39);
        const block40 = new Blocks_1._HugeMushroomBlock(block31, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(0.2)._sound(SoundType_1._SoundType._WOOD));
        register(100, 0, "red_mushroom_block", block40);
        register(-1, -1, "mushroom_stem", new Blocks_1._HugeMushroomBlock(null, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._WHITE_TERRACOTTA)._hardnessAndResistance(0.2)._sound(SoundType_1._SoundType._WOOD)));
        register(101, 0, "iron_bars", new Blocks_1._PaneBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._AIR)._hardnessAndResistance(5, 6)._sound(SoundType_1._SoundType._METAL)));
        register(102, 0, "glass_pane", new Blocks_1._GlassPaneBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        const blockstemgrown1 = new Blocks_1._MelonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GOURD, MaterialColor_1._MaterialColor._LIME)._hardnessAndResistance(1)._sound(SoundType_1._SoundType._WOOD));
        register(103, 0, "melon", blockstemgrown1);
        register(104, 0, "pumpkin_stem", new Blocks_1._StemBlock(blockstemgrown, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WOOD)));
        register(105, 0, "melon_stem", new Blocks_1._StemBlock(blockstemgrown1, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WOOD)));
        register(104, 1, "attached_pumpkin_stem", new Blocks_1._AttachedStemBlock(blockstemgrown, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WOOD)));
        register(105, 1, "attached_melon_stem", new Blocks_1._AttachedStemBlock(blockstemgrown1, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WOOD)));
        register(106, 0, "vine", new Blocks_1._VineBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._needsRandomTick()._hardnessAndResistance(0.2)._sound(SoundType_1._SoundType._PLANT)));
        register(107, 0, "oak_fence_gate", new Blocks_1._FenceGateBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block3._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(108, 0, "brick_stairs", new Blocks_1._StairsBlock(block32._getDefaultState(), BlockProperties_1._BlockProperties._from(block32._prop)));
        register(109, 0, "stone_brick_stairs", new Blocks_1._StairsBlock(h._STONE_BRICKS._getDefaultState(), BlockProperties_1._BlockProperties._from(h._STONE_BRICKS._prop)));
        register(110, 0, "mycelium", new Blocks_1._MyceliumBlock(proto, BlockProperties_1._BlockProperties._create(Material_1._Material._GRASS, MaterialColor_1._MaterialColor._PURPLE)._needsRandomTick()._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._PLANT)));
        register(111, 0, "lily_pad", new Blocks_1._LilyPadBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        const block41 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._NETHERRACK)._hardnessAndResistance(2, 6));
        h._NETHER_BRICKS = register(112, 0, "nether_bricks", block41);
        register(113, 0, "nether_brick_fence", new Blocks_1._FenceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._NETHERRACK)._hardnessAndResistance(2, 6)));
        register(114, 0, "nether_brick_stairs", new Blocks_1._StairsBlock(block41._getDefaultState(), BlockProperties_1._BlockProperties._from(block41._prop)));
        register(115, 0, "nether_wart", new Blocks_1._NetherWartBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS, MaterialColor_1._MaterialColor._RED)._setTranslucent()._needsRandomTick()));
        register(116, 0, "enchanting_table", new Blocks_1._EnchantmentTableBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(5, 1200)));
        register(117, 0, "brewing_stand", new Blocks_1._BrewingStandBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON)._hardnessAndResistance(0.5)._lightValue(1)));
        register(118, 0, "cauldron", new Blocks_1._CauldronBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(2)));
        register(119, 0, "end_portal", new Blocks_1._EndPortalBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PORTAL, MaterialColor_1._MaterialColor._BLACK)._setTranslucent()._lightValue(15)._hardnessAndResistance(-1, 3600000)));
        register(120, 0, "end_portal_frame", new Blocks_1._EndPortalFrameBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GREEN)._sound(SoundType_1._SoundType._GLASS)._lightValue(1)._hardnessAndResistance(-1, 3600000)));
        register(121, 0, "end_stone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(3, 9)));
        register(122, 0, "dragon_egg", new Blocks_1._DragonEggBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._DRAGON_EGG, MaterialColor_1._MaterialColor._BLACK)._hardnessAndResistance(3, 9)._lightValue(1)));
        register(123, 0, "redstone_lamp", new Blocks_1._RedstoneLampBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._REDSTONE_LIGHT)._lightValue(15)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(127, 0, "cocoa", new Blocks_1._CocoaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._needsRandomTick()._hardnessAndResistance(0.2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(128, 0, "sandstone_stairs", new Blocks_1._StairsBlock(blockSandstone._getDefaultState(), BlockProperties_1._BlockProperties._from(blockSandstone._prop)));
        register(129, 0, "emerald_ore", new Blocks_1._OreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3, 3)));
        register(130, 0, "ender_chest", new Blocks_1._EnderChestBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(22.5, 600)._lightValue(7)));
        const blocktripwirehook = new Blocks_1._TripWireHookBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent());
        register(131, 0, "tripwire_hook", blocktripwirehook);
        register(132, 0, "tripwire", new Blocks_1._TripWireBlock(blocktripwirehook, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()));
        register(133, 0, "emerald_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._EMERALD)._hardnessAndResistance(5, 6)._sound(SoundType_1._SoundType._METAL)));
        register(134, 0, "spruce_stairs", new Blocks_1._StairsBlock(block4._getDefaultState(), BlockProperties_1._BlockProperties._from(block4._prop)));
        register(135, 0, "birch_stairs", new Blocks_1._StairsBlock(block5._getDefaultState(), BlockProperties_1._BlockProperties._from(block5._prop)));
        register(136, 0, "jungle_stairs", new Blocks_1._StairsBlock(block6._getDefaultState(), BlockProperties_1._BlockProperties._from(block6._prop)));
        register(137, 0, "command_block", new Blocks_1._CommandBlockBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(-1, 3600000)));
        register(138, 0, "beacon", new Blocks_1._BeaconBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, MaterialColor_1._MaterialColor._DIAMOND)._hardnessAndResistance(3)._lightValue(15)));
        register(139, 0, "cobblestone_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(block2._prop)));
        register(139, 1, "mossy_cobblestone_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(block2._prop)));
        register(140, 0, "flower_pot", new Blocks_1._FlowerPotBlock(blockAir, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 1, "potted_oak_sapling", new Blocks_1._FlowerPotBlock(block9, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 2, "potted_spruce_sapling", new Blocks_1._FlowerPotBlock(block10, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 3, "potted_birch_sapling", new Blocks_1._FlowerPotBlock(block11, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 4, "potted_jungle_sapling", new Blocks_1._FlowerPotBlock(block12, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 5, "potted_acacia_sapling", new Blocks_1._FlowerPotBlock(block13, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 6, "potted_dark_oak_sapling", new Blocks_1._FlowerPotBlock(block14, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 7, "potted_fern", new Blocks_1._FlowerPotBlock(blockFern, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 8, "potted_dandelion", new Blocks_1._FlowerPotBlock(dandelion, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 9, "potted_poppy", new Blocks_1._FlowerPotBlock(poppy, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 10, "potted_blue_orchid", new Blocks_1._FlowerPotBlock(blue_orchid, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 11, "potted_allium", new Blocks_1._FlowerPotBlock(allium, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 12, "potted_azure_bluet", new Blocks_1._FlowerPotBlock(azure_bluet, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 13, "potted_red_tulip", new Blocks_1._FlowerPotBlock(red_tulip, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 14, "potted_orange_tulip", new Blocks_1._FlowerPotBlock(orange_tulip, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        register(140, 15, "potted_white_tulip", new Blocks_1._FlowerPotBlock(white_tulip, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        if (proto >= 340) {
            h._PINK_TULIP = register(-1, -1, "potted_pink_tulip", new Blocks_1._FlowerPotBlock(pink_tulip, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
            h._OXEYE_DAISY = register(-1, -1, "potted_oxeye_daisy", new Blocks_1._FlowerPotBlock(oxeye_daisy, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
            h._POTTED_CORNFLOWER = register(-1, -1, "potted_cornflower", new Blocks_1._FlowerPotBlock(h._CORNFLOWER, BlockProperties_1._BlockProperties._create(Material_1._Material._MISCELLANEOUS)._zeroHardnessAndResistance()));
            h._POTTED_LILY_OF_THE_VALLEY = register(-1, -1, "potted_lily_of_the_valley", new Blocks_1._FlowerPotBlock(h._LILY_OF_THE_VALLEY, BlockProperties_1._BlockProperties._create(Material_1._Material._MISCELLANEOUS)._zeroHardnessAndResistance()));
            h._POTTED_WITHER_ROSE = register(-1, -1, "potted_wither_rose", new Blocks_1._FlowerPotBlock(h._WITHER_ROSE, BlockProperties_1._BlockProperties._create(Material_1._Material._MISCELLANEOUS)._zeroHardnessAndResistance()));
            h._POTTED_RED_MUSHROOM = register(-1, -1, "potted_red_mushroom", new Blocks_1._FlowerPotBlock(block31, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
            h._POTTED_BROWN_MUSHROOM = register(-1, -1, "potted_brown_mushroom", new Blocks_1._FlowerPotBlock(block30, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
            h._POTTED_DEAD_BUSH = register(-1, -1, "potted_dead_bush", new Blocks_1._FlowerPotBlock(blockDeadBush, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
            h._POTTED_CACTUS = register(-1, -1, "potted_cactus", new Blocks_1._FlowerPotBlock(block34, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()));
        }
        register(141, 0, "carrots", new Blocks_1._CarrotBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(142, 0, "potatoes", new Blocks_1._PotatoBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._needsRandomTick()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(143, 0, "oak_button", new Blocks_1._WoodButtonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(143, 1, "spruce_button", new Blocks_1._WoodButtonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(143, 2, "birch_button", new Blocks_1._WoodButtonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(143, 3, "jungle_button", new Blocks_1._WoodButtonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(143, 4, "acacia_button", new Blocks_1._WoodButtonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(143, 5, "dark_oak_button", new Blocks_1._WoodButtonBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(144, 0, "skeleton_wall_skull", new Blocks_1._WallSkullBlock(Blocks_1._SkullBlock._Types._SKELETON, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 1, "skeleton_skull", new Blocks_1._SkullBlock(Blocks_1._SkullBlock._Types._SKELETON, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 2, "wither_skeleton_wall_skull", new Blocks_1._WitherWallSkullBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 3, "wither_skeleton_skull", new Blocks_1._WitherSkullBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 4, "zombie_wall_head", new Blocks_1._WallSkullBlock(Blocks_1._SkullBlock._Types._ZOMBIE, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 5, "zombie_head", new Blocks_1._SkullBlock(Blocks_1._SkullBlock._Types._ZOMBIE, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 6, "player_wall_head", new Blocks_1._PlayerWallSkullBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 7, "player_head", new Blocks_1._PlayerSkullBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 8, "creeper_wall_head", new Blocks_1._WallSkullBlock(Blocks_1._SkullBlock._Types._CREEPER, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 9, "creeper_head", new Blocks_1._SkullBlock(Blocks_1._SkullBlock._Types._CREEPER, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 10, "dragon_wall_head", new Blocks_1._WallSkullBlock(Blocks_1._SkullBlock._Types._DRAGON, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(144, 11, "dragon_head", new Blocks_1._SkullBlock(Blocks_1._SkullBlock._Types._DRAGON, BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._hardnessAndResistance(1)));
        register(145, 0, "anvil", new Blocks_1._BlockAnvil(BlockProperties_1._BlockProperties._create(Material_1._Material._ANVIL, MaterialColor_1._MaterialColor._IRON)._hardnessAndResistance(5, 1200)._sound(SoundType_1._SoundType._ANVIL)));
        register(145, 1, "chipped_anvil", new Blocks_1._BlockAnvil(BlockProperties_1._BlockProperties._create(Material_1._Material._ANVIL, MaterialColor_1._MaterialColor._IRON)._hardnessAndResistance(5, 1200)._sound(SoundType_1._SoundType._ANVIL)));
        register(145, 2, "damaged_anvil", new Blocks_1._BlockAnvil(BlockProperties_1._BlockProperties._create(Material_1._Material._ANVIL, MaterialColor_1._MaterialColor._IRON)._hardnessAndResistance(5, 1200)._sound(SoundType_1._SoundType._ANVIL)));
        register(146, 0, "trapped_chest", new Blocks_1._TrappedChestBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
        register(147, 0, "light_weighted_pressure_plate", new Blocks_1._WeightedPressurePlateBlock(15, BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._GOLD)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(148, 0, "heavy_weighted_pressure_plate", new Blocks_1._WeightedPressurePlateBlock(150, BlockProperties_1._BlockProperties._create(Material_1._Material._IRON)._setTranslucent()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._WOOD)));
        register(149, 0, "comparator", new Blocks_1._BlockRedstoneComparator(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WOOD)));
        register(151, 0, "daylight_detector", new Blocks_1._BlockDaylightDetector(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(0.2)._sound(SoundType_1._SoundType._WOOD)));
        register(152, 0, "redstone_block", new Blocks_1._BlockRedstone(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._TNT)._hardnessAndResistance(5, 6)._sound(SoundType_1._SoundType._METAL)));
        register(153, 0, "nether_quartz_ore", new Blocks_1._OreBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._NETHERRACK)._hardnessAndResistance(3, 3)));
        register(154, 0, "hopper", new Blocks_1._BlockHopper(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(3, 4.8)._sound(SoundType_1._SoundType._METAL)));
        const block42 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(0.8));
        register(155, 0, "quartz_block", block42);
        register(155, 1, "chiseled_quartz_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(0.8)));
        register(155, 2, "quartz_pillar", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(0.8)));
        register(156, 0, "quartz_stairs", new Blocks_1._StairsBlock(block42._getDefaultState(), BlockProperties_1._BlockProperties._from(block42._prop)));
        register(157, 0, "activator_rail", new Blocks_1._PoweredRailBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._setTranslucent()._hardnessAndResistance(0.7)._sound(SoundType_1._SoundType._METAL)));
        register(158, 0, "dropper", new Blocks_1._BlockDropper(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3.5)));
        register(159, 0, "white_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._WHITE_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 1, "orange_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ORANGE_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 2, "magenta_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._MAGENTA_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 3, "light_blue_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._LIGHT_BLUE_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 4, "yellow_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._YELLOW_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 5, "lime_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._LIME_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 6, "pink_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._PINK_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 7, "gray_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 8, "light_gray_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._LIGHT_GRAY_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 9, "cyan_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._CYAN_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 10, "purple_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._PURPLE_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 11, "blue_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._BLUE_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 12, "brown_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._BROWN_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 13, "green_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GREEN_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 14, "red_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._RED_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(159, 15, "black_terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._BLACK_TERRACOTTA)._hardnessAndResistance(1.25, 4.2)));
        register(160, 0, "white_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._WHITE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 1, "orange_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._ORANGE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 2, "magenta_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._MAGENTA, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 3, "light_blue_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._LIGHT_BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 4, "yellow_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._YELLOW, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 5, "lime_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._LIME, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 6, "pink_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._PINK, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 7, "gray_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 8, "light_gray_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._LIGHT_GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 9, "cyan_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._CYAN, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 10, "purple_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._PURPLE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 11, "blue_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 12, "brown_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 13, "green_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._GREEN, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 14, "red_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._RED, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(160, 15, "black_stained_glass_pane", new Blocks_1._StainedGlassPaneBlock(DyeColor_1._DyeColor._BLACK, BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)));
        register(163, 0, "acacia_stairs", new Blocks_1._StairsBlock(block7._getDefaultState(), BlockProperties_1._BlockProperties._from(block7._prop)));
        register(164, 0, "dark_oak_stairs", new Blocks_1._StairsBlock(block8._getDefaultState(), BlockProperties_1._BlockProperties._from(block8._prop)));
        register(165, 0, "slime_block", new Blocks_1._SlimeBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CLAY, MaterialColor_1._MaterialColor._GRASS)._slipperiness(0.8)._sound(SoundType_1._SoundType._SLIME)));
        register(166, 0, "barrier", new Blocks_1._BarrierBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._BARRIER)._hardnessAndResistance(-1, 3600000.8)));
        register(167, 0, "iron_trapdoor", new Blocks_1._TrapDoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON)._hardnessAndResistance(5)._sound(SoundType_1._SoundType._METAL)));
        const block43 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._CYAN)._hardnessAndResistance(1.5, 6));
        h._PRISMARINE = register(168, 0, "prismarine", block43);
        const block44 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._DIAMOND)._hardnessAndResistance(1.5, 6));
        h._PRISMARINE_BRICKS = register(168, 1, "prismarine_bricks", block44);
        const block45 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._DIAMOND)._hardnessAndResistance(1.5, 6));
        h._DARK_PRISMARINE = register(168, 2, "dark_prismarine", block45);
        if (proto >= 340) {
            register(-1, -1, "prismarine_stairs", new Blocks_1._StairsBlock(block43._getDefaultState(), BlockProperties_1._BlockProperties._from(block43._prop)));
            register(-1, -1, "prismarine_brick_stairs", new Blocks_1._StairsBlock(block44._getDefaultState(), BlockProperties_1._BlockProperties._from(block44._prop)));
            register(-1, -1, "dark_prismarine_stairs", new Blocks_1._StairsBlock(block45._getDefaultState(), BlockProperties_1._BlockProperties._from(block45._prop)));
            register(-1, -1, "prismarine_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._CYAN)._hardnessAndResistance(1.5, 6.0)));
            register(-1, -1, "prismarine_brick_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._DIAMOND)._hardnessAndResistance(1.5, 6.0)));
            register(-1, -1, "dark_prismarine_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._DIAMOND)._hardnessAndResistance(1.5, 6.0)));
        }
        register(169, 0, "sea_lantern", new Blocks_1._SeaLanternBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(0.3)._sound(SoundType_1._SoundType._GLASS)._lightValue(15)));
        register(170, 0, "hay_block", new Blocks_1._HayBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GRASS, MaterialColor_1._MaterialColor._YELLOW)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._PLANT)));
        register(171, 0, "white_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._WHITE, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._SNOW)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 1, "orange_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._ORANGE, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 2, "magenta_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._MAGENTA, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._MAGENTA)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 3, "light_blue_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._LIGHT_BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._LIGHT_BLUE)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 4, "yellow_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._YELLOW, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._YELLOW)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 5, "lime_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._LIME, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._LIME)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 6, "pink_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._PINK, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._PINK)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 7, "gray_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 8, "light_gray_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._LIGHT_GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._LIGHT_GRAY)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 9, "cyan_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._CYAN, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._CYAN)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 10, "purple_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._PURPLE, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._PURPLE)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 11, "blue_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._BLUE)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 12, "brown_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 13, "green_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._GREEN, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._GREEN)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 14, "red_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._RED, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(171, 15, "black_carpet", new Blocks_1._BlockCarpet(DyeColor_1._DyeColor._BLACK, BlockProperties_1._BlockProperties._create(Material_1._Material._CARPET, MaterialColor_1._MaterialColor._BLACK)._hardnessAndResistance(0.1)._sound(SoundType_1._SoundType._CLOTH)));
        register(172, 0, "terracotta", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(1.25, 4.2)));
        register(173, 0, "coal_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._BLACK)._hardnessAndResistance(5, 6)));
        register(174, 0, "packed_ice", new Blocks_1._BlockPackedIce(BlockProperties_1._BlockProperties._create(Material_1._Material._PACKED_ICE)._slipperiness(0.98)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._GLASS)));
        register(175, 0, "sunflower", new Blocks_1._BlockTallFlower(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(175, 1, "lilac", new Blocks_1._BlockTallFlower(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(175, 4, "rose_bush", new Blocks_1._BlockTallFlower(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(175, 5, "peony", new Blocks_1._BlockTallFlower(BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(175, 2, "tall_grass", new Blocks_1._BlockShearableDoublePlant(blockGrass, BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(175, 3, "large_fern", new Blocks_1._BlockShearableDoublePlant(blockFern, BlockProperties_1._BlockProperties._create(Material_1._Material._VINE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._PLANT)));
        register(176, 0, "white_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._WHITE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 1, "orange_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._ORANGE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 2, "magenta_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._MAGENTA, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 3, "light_blue_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._LIGHT_BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 4, "yellow_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._YELLOW, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 5, "lime_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._LIME, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 6, "pink_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._PINK, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 7, "gray_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 8, "light_gray_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._LIGHT_GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 9, "cyan_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._CYAN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 10, "purple_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._PURPLE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 11, "blue_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 12, "brown_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 13, "green_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._GREEN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 14, "red_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._RED, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(176, 15, "black_banner", new Blocks_1._BannerBlock(DyeColor_1._DyeColor._BLACK, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 0, "white_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._WHITE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 1, "orange_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._ORANGE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 2, "magenta_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._MAGENTA, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 3, "light_blue_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._LIGHT_BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 4, "yellow_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._YELLOW, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 5, "lime_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._LIME, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 6, "pink_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._PINK, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 7, "gray_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 8, "light_gray_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._LIGHT_GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 9, "cyan_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._CYAN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 10, "purple_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._PURPLE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 11, "blue_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 12, "brown_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 13, "green_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._GREEN, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 14, "red_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._RED, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        register(177, 15, "black_wall_banner", new Blocks_1._WallBannerBlock(DyeColor_1._DyeColor._BLACK, BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
        const block46 = new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(0.8));
        h._RED_SANDSTONE = register(179, 0, "red_sandstone", block46);
        h._CHISELED_SANDSTONE = register(179, 1, "chiseled_red_sandstone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(0.8)));
        h._CUT_RED_SANDSTONE = register(179, 2, "cut_red_sandstone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(0.8)));
        register(180, 0, "red_sandstone_stairs", new Blocks_1._StairsBlock(block46._getDefaultState(), BlockProperties_1._BlockProperties._from(block46._prop)));
        register(126, 0, "oak_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._WOOD)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(126, 1, "spruce_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(126, 2, "birch_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(126, 3, "jungle_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._DIRT)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(126, 4, "acacia_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(126, 5, "dark_oak_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(44, 0, "stone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(2, 6)));
        if (proto >= 480) {
            register(-1, -1, "smooth_stone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(2, 6)));
        }
        register(44, 1, "sandstone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2, 6)));
        if (proto >= 480) {
            register(-1, -1, "cut_sandstone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2, 6)));
        }
        register(44, 2, "petrified_oak_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._WOOD)._hardnessAndResistance(2, 6)));
        register(44, 3, "cobblestone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(2, 6)));
        register(44, 4, "brick_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(2, 6)));
        register(44, 5, "stone_brick_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(2, 6)));
        register(44, 6, "nether_brick_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._NETHERRACK)._hardnessAndResistance(2, 6)));
        register(44, 7, "quartz_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(2, 6)));
        register(44, 8, "red_sandstone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2, 6)));
        if (proto >= 480) {
            register(-1, -1, "cut_red_sandstone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2, 6)));
        }
        register(-1, -1, "purpur_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._MAGENTA)._hardnessAndResistance(2.0, 6.0)));
        h._SMOOTH_STONE = register(-1, -1, "smooth_stone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._STONE)._hardnessAndResistance(2.0, 6.0)));
        h._SMOOTH_SANDSTONE = register(-1, -1, "smooth_sandstone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2.0, 6.0)));
        h._SMOOTH_QUARTZ = register(-1, -1, "smooth_quartz", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._QUARTZ)._hardnessAndResistance(2.0, 6.0)));
        h._SMOOTH_RED_SANDSTONE = register(-1, -1, "smooth_red_sandstone", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2.0, 6.0)));
        register(107, 1, "spruce_fence_gate", new Blocks_1._FenceGateBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block4._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(107, 2, "birch_fence_gate", new Blocks_1._FenceGateBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block5._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(107, 3, "jungle_fence_gate", new Blocks_1._FenceGateBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block6._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(107, 4, "acacia_fence_gate", new Blocks_1._FenceGateBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block7._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(107, 5, "dark_oak_fence_gate", new Blocks_1._FenceGateBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block8._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(85, 1, "spruce_fence", new Blocks_1._FenceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block4._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(85, 2, "birch_fence", new Blocks_1._FenceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block5._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(85, 3, "jungle_fence", new Blocks_1._FenceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block6._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(85, 4, "acacia_fence", new Blocks_1._FenceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block7._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(85, 5, "dark_oak_fence", new Blocks_1._FenceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block8._prop._materialColor)._hardnessAndResistance(2, 3)._sound(SoundType_1._SoundType._WOOD)));
        register(64, 1, "spruce_door", new Blocks_1._DoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block4._prop._materialColor)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(64, 2, "birch_door", new Blocks_1._DoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block5._prop._materialColor)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(64, 3, "jungle_door", new Blocks_1._DoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block6._prop._materialColor)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(64, 4, "acacia_door", new Blocks_1._DoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block7._prop._materialColor)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        register(64, 5, "dark_oak_door", new Blocks_1._DoorBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, block8._prop._materialColor)._hardnessAndResistance(3)._sound(SoundType_1._SoundType._WOOD)));
        if (proto >= 107) {
            h._END_ROD = register(-1, -1, "end_rod", new Blocks_1._EndRodBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._CIRCUITS)._zeroHardnessAndResistance()._lightValue(14)._sound(SoundType_1._SoundType._WOOD)));
            h._CHORUS_PLANT = register(-1, -1, "chorus_plant", new Blocks_1._ChorusPlantBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS, MaterialColor_1._MaterialColor._PURPLE)._hardnessAndResistance(0.4)._sound(SoundType_1._SoundType._WOOD)));
            h._CHORUS_FLOWER = register(-1, -1, "chorus_flower", new Blocks_1._ChorusFlowerBlock(h._CHORUS_PLANT, BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS, MaterialColor_1._MaterialColor._PURPLE)._tickRandomly()._hardnessAndResistance(0.4)._sound(SoundType_1._SoundType._WOOD)));
            h._PURPUR_BLOCK = register(-1, -1, "purpur_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._MAGENTA)._hardnessAndResistance(1.5, 6.0)));
            h._PURPUR_PILLAR = register(-1, -1, "purpur_pillar", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._MAGENTA)._hardnessAndResistance(1.5, 6.0)));
            h._PURPUR_STAIRS = register(-1, -1, "purpur_stairs", new Blocks_1._StairsBlock(h._PURPUR_BLOCK._getDefaultState(), BlockProperties_1._BlockProperties._from(h._PURPUR_BLOCK._prop)));
            h._END_STONE_BRICKS = register(-1, -1, "end_stone_bricks", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(0.8)));
            h._BEETROOTS = register(-1, -1, "beetroots", new Blocks_1._BeetrootBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._setTranslucent()._tickRandomly()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._CROP)));
            h._GRASS_PATH = register(-1, -1, "grass_path", new Blocks_1._GrassPathBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._EARTH)._hardnessAndResistance(0.65)._sound(SoundType_1._SoundType._PLANT)));
            h._END_GATEWAY = register(-1, -1, "end_gateway", new Blocks_1._EndGatewayBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PORTAL, MaterialColor_1._MaterialColor._BLACK)._setTranslucent()._lightValue(15)._hardnessAndResistance(-1.0, 3600000.0)._noDrops()));
            h._REPEATING_COMMAND_BLOCK = register(-1, -1, "repeating_command_block", new Blocks_1._CommandBlockBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._PURPLE)._hardnessAndResistance(-1.0, 3600000.0)._noDrops()));
            h._CHAIN_COMMAND_BLOCK = register(-1, -1, "chain_command_block", new Blocks_1._CommandBlockBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._GREEN)._hardnessAndResistance(-1.0, 3600000.0)._noDrops()));
            h._FROSTED_ICE = register(-1, -1, "frosted_ice", new Blocks_1._FrostedIceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ICE)._slipperiness(0.98)._tickRandomly()._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._GLASS)));
            h._MAGMA_BLOCK = register(-1, -1, "magma_block", new Blocks_1._MagmaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._NETHERRACK)._lightValue(3)._tickRandomly()._hardnessAndResistance(0.5)));
            h._NETHER_WART_BLOCK = register(-1, -1, "nether_wart_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ORGANIC, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._WOOD)));
            h._RED_NETHER_BRICKS = register(-1, -1, "red_nether_bricks", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._NETHERRACK)._hardnessAndResistance(2.0, 6.0)));
            h._BONE_BLOCK = register(-1, -1, "bone_block", new Blocks_1._RotatedPillarBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(2.0)));
            h._STRUCTURE_VOID = register(-1, -1, "structure_void", new Blocks_1._StructureVoidBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._STRUCTURE_VOID)._setTranslucent()._noDrops()));
            h._OBSERVER = register(-1, -1, "observer", new Blocks_1._ObserverBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3.0)));
            h._SHULKER_BOX = register(-1, -1, "shulker_box", new Blocks_1._ShulkerBoxBlock(-1, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER)._hardnessAndResistance(2.0)._variableOpacity()));
            h._WHITE_SHULKER_BOX = register(-1, -1, "white_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._WHITE, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._SNOW)._hardnessAndResistance(2.0)._variableOpacity()));
            h._ORANGE_SHULKER_BOX = register(-1, -1, "orange_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._ORANGE, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._ADOBE)._hardnessAndResistance(2.0)._variableOpacity()));
            h._MAGENTA_SHULKER_BOX = register(-1, -1, "magenta_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._MAGENTA, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._MAGENTA)._hardnessAndResistance(2.0)._variableOpacity()));
            h._LIGHT_BLUE_SHULKER_BOX = register(-1, -1, "light_blue_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._LIGHT_BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._LIGHT_BLUE)._hardnessAndResistance(2.0)._variableOpacity()));
            h._YELLOW_SHULKER_BOX = register(-1, -1, "yellow_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._YELLOW, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._YELLOW)._hardnessAndResistance(2.0)._variableOpacity()));
            h._LIME_SHULKER_BOX = register(-1, -1, "lime_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._LIME, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._LIME)._hardnessAndResistance(2.0)._variableOpacity()));
            h._PINK_SHULKER_BOX = register(-1, -1, "pink_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._PINK, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._PINK)._hardnessAndResistance(2.0)._variableOpacity()));
            h._GRAY_SHULKER_BOX = register(-1, -1, "gray_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(2.0)._variableOpacity()));
            h._LIGHT_GRAY_SHULKER_BOX = register(-1, -1, "light_gray_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._LIGHT_GRAY, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._LIGHT_GRAY)._hardnessAndResistance(2.0)._variableOpacity()));
            h._CYAN_SHULKER_BOX = register(-1, -1, "cyan_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._CYAN, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._CYAN)._hardnessAndResistance(2.0)._variableOpacity()));
            h._PURPLE_SHULKER_BOX = register(-1, -1, "purple_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._PURPLE, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._PURPLE_TERRACOTTA)._hardnessAndResistance(2.0)._variableOpacity()));
            h._BLUE_SHULKER_BOX = register(-1, -1, "blue_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._BLUE, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._BLUE)._hardnessAndResistance(2.0)._variableOpacity()));
            h._BROWN_SHULKER_BOX = register(-1, -1, "brown_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._BROWN, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._BROWN)._hardnessAndResistance(2.0)._variableOpacity()));
            h._GREEN_SHULKER_BOX = register(-1, -1, "green_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._GREEN, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._GREEN)._hardnessAndResistance(2.0)._variableOpacity()));
            h._RED_SHULKER_BOX = register(-1, -1, "red_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._RED, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(2.0)._variableOpacity()));
            h._BLACK_SHULKER_BOX = register(-1, -1, "black_shulker_box", new Blocks_1._ShulkerBoxBlock(DyeColor_1._DyeColor._BLACK, BlockProperties_1._BlockProperties._create(Material_1._Material._SHULKER, MaterialColor_1._MaterialColor._BLACK)._hardnessAndResistance(2.0)._variableOpacity()));
            h._WHITE_GLAZED_TERRACOTTA = register(-1, -1, "white_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._WHITE)._hardnessAndResistance(1.4)));
            h._ORANGE_GLAZED_TERRACOTTA = register(-1, -1, "orange_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._ORANGE)._hardnessAndResistance(1.4)));
            h._MAGENTA_GLAZED_TERRACOTTA = register(-1, -1, "magenta_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._MAGENTA)._hardnessAndResistance(1.4)));
            h._LIGHT_BLUE_GLAZED_TERRACOTTA = register(-1, -1, "light_blue_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._LIGHT_BLUE)._hardnessAndResistance(1.4)));
            h._YELLOW_GLAZED_TERRACOTTA = register(-1, -1, "yellow_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._YELLOW)._hardnessAndResistance(1.4)));
            h._LIME_GLAZED_TERRACOTTA = register(-1, -1, "lime_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._LIME)._hardnessAndResistance(1.4)));
            h._PINK_GLAZED_TERRACOTTA = register(-1, -1, "pink_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._PINK)._hardnessAndResistance(1.4)));
            h._GRAY_GLAZED_TERRACOTTA = register(-1, -1, "gray_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._GRAY)._hardnessAndResistance(1.4)));
            h._LIGHT_GRAY_GLAZED_TERRACOTTA = register(-1, -1, "light_gray_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._LIGHT_GRAY)._hardnessAndResistance(1.4)));
            h._CYAN_GLAZED_TERRACOTTA = register(-1, -1, "cyan_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._CYAN)._hardnessAndResistance(1.4)));
            h._PURPLE_GLAZED_TERRACOTTA = register(-1, -1, "purple_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._PURPLE)._hardnessAndResistance(1.4)));
            h._BLUE_GLAZED_TERRACOTTA = register(-1, -1, "blue_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._BLUE)._hardnessAndResistance(1.4)));
            h._BROWN_GLAZED_TERRACOTTA = register(-1, -1, "brown_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._BROWN)._hardnessAndResistance(1.4)));
            h._GREEN_GLAZED_TERRACOTTA = register(-1, -1, "green_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._GREEN)._hardnessAndResistance(1.4)));
            h._RED_GLAZED_TERRACOTTA = register(-1, -1, "red_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._RED)._hardnessAndResistance(1.4)));
            h._BLACK_GLAZED_TERRACOTTA = register(-1, -1, "black_glazed_terracotta", new Blocks_1._GlazedTerracottaBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._BLACK)._hardnessAndResistance(1.4)));
            h._WHITE_CONCRETE = register(-1, -1, "white_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._WHITE)._hardnessAndResistance(1.8)));
            h._ORANGE_CONCRETE = register(-1, -1, "orange_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._ORANGE)._hardnessAndResistance(1.8)));
            h._MAGENTA_CONCRETE = register(-1, -1, "magenta_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._MAGENTA)._hardnessAndResistance(1.8)));
            h._LIGHT_BLUE_CONCRETE = register(-1, -1, "light_blue_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._LIGHT_BLUE)._hardnessAndResistance(1.8)));
            h._YELLOW_CONCRETE = register(-1, -1, "yellow_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._YELLOW)._hardnessAndResistance(1.8)));
            h._LIME_CONCRETE = register(-1, -1, "lime_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._LIME)._hardnessAndResistance(1.8)));
            h._PINK_CONCRETE = register(-1, -1, "pink_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._PINK)._hardnessAndResistance(1.8)));
            h._GRAY_CONCRETE = register(-1, -1, "gray_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._GRAY)._hardnessAndResistance(1.8)));
            h._LIGHT_GRAY_CONCRETE = register(-1, -1, "light_gray_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._LIGHT_GRAY)._hardnessAndResistance(1.8)));
            h._CYAN_CONCRETE = register(-1, -1, "cyan_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._CYAN)._hardnessAndResistance(1.8)));
            h._PURPLE_CONCRETE = register(-1, -1, "purple_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._PURPLE)._hardnessAndResistance(1.8)));
            h._BLUE_CONCRETE = register(-1, -1, "blue_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._BLUE)._hardnessAndResistance(1.8)));
            h._BROWN_CONCRETE = register(-1, -1, "brown_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._BROWN)._hardnessAndResistance(1.8)));
            h._GREEN_CONCRETE = register(-1, -1, "green_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._GREEN)._hardnessAndResistance(1.8)));
            h._RED_CONCRETE = register(-1, -1, "red_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._RED)._hardnessAndResistance(1.8)));
            h._BLACK_CONCRETE = register(-1, -1, "black_concrete", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, DyeColor_1._DyeColor._BLACK)._hardnessAndResistance(1.8)));
            h._WHITE_CONCRETE_POWDER = register(-1, -1, "white_concrete_powder", new Blocks_1._ConcretePowderBlock(h._WHITE_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._WHITE)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._ORANGE_CONCRETE_POWDER = register(-1, -1, "orange_concrete_powder", new Blocks_1._ConcretePowderBlock(h._ORANGE_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._ORANGE)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._MAGENTA_CONCRETE_POWDER = register(-1, -1, "magenta_concrete_powder", new Blocks_1._ConcretePowderBlock(h._MAGENTA_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._MAGENTA)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._LIGHT_BLUE_CONCRETE_POWDER = register(-1, -1, "light_blue_concrete_powder", new Blocks_1._ConcretePowderBlock(h._LIGHT_BLUE_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._LIGHT_BLUE)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._YELLOW_CONCRETE_POWDER = register(-1, -1, "yellow_concrete_powder", new Blocks_1._ConcretePowderBlock(h._YELLOW_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._YELLOW)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._LIME_CONCRETE_POWDER = register(-1, -1, "lime_concrete_powder", new Blocks_1._ConcretePowderBlock(h._LIME_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._LIME)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._PINK_CONCRETE_POWDER = register(-1, -1, "pink_concrete_powder", new Blocks_1._ConcretePowderBlock(h._PINK_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._PINK)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._GRAY_CONCRETE_POWDER = register(-1, -1, "gray_concrete_powder", new Blocks_1._ConcretePowderBlock(h._GRAY_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._GRAY)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._LIGHT_GRAY_CONCRETE_POWDER = register(-1, -1, "light_gray_concrete_powder", new Blocks_1._ConcretePowderBlock(h._LIGHT_GRAY_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._LIGHT_GRAY)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._CYAN_CONCRETE_POWDER = register(-1, -1, "cyan_concrete_powder", new Blocks_1._ConcretePowderBlock(h._CYAN_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._CYAN)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._PURPLE_CONCRETE_POWDER = register(-1, -1, "purple_concrete_powder", new Blocks_1._ConcretePowderBlock(h._PURPLE_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._PURPLE)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._BLUE_CONCRETE_POWDER = register(-1, -1, "blue_concrete_powder", new Blocks_1._ConcretePowderBlock(h._BLUE_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._BLUE)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._BROWN_CONCRETE_POWDER = register(-1, -1, "brown_concrete_powder", new Blocks_1._ConcretePowderBlock(h._BROWN_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._BROWN)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._GREEN_CONCRETE_POWDER = register(-1, -1, "green_concrete_powder", new Blocks_1._ConcretePowderBlock(h._GREEN_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._GREEN)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._RED_CONCRETE_POWDER = register(-1, -1, "red_concrete_powder", new Blocks_1._ConcretePowderBlock(h._RED_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._RED)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._BLACK_CONCRETE_POWDER = register(-1, -1, "black_concrete_powder", new Blocks_1._ConcretePowderBlock(h._BLACK_CONCRETE, BlockProperties_1._BlockProperties._create(Material_1._Material._SAND, DyeColor_1._DyeColor._BLACK)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._SAND)));
            h._KELP = register(-1, -1, "kelp", new Blocks_1._KelpTopBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT)._setTranslucent()._tickRandomly()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._KELP_PLANT = register(-1, -1, "kelp_plant", new Blocks_1._KelpBlock(h._KELP, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._DRIED_KELP_BLOCK = register(-1, -1, "dried_kelp_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ORGANIC, MaterialColor_1._MaterialColor._GREEN)._hardnessAndResistance(0.5, 2.5)._sound(SoundType_1._SoundType._PLANT)));
            h._TURTLE_EGG = register(-1, -1, "turtle_egg", new Blocks_1._TurtleEggBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._DRAGON_EGG, MaterialColor_1._MaterialColor._SAND)._hardnessAndResistance(0.5)._sound(SoundType_1._SoundType._METAL)._tickRandomly()));
            h._DEAD_TUBE_CORAL_BLOCK = register(-1, -1, "dead_tube_coral_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(1.5, 6.0)));
            h._DEAD_BRAIN_CORAL_BLOCK = register(-1, -1, "dead_brain_coral_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(1.5, 6.0)));
            h._DEAD_BUBBLE_CORAL_BLOCK = register(-1, -1, "dead_bubble_coral_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(1.5, 6.0)));
            h._DEAD_FIRE_CORAL_BLOCK = register(-1, -1, "dead_fire_coral_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(1.5, 6.0)));
            h._DEAD_HORN_CORAL_BLOCK = register(-1, -1, "dead_horn_coral_block", new Block_1._Block(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._hardnessAndResistance(1.5, 6.0)));
            h._TUBE_CORAL_BLOCK = register(-1, -1, "tube_coral_block", new Blocks_1._CoralBlock(h._DEAD_TUBE_CORAL_BLOCK, BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._BLUE)._hardnessAndResistance(1.5, 6.0)._sound(SoundType_1._SoundType._CORAL)));
            h._BRAIN_CORAL_BLOCK = register(-1, -1, "brain_coral_block", new Blocks_1._CoralBlock(h._DEAD_BRAIN_CORAL_BLOCK, BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._PINK)._hardnessAndResistance(1.5, 6.0)._sound(SoundType_1._SoundType._CORAL)));
            h._BUBBLE_CORAL_BLOCK = register(-1, -1, "bubble_coral_block", new Blocks_1._CoralBlock(h._DEAD_BUBBLE_CORAL_BLOCK, BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._PURPLE)._hardnessAndResistance(1.5, 6.0)._sound(SoundType_1._SoundType._CORAL)));
            h._FIRE_CORAL_BLOCK = register(-1, -1, "fire_coral_block", new Blocks_1._CoralBlock(h._DEAD_FIRE_CORAL_BLOCK, BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._RED)._hardnessAndResistance(1.5, 6.0)._sound(SoundType_1._SoundType._CORAL)));
            h._HORN_CORAL_BLOCK = register(-1, -1, "horn_coral_block", new Blocks_1._CoralBlock(h._DEAD_HORN_CORAL_BLOCK, BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._YELLOW)._hardnessAndResistance(1.5, 6.0)._sound(SoundType_1._SoundType._CORAL)));
            h._DEAD_TUBE_CORAL = register(-1, -1, "dead_tube_coral", new Blocks_1._DeadCoralPlantBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_BRAIN_CORAL = register(-1, -1, "dead_brain_coral", new Blocks_1._DeadCoralPlantBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_BUBBLE_CORAL = register(-1, -1, "dead_bubble_coral", new Blocks_1._DeadCoralPlantBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_FIRE_CORAL = register(-1, -1, "dead_fire_coral", new Blocks_1._DeadCoralPlantBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_HORN_CORAL = register(-1, -1, "dead_horn_coral", new Blocks_1._DeadCoralPlantBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._TUBE_CORAL = register(-1, -1, "tube_coral", new Blocks_1._CoralPlantBlock(h._DEAD_TUBE_CORAL, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._BLUE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._BRAIN_CORAL = register(-1, -1, "brain_coral", new Blocks_1._CoralPlantBlock(h._DEAD_BRAIN_CORAL, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._PINK)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._BUBBLE_CORAL = register(-1, -1, "bubble_coral", new Blocks_1._CoralPlantBlock(h._DEAD_BUBBLE_CORAL, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._PURPLE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._FIRE_CORAL = register(-1, -1, "fire_coral", new Blocks_1._CoralPlantBlock(h._DEAD_FIRE_CORAL, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._RED)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._HORN_CORAL = register(-1, -1, "horn_coral", new Blocks_1._CoralPlantBlock(h._DEAD_HORN_CORAL, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._YELLOW)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._DEAD_TUBE_CORAL_FAN = register(-1, -1, "dead_tube_coral_fan", new Blocks_1._DeadCoralFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_BRAIN_CORAL_FAN = register(-1, -1, "dead_brain_coral_fan", new Blocks_1._DeadCoralFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_BUBBLE_CORAL_FAN = register(-1, -1, "dead_bubble_coral_fan", new Blocks_1._DeadCoralFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_FIRE_CORAL_FAN = register(-1, -1, "dead_fire_coral_fan", new Blocks_1._DeadCoralFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._DEAD_HORN_CORAL_FAN = register(-1, -1, "dead_horn_coral_fan", new Blocks_1._DeadCoralFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()));
            h._TUBE_CORAL_FAN = register(-1, -1, "tube_coral_fan", new Blocks_1._CoralFanBlock(h._DEAD_TUBE_CORAL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._BLUE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._BRAIN_CORAL_FAN = register(-1, -1, "brain_coral_fan", new Blocks_1._CoralFanBlock(h._DEAD_BRAIN_CORAL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._PINK)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._BUBBLE_CORAL_FAN = register(-1, -1, "bubble_coral_fan", new Blocks_1._CoralFanBlock(h._DEAD_BUBBLE_CORAL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._PURPLE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._FIRE_CORAL_FAN = register(-1, -1, "fire_coral_fan", new Blocks_1._CoralFanBlock(h._DEAD_FIRE_CORAL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._RED)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._HORN_CORAL_FAN = register(-1, -1, "horn_coral_fan", new Blocks_1._CoralFanBlock(h._DEAD_HORN_CORAL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._YELLOW)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)));
            h._DEAD_TUBE_CORAL_WALL_FAN = register(-1, -1, "dead_tube_coral_wall_fan", new Blocks_1._DeadCoralWallFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()._lootFrom(h._DEAD_TUBE_CORAL_FAN)));
            h._DEAD_BRAIN_CORAL_WALL_FAN = register(-1, -1, "dead_brain_coral_wall_fan", new Blocks_1._DeadCoralWallFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()._lootFrom(h._DEAD_BRAIN_CORAL_FAN)));
            h._DEAD_BUBBLE_CORAL_WALL_FAN = register(-1, -1, "dead_bubble_coral_wall_fan", new Blocks_1._DeadCoralWallFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()._lootFrom(h._DEAD_BUBBLE_CORAL_FAN)));
            h._DEAD_FIRE_CORAL_WALL_FAN = register(-1, -1, "dead_fire_coral_wall_fan", new Blocks_1._DeadCoralWallFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()._lootFrom(h._DEAD_FIRE_CORAL_FAN)));
            h._DEAD_HORN_CORAL_WALL_FAN = register(-1, -1, "dead_horn_coral_wall_fan", new Blocks_1._DeadCoralWallFanBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK, MaterialColor_1._MaterialColor._GRAY)._setTranslucent()._zeroHardnessAndResistance()._lootFrom(h._DEAD_HORN_CORAL_FAN)));
            h._TUBE_CORAL_WALL_FAN = register(-1, -1, "tube_coral_wall_fan", new Blocks_1._CoralWallFanBlock(h._DEAD_TUBE_CORAL_WALL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._BLUE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)._lootFrom(h._TUBE_CORAL_FAN)));
            h._BRAIN_CORAL_WALL_FAN = register(-1, -1, "brain_coral_wall_fan", new Blocks_1._CoralWallFanBlock(h._DEAD_BRAIN_CORAL_WALL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._PINK)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)._lootFrom(h._TUBE_CORAL_FAN)));
            h._BUBBLE_CORAL_WALL_FAN = register(-1, -1, "bubble_coral_wall_fan", new Blocks_1._CoralWallFanBlock(h._DEAD_BUBBLE_CORAL_WALL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._PURPLE)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)._lootFrom(h._TUBE_CORAL_FAN)));
            h._FIRE_CORAL_WALL_FAN = register(-1, -1, "fire_coral_wall_fan", new Blocks_1._CoralWallFanBlock(h._DEAD_FIRE_CORAL_WALL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._RED)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)._lootFrom(h._TUBE_CORAL_FAN)));
            h._HORN_CORAL_WALL_FAN = register(-1, -1, "horn_coral_wall_fan", new Blocks_1._CoralWallFanBlock(h._DEAD_HORN_CORAL_WALL_FAN, BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._YELLOW)._setTranslucent()._zeroHardnessAndResistance()._sound(SoundType_1._SoundType._WET_GRASS)._lootFrom(h._TUBE_CORAL_FAN)));
            h._SEA_PICKLE = register(-1, -1, "sea_pickle", new Blocks_1._SeaPickleBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._OCEAN_PLANT, MaterialColor_1._MaterialColor._GREEN)._lightValue(3)._sound(SoundType_1._SoundType._SLIME)));
            h._BLUE_ICE = register(-1, -1, "blue_ice", new Blocks_1._BreakableBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PACKED_ICE)._hardnessAndResistance(2.8)._slipperiness(0.989)._sound(SoundType_1._SoundType._GLASS)));
            h._CONDUIT = register(-1, -1, "conduit", new Blocks_1._ConduitBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._GLASS, MaterialColor_1._MaterialColor._DIAMOND)._hardnessAndResistance(3.0)._lightValue(15)));
            h._BAMBOO_SAPLING = register(-1, -1, "bamboo_sapling", new Blocks_1._BambooSaplingBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._BAMBOO_SAPLING)._tickRandomly()._zeroHardnessAndResistance()._setTranslucent()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._BAMBOO_SAPLING)));
            h._BAMBOO = register(-1, -1, "bamboo", new Blocks_1._BambooBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._BAMBOO, MaterialColor_1._MaterialColor._FOLIAGE)._tickRandomly()._zeroHardnessAndResistance()._hardnessAndResistance(1.0)._sound(SoundType_1._SoundType._BAMBOO)));
            h._POTTED_BAMBOO = register(-1, -1, "potted_bamboo", new Blocks_1._FlowerPotBlock(h._BAMBOO, BlockProperties_1._BlockProperties._create(Material_1._Material._MISCELLANEOUS)._zeroHardnessAndResistance()));
            h._VOID_AIR = register(-1, -1, "void_air", new Blocks_1._AirBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._AIR)._setTranslucent()._noDrops()));
            h._CAVE_AIR = register(-1, -1, "cave_air", new Blocks_1._AirBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._AIR)._setTranslucent()._noDrops()));
            h._BUBBLE_COLUMN = register(-1, -1, "bubble_column", new Blocks_1._BubbleColumnBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._BUBBLE_COLUMN)._setTranslucent()._noDrops()));
            h._POLISHED_GRANITE_STAIRS = register(-1, -1, "polished_granite_stairs", new Blocks_1._StairsBlock(h._POLISHED_GRANITE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._POLISHED_GRANITE._prop)));
            h._SMOOTH_RED_SANDSTONE_STAIRS = register(-1, -1, "smooth_red_sandstone_stairs", new Blocks_1._StairsBlock(h._SMOOTH_RED_SANDSTONE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._SMOOTH_RED_SANDSTONE._prop)));
            h._MOSSY_STONE_BRICK_STAIRS = register(-1, -1, "mossy_stone_brick_stairs", new Blocks_1._StairsBlock(h._MOSSY_STONE_BRICKS._getDefaultState(), BlockProperties_1._BlockProperties._from(h._MOSSY_STONE_BRICKS._prop)));
            h._POLISHED_DIORITE_STAIRS = register(-1, -1, "polished_diorite_stairs", new Blocks_1._StairsBlock(h._POLISHED_DIORITE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._POLISHED_DIORITE._prop)));
            h._MOSSY_COBBLESTONE_STAIRS = register(-1, -1, "mossy_cobblestone_stairs", new Blocks_1._StairsBlock(h._MOSSY_COBBLESTONE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._MOSSY_COBBLESTONE._prop)));
            h._END_STONE_BRICK_STAIRS = register(-1, -1, "end_stone_brick_stairs", new Blocks_1._StairsBlock(h._END_STONE_BRICKS._getDefaultState(), BlockProperties_1._BlockProperties._from(h._END_STONE_BRICKS._prop)));
            h._STONE_STAIRS = register(-1, -1, "stone_stairs", new Blocks_1._StairsBlock(h._STONE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._STONE._prop)));
            h._SMOOTH_SANDSTONE_STAIRS = register(-1, -1, "smooth_sandstone_stairs", new Blocks_1._StairsBlock(h._SMOOTH_SANDSTONE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._SMOOTH_SANDSTONE._prop)));
            h._SMOOTH_QUARTZ_STAIRS = register(-1, -1, "smooth_quartz_stairs", new Blocks_1._StairsBlock(h._SMOOTH_QUARTZ._getDefaultState(), BlockProperties_1._BlockProperties._from(h._SMOOTH_QUARTZ._prop)));
            h._GRANITE_STAIRS = register(-1, -1, "granite_stairs", new Blocks_1._StairsBlock(h._GRANITE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._GRANITE._prop)));
            h._ANDESITE_STAIRS = register(-1, -1, "andesite_stairs", new Blocks_1._StairsBlock(h._ANDESITE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._ANDESITE._prop)));
            h._RED_NETHER_BRICK_STAIRS = register(-1, -1, "red_nether_brick_stairs", new Blocks_1._StairsBlock(h._RED_NETHER_BRICKS._getDefaultState(), BlockProperties_1._BlockProperties._from(h._RED_NETHER_BRICKS._prop)));
            h._POLISHED_ANDESITE_STAIRS = register(-1, -1, "polished_andesite_stairs", new Blocks_1._StairsBlock(h._POLISHED_ANDESITE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._POLISHED_ANDESITE._prop)));
            h._DIORITE_STAIRS = register(-1, -1, "diorite_stairs", new Blocks_1._StairsBlock(h._DIORITE._getDefaultState(), BlockProperties_1._BlockProperties._from(h._DIORITE._prop)));
            h._POLISHED_GRANITE_SLAB = register(-1, -1, "polished_granite_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._POLISHED_GRANITE._prop)));
            h._SMOOTH_RED_SANDSTONE_SLAB = register(-1, -1, "smooth_red_sandstone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._SMOOTH_RED_SANDSTONE._prop)));
            h._MOSSY_STONE_BRICK_SLAB = register(-1, -1, "mossy_stone_brick_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._MOSSY_STONE_BRICKS._prop)));
            h._POLISHED_DIORITE_SLAB = register(-1, -1, "polished_diorite_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._POLISHED_DIORITE._prop)));
            h._MOSSY_COBBLESTONE_SLAB = register(-1, -1, "mossy_cobblestone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._MOSSY_COBBLESTONE._prop)));
            h._END_STONE_BRICK_SLAB = register(-1, -1, "end_stone_brick_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._END_STONE_BRICKS._prop)));
            h._SMOOTH_SANDSTONE_SLAB = register(-1, -1, "smooth_sandstone_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._SMOOTH_SANDSTONE._prop)));
            h._SMOOTH_QUARTZ_SLAB = register(-1, -1, "smooth_quartz_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._SMOOTH_QUARTZ._prop)));
            h._GRANITE_SLAB = register(-1, -1, "granite_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._GRANITE._prop)));
            h._ANDESITE_SLAB = register(-1, -1, "andesite_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._ANDESITE._prop)));
            h._RED_NETHER_BRICK_SLAB = register(-1, -1, "red_nether_brick_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._RED_NETHER_BRICKS._prop)));
            h._POLISHED_ANDESITE_SLAB = register(-1, -1, "polished_andesite_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._POLISHED_ANDESITE._prop)));
            h._DIORITE_SLAB = register(-1, -1, "diorite_slab", new Blocks_1._SlabBlock(BlockProperties_1._BlockProperties._from(h._DIORITE._prop)));
            h._BRICK_WALL = register(-1, -1, "brick_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._BRICKS._prop)));
            h._PRISMARINE_WALL = register(-1, -1, "prismarine_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._PRISMARINE._prop)));
            h._RED_SANDSTONE_WALL = register(-1, -1, "red_sandstone_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._RED_SANDSTONE._prop)));
            h._MOSSY_STONE_BRICK_WALL = register(-1, -1, "mossy_stone_brick_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._MOSSY_STONE_BRICKS._prop)));
            h._GRANITE_WALL = register(-1, -1, "granite_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._GRANITE._prop)));
            h._STONE_BRICK_WALL = register(-1, -1, "stone_brick_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._STONE_BRICKS._prop)));
            h._NETHER_BRICK_WALL = register(-1, -1, "nether_brick_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._NETHER_BRICKS._prop)));
            h._ANDESITE_WALL = register(-1, -1, "andesite_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._ANDESITE._prop)));
            h._RED_NETHER_BRICK_WALL = register(-1, -1, "red_nether_brick_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._RED_NETHER_BRICKS._prop)));
            h._SANDSTONE_WALL = register(-1, -1, "sandstone_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._SANDSTONE._prop)));
            h._END_STONE_BRICK_WALL = register(-1, -1, "end_stone_brick_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._END_STONE_BRICKS._prop)));
            h._DIORITE_WALL = register(-1, -1, "diorite_wall", new Blocks_1._WallBlock(BlockProperties_1._BlockProperties._from(h._DIORITE._prop)));
            h._SCAFFOLDING = register(-1, -1, "scaffolding", new Blocks_1._ScaffoldingBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._MISCELLANEOUS, MaterialColor_1._MaterialColor._SAND)._setTranslucent()._sound(SoundType_1._SoundType._SCAFFOLDING)._variableOpacity()));
            h._LOOM = register(-1, -1, "loom", new Blocks_1._LoomBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
            h._BARREL = register(-1, -1, "barrel", new Blocks_1._BarrelBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
            h._SMOKER = register(-1, -1, "smoker", new Blocks_1._SmokerBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3.5)._lightValue(13)));
            h._BLAST_FURNACE = register(-1, -1, "blast_furnace", new Blocks_1._BlastFurnaceBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3.5)._lightValue(13)));
            h._CARTOGRAPHY_TABLE = register(-1, -1, "cartography_table", new Blocks_1._CartographyTableBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
            h._FLETCHING_TABLE = register(-1, -1, "fletching_table", new Blocks_1._FletchingTableBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
            h._GRINDSTONE = register(-1, -1, "grindstone", new Blocks_1._GrindstoneBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ANVIL, MaterialColor_1._MaterialColor._IRON)._hardnessAndResistance(2.0, 6.0)._sound(SoundType_1._SoundType._STONE)));
            h._LECTERN = register(-1, -1, "lectern", new Blocks_1._LecternBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
            h._SMITHING_TABLE = register(-1, -1, "smithing_table", new Blocks_1._SmithingTableBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(2.5)._sound(SoundType_1._SoundType._WOOD)));
            h._STONECUTTER = register(-1, -1, "stonecutter", new Blocks_1._StonecutterBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._ROCK)._hardnessAndResistance(3.5)));
            h._BELL = register(-1, -1, "bell", new Blocks_1._BellBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._GOLD)._hardnessAndResistance(5.0)._sound(SoundType_1._SoundType._ANVIL)));
            h._LANTERN = register(-1, -1, "lantern", new Blocks_1._LanternBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON)._hardnessAndResistance(3.5)._sound(SoundType_1._SoundType._LANTERN)._lightValue(15)));
            h._CAMPFIRE = register(-1, -1, "campfire", new Blocks_1._CampfireBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD, MaterialColor_1._MaterialColor._OBSIDIAN)._hardnessAndResistance(2.0)._sound(SoundType_1._SoundType._WOOD)._lightValue(15)._tickRandomly()));
            h._SWEET_BERRY_BUSH = register(-1, -1, "sweet_berry_bush", new Blocks_1._SweetBerryBushBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._PLANTS)._tickRandomly()._setTranslucent()._sound(SoundType_1._SoundType._SWEET_BERRY_BUSH)));
            h._STRUCTURE_BLOCK = register(-1, -1, "structure_block", new Blocks_1._StructureBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._LIGHT_GRAY)._hardnessAndResistance(-1.0, 3600000.0)._noDrops()));
            h._JIGSAW = register(-1, -1, "jigsaw", new Blocks_1._JigsawBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._IRON, MaterialColor_1._MaterialColor._LIGHT_GRAY)._hardnessAndResistance(-1.0, 3600000.0)._noDrops()));
            h._COMPOSTER = register(-1, -1, "composter", new Blocks_1._ComposterBlock(BlockProperties_1._BlockProperties._create(Material_1._Material._WOOD)._hardnessAndResistance(0.6)._sound(SoundType_1._SoundType._WOOD)));
        }
        this._postRegister();
    }
}
exports._BlockRegistry = _BlockRegistry;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _MaterialColor;
(function (_MaterialColor) {
    _MaterialColor[_MaterialColor["_STONE"] = 0] = "_STONE";
    _MaterialColor[_MaterialColor["_DIRT"] = 1] = "_DIRT";
    _MaterialColor[_MaterialColor["_QUARTZ"] = 2] = "_QUARTZ";
    _MaterialColor[_MaterialColor["_AIR"] = 3] = "_AIR";
    _MaterialColor[_MaterialColor["_OBSIDIAN"] = 4] = "_OBSIDIAN";
    _MaterialColor[_MaterialColor["_WOOD"] = 5] = "_WOOD";
    _MaterialColor[_MaterialColor["_SAND"] = 6] = "_SAND";
    _MaterialColor[_MaterialColor["_ADOBE"] = 7] = "_ADOBE";
    _MaterialColor[_MaterialColor["_BROWN"] = 8] = "_BROWN";
    _MaterialColor[_MaterialColor["_LAPIS"] = 9] = "_LAPIS";
    _MaterialColor[_MaterialColor["_SNOW"] = 10] = "_SNOW";
    _MaterialColor[_MaterialColor["_MAGENTA"] = 11] = "_MAGENTA";
    _MaterialColor[_MaterialColor["_LIGHT_BLUE"] = 12] = "_LIGHT_BLUE";
    _MaterialColor[_MaterialColor["_YELLOW"] = 13] = "_YELLOW";
    _MaterialColor[_MaterialColor["_LIME"] = 14] = "_LIME";
    _MaterialColor[_MaterialColor["_PINK"] = 15] = "_PINK";
    _MaterialColor[_MaterialColor["_GRAY"] = 16] = "_GRAY";
    _MaterialColor[_MaterialColor["_LIGHT_GRAY"] = 17] = "_LIGHT_GRAY";
    _MaterialColor[_MaterialColor["_CYAN"] = 18] = "_CYAN";
    _MaterialColor[_MaterialColor["_BLUE"] = 19] = "_BLUE";
    _MaterialColor[_MaterialColor["_PURPLE"] = 20] = "_PURPLE";
    _MaterialColor[_MaterialColor["_GREEN"] = 21] = "_GREEN";
    _MaterialColor[_MaterialColor["_RED"] = 22] = "_RED";
    _MaterialColor[_MaterialColor["_BLACK"] = 23] = "_BLACK";
    _MaterialColor[_MaterialColor["_GOLD"] = 24] = "_GOLD";
    _MaterialColor[_MaterialColor["_IRON"] = 25] = "_IRON";
    _MaterialColor[_MaterialColor["_TNT"] = 26] = "_TNT";
    _MaterialColor[_MaterialColor["_DIAMOND"] = 27] = "_DIAMOND";
    _MaterialColor[_MaterialColor["_NETHERRACK"] = 28] = "_NETHERRACK";
    _MaterialColor[_MaterialColor["_EMERALD"] = 29] = "_EMERALD";
    _MaterialColor[_MaterialColor["_WHITE_TERRACOTTA"] = 30] = "_WHITE_TERRACOTTA";
    _MaterialColor[_MaterialColor["_ORANGE_TERRACOTTA"] = 31] = "_ORANGE_TERRACOTTA";
    _MaterialColor[_MaterialColor["_MAGENTA_TERRACOTTA"] = 32] = "_MAGENTA_TERRACOTTA";
    _MaterialColor[_MaterialColor["_LIGHT_BLUE_TERRACOTTA"] = 33] = "_LIGHT_BLUE_TERRACOTTA";
    _MaterialColor[_MaterialColor["_YELLOW_TERRACOTTA"] = 34] = "_YELLOW_TERRACOTTA";
    _MaterialColor[_MaterialColor["_LIME_TERRACOTTA"] = 35] = "_LIME_TERRACOTTA";
    _MaterialColor[_MaterialColor["_PINK_TERRACOTTA"] = 36] = "_PINK_TERRACOTTA";
    _MaterialColor[_MaterialColor["_GRAY_TERRACOTTA"] = 37] = "_GRAY_TERRACOTTA";
    _MaterialColor[_MaterialColor["_LIGHT_GRAY_TERRACOTTA"] = 38] = "_LIGHT_GRAY_TERRACOTTA";
    _MaterialColor[_MaterialColor["_CYAN_TERRACOTTA"] = 39] = "_CYAN_TERRACOTTA";
    _MaterialColor[_MaterialColor["_PURPLE_TERRACOTTA"] = 40] = "_PURPLE_TERRACOTTA";
    _MaterialColor[_MaterialColor["_BLUE_TERRACOTTA"] = 41] = "_BLUE_TERRACOTTA";
    _MaterialColor[_MaterialColor["_BROWN_TERRACOTTA"] = 42] = "_BROWN_TERRACOTTA";
    _MaterialColor[_MaterialColor["_GREEN_TERRACOTTA"] = 43] = "_GREEN_TERRACOTTA";
    _MaterialColor[_MaterialColor["_RED_TERRACOTTA"] = 44] = "_RED_TERRACOTTA";
    _MaterialColor[_MaterialColor["_BLACK_TERRACOTTA"] = 45] = "_BLACK_TERRACOTTA";
    _MaterialColor[_MaterialColor["_GRASS"] = 46] = "_GRASS";
    _MaterialColor[_MaterialColor["_FOLIAGE"] = 47] = "_FOLIAGE";
})(_MaterialColor = exports._MaterialColor || (exports._MaterialColor = {}));


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _Material;
(function (_Material) {
    _Material[_Material["_AIR"] = 0] = "_AIR";
    _Material[_Material["_ROCK"] = 1] = "_ROCK";
    _Material[_Material["_GRASS"] = 2] = "_GRASS";
    _Material[_Material["_GROUND"] = 3] = "_GROUND";
    _Material[_Material["_WOOD"] = 4] = "_WOOD";
    _Material[_Material["_PLANTS"] = 5] = "_PLANTS";
    _Material[_Material["_WATER"] = 6] = "_WATER";
    _Material[_Material["_LAVA"] = 7] = "_LAVA";
    _Material[_Material["_SAND"] = 8] = "_SAND";
    _Material[_Material["_LEAVES"] = 9] = "_LEAVES";
    _Material[_Material["_SPONGE"] = 10] = "_SPONGE";
    _Material[_Material["_GLASS"] = 11] = "_GLASS";
    _Material[_Material["_IRON"] = 12] = "_IRON";
    _Material[_Material["_CIRCUITS"] = 13] = "_CIRCUITS";
    _Material[_Material["_PISTON"] = 14] = "_PISTON";
    _Material[_Material["_WEB"] = 15] = "_WEB";
    _Material[_Material["_VINE"] = 16] = "_VINE";
    _Material[_Material["_CLOTH"] = 17] = "_CLOTH";
    _Material[_Material["_TNT"] = 18] = "_TNT";
    _Material[_Material["_FIRE"] = 19] = "_FIRE";
    _Material[_Material["_SNOW"] = 20] = "_SNOW";
    _Material[_Material["_ICE"] = 21] = "_ICE";
    _Material[_Material["_CRAFTED_SNOW"] = 22] = "_CRAFTED_SNOW";
    _Material[_Material["_CACTUS"] = 23] = "_CACTUS";
    _Material[_Material["_CLAY"] = 24] = "_CLAY";
    _Material[_Material["_GOURD"] = 25] = "_GOURD";
    _Material[_Material["_PORTAL"] = 26] = "_PORTAL";
    _Material[_Material["_CAKE"] = 27] = "_CAKE";
    _Material[_Material["_DRAGON_EGG"] = 28] = "_DRAGON_EGG";
    _Material[_Material["_REDSTONE_LIGHT"] = 29] = "_REDSTONE_LIGHT";
    _Material[_Material["_ANVIL"] = 30] = "_ANVIL";
    _Material[_Material["_BARRIER"] = 31] = "_BARRIER";
    _Material[_Material["_CARPET"] = 32] = "_CARPET";
    _Material[_Material["_PACKED_ICE"] = 33] = "_PACKED_ICE";
    _Material[_Material["_SEA_GRASS"] = 34] = "_SEA_GRASS";
    _Material[_Material["_MISCELLANEOUS"] = 35] = "_MISCELLANEOUS";
    _Material[_Material["_EARTH"] = 36] = "_EARTH";
    _Material[_Material["_ORGANIC"] = 37] = "_ORGANIC";
    _Material[_Material["_STRUCTURE_VOID"] = 38] = "_STRUCTURE_VOID";
    _Material[_Material["_SHULKER"] = 39] = "_SHULKER";
    _Material[_Material["_OCEAN_PLANT"] = 40] = "_OCEAN_PLANT";
    _Material[_Material["_BAMBOO_SAPLING"] = 41] = "_BAMBOO_SAPLING";
    _Material[_Material["_BAMBOO"] = 42] = "_BAMBOO";
    _Material[_Material["_BUBBLE_COLUMN"] = 43] = "_BUBBLE_COLUMN";
})(_Material = exports._Material || (exports._Material = {}));


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const SoundType_1 = __webpack_require__(31);
class _BlockProperties {
    constructor() {
        this._hardness = 1;
        this._resistance = 1;
        this._opaque = true;
        this._slipperinessFactor = 0.6;
        this._soundType = SoundType_1._SoundType._STONE;
    }
    static _create(mat, matColor) {
        const p = new _BlockProperties();
        p._material = mat;
        if (matColor) {
            p._materialColor = matColor;
        }
        return p;
    }
    static _from(other) {
        const p = new _BlockProperties();
        p._material = other._material;
        p._materialColor = other._materialColor;
        p._opaque = other._opaque;
        p._slipperinessFactor = other._slipperinessFactor;
        return p;
    }
    _setTranslucent() {
        this._opaque = false;
        return this;
    }
    _variableOpacity() {
        return this;
    }
    _hardnessAndResistance(hardness, resistance) {
        this._hardness = hardness;
        if (resistance) {
            this._resistance = resistance;
        }
        else {
            this._resistance = hardness;
        }
        return this;
    }
    _zeroHardnessAndResistance() {
        return this._hardnessAndResistance(0, 0);
    }
    _sound(sound) {
        this._soundType = sound;
        return this;
    }
    _needsRandomTick() {
        return this;
    }
    _lightValue(light) {
        return this;
    }
    _slipperiness(s) {
        this._slipperinessFactor = s;
        return this;
    }
    _lootFrom(block) {
        return this;
    }
    _tickRandomly() {
        return this;
    }
    _noDrops() {
        return this;
    }
}
exports._BlockProperties = _BlockProperties;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const SoundEvent_1 = __webpack_require__(72);
class _SoundEvents {
    static register(key) {
        return new SoundEvent_1._SoundEvent(key);
    }
}
exports._SoundEvents = _SoundEvents;
_SoundEvents._AMBIENT_CAVE = _SoundEvents.register("ambient.cave");
_SoundEvents._AMBIENT_UNDERWATER_ENTER = _SoundEvents.register("ambient.underwater.enter");
_SoundEvents._AMBIENT_UNDERWATER_EXIT = _SoundEvents.register("ambient.underwater.exit");
_SoundEvents._AMBIENT_UNDERWATER_LOOP = _SoundEvents.register("ambient.underwater.loop");
_SoundEvents._AMBIENT_UNDERWATER_LOOP_ADDITIONS = _SoundEvents.register("ambient.underwater.loop.additions");
_SoundEvents._AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE = _SoundEvents.register("ambient.underwater.loop.additions.rare");
_SoundEvents._AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE = _SoundEvents.register("ambient.underwater.loop.additions.ultra_rare");
_SoundEvents._BLOCK_ANVIL_BREAK = _SoundEvents.register("block.anvil.break");
_SoundEvents._BLOCK_ANVIL_DESTROY = _SoundEvents.register("block.anvil.destroy");
_SoundEvents._BLOCK_ANVIL_FALL = _SoundEvents.register("block.anvil.fall");
_SoundEvents._BLOCK_ANVIL_HIT = _SoundEvents.register("block.anvil.hit");
_SoundEvents._BLOCK_ANVIL_LAND = _SoundEvents.register("block.anvil.land");
_SoundEvents._BLOCK_ANVIL_PLACE = _SoundEvents.register("block.anvil.place");
_SoundEvents._BLOCK_ANVIL_STEP = _SoundEvents.register("block.anvil.step");
_SoundEvents._BLOCK_ANVIL_USE = _SoundEvents.register("block.anvil.use");
_SoundEvents._ITEM_ARMOR_EQUIP_CHAIN = _SoundEvents.register("item.armor.equip_chain");
_SoundEvents._ITEM_ARMOR_EQUIP_DIAMOND = _SoundEvents.register("item.armor.equip_diamond");
_SoundEvents._ITEM_ARMOR_EQUIP_ELYTRA = _SoundEvents.register("item.armor.equip_elytra");
_SoundEvents._ITEM_ARMOR_EQUIP_GENERIC = _SoundEvents.register("item.armor.equip_generic");
_SoundEvents._ITEM_ARMOR_EQUIP_GOLD = _SoundEvents.register("item.armor.equip_gold");
_SoundEvents._ITEM_ARMOR_EQUIP_IRON = _SoundEvents.register("item.armor.equip_iron");
_SoundEvents._ITEM_ARMOR_EQUIP_LEATHER = _SoundEvents.register("item.armor.equip_leather");
_SoundEvents._ITEM_ARMOR_EQUIP_TURTLE = _SoundEvents.register("item.armor.equip_turtle");
_SoundEvents._ENTITY_ARMOR_STAND_BREAK = _SoundEvents.register("entity.armor_stand.break");
_SoundEvents._ENTITY_ARMOR_STAND_FALL = _SoundEvents.register("entity.armor_stand.fall");
_SoundEvents._ENTITY_ARMOR_STAND_HIT = _SoundEvents.register("entity.armor_stand.hit");
_SoundEvents._ENTITY_ARMOR_STAND_PLACE = _SoundEvents.register("entity.armor_stand.place");
_SoundEvents._ENTITY_ARROW_HIT = _SoundEvents.register("entity.arrow.hit");
_SoundEvents._ENTITY_ARROW_HIT_PLAYER = _SoundEvents.register("entity.arrow.hit_player");
_SoundEvents._ENTITY_ARROW_SHOOT = _SoundEvents.register("entity.arrow.shoot");
_SoundEvents._ITEM_AXE_STRIP = _SoundEvents.register("item.axe.strip");
_SoundEvents._BLOCK_BAMBOO_BREAK = _SoundEvents.register("block.bamboo.break");
_SoundEvents._BLOCK_BAMBOO_FALL = _SoundEvents.register("block.bamboo.fall");
_SoundEvents._BLOCK_BAMBOO_HIT = _SoundEvents.register("block.bamboo.hit");
_SoundEvents._BLOCK_BAMBOO_PLACE = _SoundEvents.register("block.bamboo.place");
_SoundEvents._BLOCK_BAMBOO_STEP = _SoundEvents.register("block.bamboo.step");
_SoundEvents._BLOCK_BAMBOO_SAPLING_BREAK = _SoundEvents.register("block.bamboo_sapling.break");
_SoundEvents._BLOCK_BAMBOO_SAPLING_HIT = _SoundEvents.register("block.bamboo_sapling.hit");
_SoundEvents._BLOCK_BAMBOO_SAPLING_PLACE = _SoundEvents.register("block.bamboo_sapling.place");
_SoundEvents._BLOCK_BARREL_CLOSE = _SoundEvents.register("block.barrel.close");
_SoundEvents._BLOCK_BARREL_OPEN = _SoundEvents.register("block.barrel.open");
_SoundEvents._ENTITY_BAT_AMBIENT = _SoundEvents.register("entity.bat.ambient");
_SoundEvents._ENTITY_BAT_DEATH = _SoundEvents.register("entity.bat.death");
_SoundEvents._ENTITY_BAT_HURT = _SoundEvents.register("entity.bat.hurt");
_SoundEvents._ENTITY_BAT_LOOP = _SoundEvents.register("entity.bat.loop");
_SoundEvents._ENTITY_BAT_TAKEOFF = _SoundEvents.register("entity.bat.takeoff");
_SoundEvents._BLOCK_BEACON_ACTIVATE = _SoundEvents.register("block.beacon.activate");
_SoundEvents._BLOCK_BEACON_AMBIENT = _SoundEvents.register("block.beacon.ambient");
_SoundEvents._BLOCK_BEACON_DEACTIVATE = _SoundEvents.register("block.beacon.deactivate");
_SoundEvents._BLOCK_BEACON_POWER_SELECT = _SoundEvents.register("block.beacon.power_select");
_SoundEvents._BLOCK_BELL_USE = _SoundEvents.register("block.bell.use");
_SoundEvents._BLOCK_BELL_RESONATE = _SoundEvents.register("block.bell.resonate");
_SoundEvents._ENTITY_BLAZE_AMBIENT = _SoundEvents.register("entity.blaze.ambient");
_SoundEvents._ENTITY_BLAZE_BURN = _SoundEvents.register("entity.blaze.burn");
_SoundEvents._ENTITY_BLAZE_DEATH = _SoundEvents.register("entity.blaze.death");
_SoundEvents._ENTITY_BLAZE_HURT = _SoundEvents.register("entity.blaze.hurt");
_SoundEvents._ENTITY_BLAZE_SHOOT = _SoundEvents.register("entity.blaze.shoot");
_SoundEvents._ENTITY_BOAT_PADDLE_LAND = _SoundEvents.register("entity.boat.paddle_land");
_SoundEvents._ENTITY_BOAT_PADDLE_WATER = _SoundEvents.register("entity.boat.paddle_water");
_SoundEvents._ITEM_BOOK_PAGE_TURN = _SoundEvents.register("item.book.page_turn");
_SoundEvents._ITEM_BOOK_PUT = _SoundEvents.register("item.book.put");
_SoundEvents._ENTITY_FISHING_BOBBER_RETRIEVE = _SoundEvents.register("entity.fishing_bobber.retrieve");
_SoundEvents._ENTITY_FISHING_BOBBER_SPLASH = _SoundEvents.register("entity.fishing_bobber.splash");
_SoundEvents._ENTITY_FISHING_BOBBER_THROW = _SoundEvents.register("entity.fishing_bobber.throw");
_SoundEvents._BLOCK_BLASTFURNACE_FIRE_CRACKLE = _SoundEvents.register("block.blastfurnace.fire_crackle");
_SoundEvents._ITEM_BOTTLE_EMPTY = _SoundEvents.register("item.bottle.empty");
_SoundEvents._ITEM_BOTTLE_FILL = _SoundEvents.register("item.bottle.fill");
_SoundEvents._ITEM_BOTTLE_FILL_DRAGONBREATH = _SoundEvents.register("item.bottle.fill_dragonbreath");
_SoundEvents._BLOCK_BREWING_STAND_BREW = _SoundEvents.register("block.brewing_stand.brew");
_SoundEvents._BLOCK_BUBBLE_COLUMN_BUBBLE_POP = _SoundEvents.register("block.bubble_column.bubble_pop");
_SoundEvents._BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT = _SoundEvents.register("block.bubble_column.upwards_ambient");
_SoundEvents._BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE = _SoundEvents.register("block.bubble_column.upwards_inside");
_SoundEvents._BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT = _SoundEvents.register("block.bubble_column.whirlpool_ambient");
_SoundEvents._BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE = _SoundEvents.register("block.bubble_column.whirlpool_inside");
_SoundEvents._ITEM_BUCKET_EMPTY = _SoundEvents.register("item.bucket.empty");
_SoundEvents._ITEM_BUCKET_EMPTY_FISH = _SoundEvents.register("item.bucket.empty_fish");
_SoundEvents._ITEM_BUCKET_EMPTY_LAVA = _SoundEvents.register("item.bucket.empty_lava");
_SoundEvents._ITEM_BUCKET_FILL = _SoundEvents.register("item.bucket.fill");
_SoundEvents._ITEM_BUCKET_FILL_FISH = _SoundEvents.register("item.bucket.fill_fish");
_SoundEvents._ITEM_BUCKET_FILL_LAVA = _SoundEvents.register("item.bucket.fill_lava");
_SoundEvents._BLOCK_CAMPFIRE_CRACKLE = _SoundEvents.register("block.campfire.crackle");
_SoundEvents._ENTITY_CAT_AMBIENT = _SoundEvents.register("entity.cat.ambient");
_SoundEvents._ENTITY_CAT_STRAY_AMBIENT = _SoundEvents.register("entity.cat.stray_ambient");
_SoundEvents._ENTITY_CAT_DEATH = _SoundEvents.register("entity.cat.death");
_SoundEvents._ENTITY_CAT_EAT = _SoundEvents.register("entity.cat.eat");
_SoundEvents._ENTITY_CAT_HISS = _SoundEvents.register("entity.cat.hiss");
_SoundEvents._ENTITY_CAT_BEG_FOR_FOOD = _SoundEvents.register("entity.cat.beg_for_food");
_SoundEvents._ENTITY_CAT_HURT = _SoundEvents.register("entity.cat.hurt");
_SoundEvents._ENTITY_CAT_PURR = _SoundEvents.register("entity.cat.purr");
_SoundEvents._ENTITY_CAT_PURREOW = _SoundEvents.register("entity.cat.purreow");
_SoundEvents._BLOCK_CHEST_CLOSE = _SoundEvents.register("block.chest.close");
_SoundEvents._BLOCK_CHEST_LOCKED = _SoundEvents.register("block.chest.locked");
_SoundEvents._BLOCK_CHEST_OPEN = _SoundEvents.register("block.chest.open");
_SoundEvents._ENTITY_CHICKEN_AMBIENT = _SoundEvents.register("entity.chicken.ambient");
_SoundEvents._ENTITY_CHICKEN_DEATH = _SoundEvents.register("entity.chicken.death");
_SoundEvents._ENTITY_CHICKEN_EGG = _SoundEvents.register("entity.chicken.egg");
_SoundEvents._ENTITY_CHICKEN_HURT = _SoundEvents.register("entity.chicken.hurt");
_SoundEvents._ENTITY_CHICKEN_STEP = _SoundEvents.register("entity.chicken.step");
_SoundEvents._BLOCK_CHORUS_FLOWER_DEATH = _SoundEvents.register("block.chorus_flower.death");
_SoundEvents._BLOCK_CHORUS_FLOWER_GROW = _SoundEvents.register("block.chorus_flower.grow");
_SoundEvents._ITEM_CHORUS_FRUIT_TELEPORT = _SoundEvents.register("item.chorus_fruit.teleport");
_SoundEvents._BLOCK_WOOL_BREAK = _SoundEvents.register("block.wool.break");
_SoundEvents._BLOCK_WOOL_FALL = _SoundEvents.register("block.wool.fall");
_SoundEvents._BLOCK_WOOL_HIT = _SoundEvents.register("block.wool.hit");
_SoundEvents._BLOCK_WOOL_PLACE = _SoundEvents.register("block.wool.place");
_SoundEvents._BLOCK_WOOL_STEP = _SoundEvents.register("block.wool.step");
_SoundEvents._ENTITY_COD_AMBIENT = _SoundEvents.register("entity.cod.ambient");
_SoundEvents._ENTITY_COD_DEATH = _SoundEvents.register("entity.cod.death");
_SoundEvents._ENTITY_COD_FLOP = _SoundEvents.register("entity.cod.flop");
_SoundEvents._ENTITY_COD_HURT = _SoundEvents.register("entity.cod.hurt");
_SoundEvents._BLOCK_COMPARATOR_CLICK = _SoundEvents.register("block.comparator.click");
_SoundEvents._BLOCK_COMPOSTER_EMPTY = _SoundEvents.register("block.composter.empty");
_SoundEvents._BLOCK_COMPOSTER_FILL = _SoundEvents.register("block.composter.fill");
_SoundEvents._BLOCK_COMPOSTER_FILL_SUCCESS = _SoundEvents.register("block.composter.fill_success");
_SoundEvents._BLOCK_COMPOSTER_READY = _SoundEvents.register("block.composter.ready");
_SoundEvents._BLOCK_CONDUIT_ACTIVATE = _SoundEvents.register("block.conduit.activate");
_SoundEvents._BLOCK_CONDUIT_AMBIENT = _SoundEvents.register("block.conduit.ambient");
_SoundEvents._BLOCK_CONDUIT_AMBIENT_SHORT = _SoundEvents.register("block.conduit.ambient.short");
_SoundEvents._BLOCK_CONDUIT_ATTACK_TARGET = _SoundEvents.register("block.conduit.attack.target");
_SoundEvents._BLOCK_CONDUIT_DEACTIVATE = _SoundEvents.register("block.conduit.deactivate");
_SoundEvents._ENTITY_COW_AMBIENT = _SoundEvents.register("entity.cow.ambient");
_SoundEvents._ENTITY_COW_DEATH = _SoundEvents.register("entity.cow.death");
_SoundEvents._ENTITY_COW_HURT = _SoundEvents.register("entity.cow.hurt");
_SoundEvents._ENTITY_COW_MILK = _SoundEvents.register("entity.cow.milk");
_SoundEvents._ENTITY_COW_STEP = _SoundEvents.register("entity.cow.step");
_SoundEvents._ENTITY_CREEPER_DEATH = _SoundEvents.register("entity.creeper.death");
_SoundEvents._ENTITY_CREEPER_HURT = _SoundEvents.register("entity.creeper.hurt");
_SoundEvents._ENTITY_CREEPER_PRIMED = _SoundEvents.register("entity.creeper.primed");
_SoundEvents._BLOCK_CROP_BREAK = _SoundEvents.register("block.crop.break");
_SoundEvents._ITEM_CROP_PLANT = _SoundEvents.register("item.crop.plant");
_SoundEvents._ITEM_CROSSBOW_HIT = _SoundEvents.register("item.crossbow.hit");
_SoundEvents._ITEM_CROSSBOW_LOADING_END = _SoundEvents.register("item.crossbow.loading_end");
_SoundEvents._ITEM_CROSSBOW_LOADING_MIDDLE = _SoundEvents.register("item.crossbow.loading_middle");
_SoundEvents._ITEM_CROSSBOW_LOADING_START = _SoundEvents.register("item.crossbow.loading_start");
_SoundEvents._ITEM_CROSSBOW_QUICK_CHARGE_1 = _SoundEvents.register("item.crossbow.quick_charge_1");
_SoundEvents._ITEM_CROSSBOW_QUICK_CHARGE_2 = _SoundEvents.register("item.crossbow.quick_charge_2");
_SoundEvents._ITEM_CROSSBOW_QUICK_CHARGE_3 = _SoundEvents.register("item.crossbow.quick_charge_3");
_SoundEvents._ITEM_CROSSBOW_SHOOT = _SoundEvents.register("item.crossbow.shoot");
_SoundEvents._BLOCK_DISPENSER_DISPENSE = _SoundEvents.register("block.dispenser.dispense");
_SoundEvents._BLOCK_DISPENSER_FAIL = _SoundEvents.register("block.dispenser.fail");
_SoundEvents._BLOCK_DISPENSER_LAUNCH = _SoundEvents.register("block.dispenser.launch");
_SoundEvents._ENTITY_DOLPHIN_AMBIENT = _SoundEvents.register("entity.dolphin.ambient");
_SoundEvents._ENTITY_DOLPHIN_AMBIENT_WATER = _SoundEvents.register("entity.dolphin.ambient_water");
_SoundEvents._ENTITY_DOLPHIN_ATTACK = _SoundEvents.register("entity.dolphin.attack");
_SoundEvents._ENTITY_DOLPHIN_DEATH = _SoundEvents.register("entity.dolphin.death");
_SoundEvents._ENTITY_DOLPHIN_EAT = _SoundEvents.register("entity.dolphin.eat");
_SoundEvents._ENTITY_DOLPHIN_HURT = _SoundEvents.register("entity.dolphin.hurt");
_SoundEvents._ENTITY_DOLPHIN_JUMP = _SoundEvents.register("entity.dolphin.jump");
_SoundEvents._ENTITY_DOLPHIN_PLAY = _SoundEvents.register("entity.dolphin.play");
_SoundEvents._ENTITY_DOLPHIN_SPLASH = _SoundEvents.register("entity.dolphin.splash");
_SoundEvents._ENTITY_DOLPHIN_SWIM = _SoundEvents.register("entity.dolphin.swim");
_SoundEvents._ENTITY_DONKEY_AMBIENT = _SoundEvents.register("entity.donkey.ambient");
_SoundEvents._ENTITY_DONKEY_ANGRY = _SoundEvents.register("entity.donkey.angry");
_SoundEvents._ENTITY_DONKEY_CHEST = _SoundEvents.register("entity.donkey.chest");
_SoundEvents._ENTITY_DONKEY_DEATH = _SoundEvents.register("entity.donkey.death");
_SoundEvents._ENTITY_DONKEY_HURT = _SoundEvents.register("entity.donkey.hurt");
_SoundEvents._ENTITY_DROWNED_AMBIENT = _SoundEvents.register("entity.drowned.ambient");
_SoundEvents._ENTITY_DROWNED_AMBIENT_WATER = _SoundEvents.register("entity.drowned.ambient_water");
_SoundEvents._ENTITY_DROWNED_DEATH = _SoundEvents.register("entity.drowned.death");
_SoundEvents._ENTITY_DROWNED_DEATH_WATER = _SoundEvents.register("entity.drowned.death_water");
_SoundEvents._ENTITY_DROWNED_HURT = _SoundEvents.register("entity.drowned.hurt");
_SoundEvents._ENTITY_DROWNED_HURT_WATER = _SoundEvents.register("entity.drowned.hurt_water");
_SoundEvents._ENTITY_DROWNED_SHOOT = _SoundEvents.register("entity.drowned.shoot");
_SoundEvents._ENTITY_DROWNED_STEP = _SoundEvents.register("entity.drowned.step");
_SoundEvents._ENTITY_DROWNED_SWIM = _SoundEvents.register("entity.drowned.swim");
_SoundEvents._ENTITY_EGG_THROW = _SoundEvents.register("entity.egg.throw");
_SoundEvents._ENTITY_ELDER_GUARDIAN_AMBIENT = _SoundEvents.register("entity.elder_guardian.ambient");
_SoundEvents._ENTITY_ELDER_GUARDIAN_AMBIENT_LAND = _SoundEvents.register("entity.elder_guardian.ambient_land");
_SoundEvents._ENTITY_ELDER_GUARDIAN_CURSE = _SoundEvents.register("entity.elder_guardian.curse");
_SoundEvents._ENTITY_ELDER_GUARDIAN_DEATH = _SoundEvents.register("entity.elder_guardian.death");
_SoundEvents._ENTITY_ELDER_GUARDIAN_DEATH_LAND = _SoundEvents.register("entity.elder_guardian.death_land");
_SoundEvents._ENTITY_ELDER_GUARDIAN_FLOP = _SoundEvents.register("entity.elder_guardian.flop");
_SoundEvents._ENTITY_ELDER_GUARDIAN_HURT = _SoundEvents.register("entity.elder_guardian.hurt");
_SoundEvents._ENTITY_ELDER_GUARDIAN_HURT_LAND = _SoundEvents.register("entity.elder_guardian.hurt_land");
_SoundEvents._ITEM_ELYTRA_FLYING = _SoundEvents.register("item.elytra.flying");
_SoundEvents._BLOCK_ENCHANTMENT_TABLE_USE = _SoundEvents.register("block.enchantment_table.use");
_SoundEvents._BLOCK_ENDER_CHEST_CLOSE = _SoundEvents.register("block.ender_chest.close");
_SoundEvents._BLOCK_ENDER_CHEST_OPEN = _SoundEvents.register("block.ender_chest.open");
_SoundEvents._ENTITY_ENDER_DRAGON_AMBIENT = _SoundEvents.register("entity.ender_dragon.ambient");
_SoundEvents._ENTITY_ENDER_DRAGON_DEATH = _SoundEvents.register("entity.ender_dragon.death");
_SoundEvents._ENTITY_DRAGON_FIREBALL_EXPLODE = _SoundEvents.register("entity.dragon_fireball.explode");
_SoundEvents._ENTITY_ENDER_DRAGON_FLAP = _SoundEvents.register("entity.ender_dragon.flap");
_SoundEvents._ENTITY_ENDER_DRAGON_GROWL = _SoundEvents.register("entity.ender_dragon.growl");
_SoundEvents._ENTITY_ENDER_DRAGON_HURT = _SoundEvents.register("entity.ender_dragon.hurt");
_SoundEvents._ENTITY_ENDER_DRAGON_SHOOT = _SoundEvents.register("entity.ender_dragon.shoot");
_SoundEvents._ENTITY_ENDER_EYE_DEATH = _SoundEvents.register("entity.ender_eye.death");
_SoundEvents._ENTITY_ENDER_EYE_LAUNCH = _SoundEvents.register("entity.ender_eye.launch");
_SoundEvents._ENTITY_ENDERMAN_AMBIENT = _SoundEvents.register("entity.enderman.ambient");
_SoundEvents._ENTITY_ENDERMAN_DEATH = _SoundEvents.register("entity.enderman.death");
_SoundEvents._ENTITY_ENDERMAN_HURT = _SoundEvents.register("entity.enderman.hurt");
_SoundEvents._ENTITY_ENDERMAN_SCREAM = _SoundEvents.register("entity.enderman.scream");
_SoundEvents._ENTITY_ENDERMAN_STARE = _SoundEvents.register("entity.enderman.stare");
_SoundEvents._ENTITY_ENDERMAN_TELEPORT = _SoundEvents.register("entity.enderman.teleport");
_SoundEvents._ENTITY_ENDERMITE_AMBIENT = _SoundEvents.register("entity.endermite.ambient");
_SoundEvents._ENTITY_ENDERMITE_DEATH = _SoundEvents.register("entity.endermite.death");
_SoundEvents._ENTITY_ENDERMITE_HURT = _SoundEvents.register("entity.endermite.hurt");
_SoundEvents._ENTITY_ENDERMITE_STEP = _SoundEvents.register("entity.endermite.step");
_SoundEvents._ENTITY_ENDER_PEARL_THROW = _SoundEvents.register("entity.ender_pearl.throw");
_SoundEvents._BLOCK_END_GATEWAY_SPAWN = _SoundEvents.register("block.end_gateway.spawn");
_SoundEvents._BLOCK_END_PORTAL_FRAME_FILL = _SoundEvents.register("block.end_portal_frame.fill");
_SoundEvents._BLOCK_END_PORTAL_SPAWN = _SoundEvents.register("block.end_portal.spawn");
_SoundEvents._ENTITY_EVOKER_AMBIENT = _SoundEvents.register("entity.evoker.ambient");
_SoundEvents._ENTITY_EVOKER_CAST_SPELL = _SoundEvents.register("entity.evoker.cast_spell");
_SoundEvents._ENTITY_EVOKER_CELEBRATE = _SoundEvents.register("entity.evoker.celebrate");
_SoundEvents._ENTITY_EVOKER_DEATH = _SoundEvents.register("entity.evoker.death");
_SoundEvents._ENTITY_EVOKER_FANGS_ATTACK = _SoundEvents.register("entity.evoker_fangs.attack");
_SoundEvents._ENTITY_EVOKER_HURT = _SoundEvents.register("entity.evoker.hurt");
_SoundEvents._ENTITY_EVOKER_PREPARE_ATTACK = _SoundEvents.register("entity.evoker.prepare_attack");
_SoundEvents._ENTITY_EVOKER_PREPARE_SUMMON = _SoundEvents.register("entity.evoker.prepare_summon");
_SoundEvents._ENTITY_EVOKER_PREPARE_WOLOLO = _SoundEvents.register("entity.evoker.prepare_wololo");
_SoundEvents._ENTITY_EXPERIENCE_BOTTLE_THROW = _SoundEvents.register("entity.experience_bottle.throw");
_SoundEvents._ENTITY_EXPERIENCE_ORB_PICKUP = _SoundEvents.register("entity.experience_orb.pickup");
_SoundEvents._BLOCK_FENCE_GATE_CLOSE = _SoundEvents.register("block.fence_gate.close");
_SoundEvents._BLOCK_FENCE_GATE_OPEN = _SoundEvents.register("block.fence_gate.open");
_SoundEvents._ITEM_FIRECHARGE_USE = _SoundEvents.register("item.firecharge.use");
_SoundEvents._ENTITY_FIREWORK_ROCKET_BLAST = _SoundEvents.register("entity.firework_rocket.blast");
_SoundEvents._ENTITY_FIREWORK_ROCKET_BLAST_FAR = _SoundEvents.register("entity.firework_rocket.blast_far");
_SoundEvents._ENTITY_FIREWORK_ROCKET_LARGE_BLAST = _SoundEvents.register("entity.firework_rocket.large_blast");
_SoundEvents._ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR = _SoundEvents.register("entity.firework_rocket.large_blast_far");
_SoundEvents._ENTITY_FIREWORK_ROCKET_LAUNCH = _SoundEvents.register("entity.firework_rocket.launch");
_SoundEvents._ENTITY_FIREWORK_ROCKET_SHOOT = _SoundEvents.register("entity.firework_rocket.shoot");
_SoundEvents._ENTITY_FIREWORK_ROCKET_TWINKLE = _SoundEvents.register("entity.firework_rocket.twinkle");
_SoundEvents._ENTITY_FIREWORK_ROCKET_TWINKLE_FAR = _SoundEvents.register("entity.firework_rocket.twinkle_far");
_SoundEvents._BLOCK_FIRE_AMBIENT = _SoundEvents.register("block.fire.ambient");
_SoundEvents._BLOCK_FIRE_EXTINGUISH = _SoundEvents.register("block.fire.extinguish");
_SoundEvents._ENTITY_FISH_SWIM = _SoundEvents.register("entity.fish.swim");
_SoundEvents._ITEM_FLINTANDSTEEL_USE = _SoundEvents.register("item.flintandsteel.use");
_SoundEvents._ENTITY_FOX_AGGRO = _SoundEvents.register("entity.fox.aggro");
_SoundEvents._ENTITY_FOX_AMBIENT = _SoundEvents.register("entity.fox.ambient");
_SoundEvents._ENTITY_FOX_BITE = _SoundEvents.register("entity.fox.bite");
_SoundEvents._ENTITY_FOX_DEATH = _SoundEvents.register("entity.fox.death");
_SoundEvents._ENTITY_FOX_EAT = _SoundEvents.register("entity.fox.eat");
_SoundEvents._ENTITY_FOX_HURT = _SoundEvents.register("entity.fox.hurt");
_SoundEvents._ENTITY_FOX_SCREECH = _SoundEvents.register("entity.fox.screech");
_SoundEvents._ENTITY_FOX_SLEEP = _SoundEvents.register("entity.fox.sleep");
_SoundEvents._ENTITY_FOX_SNIFF = _SoundEvents.register("entity.fox.sniff");
_SoundEvents._ENTITY_FOX_SPIT = _SoundEvents.register("entity.fox.spit");
_SoundEvents._BLOCK_FURNACE_FIRE_CRACKLE = _SoundEvents.register("block.furnace.fire_crackle");
_SoundEvents._ENTITY_GENERIC_BIG_FALL = _SoundEvents.register("entity.generic.big_fall");
_SoundEvents._ENTITY_GENERIC_BURN = _SoundEvents.register("entity.generic.burn");
_SoundEvents._ENTITY_GENERIC_DEATH = _SoundEvents.register("entity.generic.death");
_SoundEvents._ENTITY_GENERIC_DRINK = _SoundEvents.register("entity.generic.drink");
_SoundEvents._ENTITY_GENERIC_EAT = _SoundEvents.register("entity.generic.eat");
_SoundEvents._ENTITY_GENERIC_EXPLODE = _SoundEvents.register("entity.generic.explode");
_SoundEvents._ENTITY_GENERIC_EXTINGUISH_FIRE = _SoundEvents.register("entity.generic.extinguish_fire");
_SoundEvents._ENTITY_GENERIC_HURT = _SoundEvents.register("entity.generic.hurt");
_SoundEvents._ENTITY_GENERIC_SMALL_FALL = _SoundEvents.register("entity.generic.small_fall");
_SoundEvents._ENTITY_GENERIC_SPLASH = _SoundEvents.register("entity.generic.splash");
_SoundEvents._ENTITY_GENERIC_SWIM = _SoundEvents.register("entity.generic.swim");
_SoundEvents._ENTITY_GHAST_AMBIENT = _SoundEvents.register("entity.ghast.ambient");
_SoundEvents._ENTITY_GHAST_DEATH = _SoundEvents.register("entity.ghast.death");
_SoundEvents._ENTITY_GHAST_HURT = _SoundEvents.register("entity.ghast.hurt");
_SoundEvents._ENTITY_GHAST_SCREAM = _SoundEvents.register("entity.ghast.scream");
_SoundEvents._ENTITY_GHAST_SHOOT = _SoundEvents.register("entity.ghast.shoot");
_SoundEvents._ENTITY_GHAST_WARN = _SoundEvents.register("entity.ghast.warn");
_SoundEvents._BLOCK_GLASS_BREAK = _SoundEvents.register("block.glass.break");
_SoundEvents._BLOCK_GLASS_FALL = _SoundEvents.register("block.glass.fall");
_SoundEvents._BLOCK_GLASS_HIT = _SoundEvents.register("block.glass.hit");
_SoundEvents._BLOCK_GLASS_PLACE = _SoundEvents.register("block.glass.place");
_SoundEvents._BLOCK_GLASS_STEP = _SoundEvents.register("block.glass.step");
_SoundEvents._BLOCK_GRASS_BREAK = _SoundEvents.register("block.grass.break");
_SoundEvents._BLOCK_GRASS_FALL = _SoundEvents.register("block.grass.fall");
_SoundEvents._BLOCK_GRASS_HIT = _SoundEvents.register("block.grass.hit");
_SoundEvents._BLOCK_GRASS_PLACE = _SoundEvents.register("block.grass.place");
_SoundEvents._BLOCK_GRASS_STEP = _SoundEvents.register("block.grass.step");
_SoundEvents._BLOCK_WET_GRASS_BREAK = _SoundEvents.register("block.wet_grass.break");
_SoundEvents._BLOCK_WET_GRASS_FALL = _SoundEvents.register("block.wet_grass.fall");
_SoundEvents._BLOCK_WET_GRASS_HIT = _SoundEvents.register("block.wet_grass.hit");
_SoundEvents._BLOCK_WET_GRASS_PLACE = _SoundEvents.register("block.wet_grass.place");
_SoundEvents._BLOCK_WET_GRASS_STEP = _SoundEvents.register("block.wet_grass.step");
_SoundEvents._BLOCK_CORAL_BLOCK_BREAK = _SoundEvents.register("block.coral_block.break");
_SoundEvents._BLOCK_CORAL_BLOCK_FALL = _SoundEvents.register("block.coral_block.fall");
_SoundEvents._BLOCK_CORAL_BLOCK_HIT = _SoundEvents.register("block.coral_block.hit");
_SoundEvents._BLOCK_CORAL_BLOCK_PLACE = _SoundEvents.register("block.coral_block.place");
_SoundEvents._BLOCK_CORAL_BLOCK_STEP = _SoundEvents.register("block.coral_block.step");
_SoundEvents._BLOCK_GRAVEL_BREAK = _SoundEvents.register("block.gravel.break");
_SoundEvents._BLOCK_GRAVEL_FALL = _SoundEvents.register("block.gravel.fall");
_SoundEvents._BLOCK_GRAVEL_HIT = _SoundEvents.register("block.gravel.hit");
_SoundEvents._BLOCK_GRAVEL_PLACE = _SoundEvents.register("block.gravel.place");
_SoundEvents._BLOCK_GRAVEL_STEP = _SoundEvents.register("block.gravel.step");
_SoundEvents._BLOCK_GRINDSTONE_USE = _SoundEvents.register("block.grindstone.use");
_SoundEvents._ENTITY_GUARDIAN_AMBIENT = _SoundEvents.register("entity.guardian.ambient");
_SoundEvents._ENTITY_GUARDIAN_AMBIENT_LAND = _SoundEvents.register("entity.guardian.ambient_land");
_SoundEvents._ENTITY_GUARDIAN_ATTACK = _SoundEvents.register("entity.guardian.attack");
_SoundEvents._ENTITY_GUARDIAN_DEATH = _SoundEvents.register("entity.guardian.death");
_SoundEvents._ENTITY_GUARDIAN_DEATH_LAND = _SoundEvents.register("entity.guardian.death_land");
_SoundEvents._ENTITY_GUARDIAN_FLOP = _SoundEvents.register("entity.guardian.flop");
_SoundEvents._ENTITY_GUARDIAN_HURT = _SoundEvents.register("entity.guardian.hurt");
_SoundEvents._ENTITY_GUARDIAN_HURT_LAND = _SoundEvents.register("entity.guardian.hurt_land");
_SoundEvents._ITEM_HOE_TILL = _SoundEvents.register("item.hoe.till");
_SoundEvents._ENTITY_HORSE_AMBIENT = _SoundEvents.register("entity.horse.ambient");
_SoundEvents._ENTITY_HORSE_ANGRY = _SoundEvents.register("entity.horse.angry");
_SoundEvents._ENTITY_HORSE_ARMOR = _SoundEvents.register("entity.horse.armor");
_SoundEvents._ENTITY_HORSE_BREATHE = _SoundEvents.register("entity.horse.breathe");
_SoundEvents._ENTITY_HORSE_DEATH = _SoundEvents.register("entity.horse.death");
_SoundEvents._ENTITY_HORSE_EAT = _SoundEvents.register("entity.horse.eat");
_SoundEvents._ENTITY_HORSE_GALLOP = _SoundEvents.register("entity.horse.gallop");
_SoundEvents._ENTITY_HORSE_HURT = _SoundEvents.register("entity.horse.hurt");
_SoundEvents._ENTITY_HORSE_JUMP = _SoundEvents.register("entity.horse.jump");
_SoundEvents._ENTITY_HORSE_LAND = _SoundEvents.register("entity.horse.land");
_SoundEvents._ENTITY_HORSE_SADDLE = _SoundEvents.register("entity.horse.saddle");
_SoundEvents._ENTITY_HORSE_STEP = _SoundEvents.register("entity.horse.step");
_SoundEvents._ENTITY_HORSE_STEP_WOOD = _SoundEvents.register("entity.horse.step_wood");
_SoundEvents._ENTITY_HOSTILE_BIG_FALL = _SoundEvents.register("entity.hostile.big_fall");
_SoundEvents._ENTITY_HOSTILE_DEATH = _SoundEvents.register("entity.hostile.death");
_SoundEvents._ENTITY_HOSTILE_HURT = _SoundEvents.register("entity.hostile.hurt");
_SoundEvents._ENTITY_HOSTILE_SMALL_FALL = _SoundEvents.register("entity.hostile.small_fall");
_SoundEvents._ENTITY_HOSTILE_SPLASH = _SoundEvents.register("entity.hostile.splash");
_SoundEvents._ENTITY_HOSTILE_SWIM = _SoundEvents.register("entity.hostile.swim");
_SoundEvents._ENTITY_HUSK_AMBIENT = _SoundEvents.register("entity.husk.ambient");
_SoundEvents._ENTITY_HUSK_CONVERTED_TO_ZOMBIE = _SoundEvents.register("entity.husk.converted_to_zombie");
_SoundEvents._ENTITY_HUSK_DEATH = _SoundEvents.register("entity.husk.death");
_SoundEvents._ENTITY_HUSK_HURT = _SoundEvents.register("entity.husk.hurt");
_SoundEvents._ENTITY_HUSK_STEP = _SoundEvents.register("entity.husk.step");
_SoundEvents._ENTITY_RAVAGER_AMBIENT = _SoundEvents.register("entity.ravager.ambient");
_SoundEvents._ENTITY_RAVAGER_ATTACK = _SoundEvents.register("entity.ravager.attack");
_SoundEvents._ENTITY_RAVAGER_CELEBRATE = _SoundEvents.register("entity.ravager.celebrate");
_SoundEvents._ENTITY_RAVAGER_DEATH = _SoundEvents.register("entity.ravager.death");
_SoundEvents._ENTITY_RAVAGER_HURT = _SoundEvents.register("entity.ravager.hurt");
_SoundEvents._ENTITY_RAVAGER_STEP = _SoundEvents.register("entity.ravager.step");
_SoundEvents._ENTITY_RAVAGER_STUNNED = _SoundEvents.register("entity.ravager.stunned");
_SoundEvents._ENTITY_RAVAGER_ROAR = _SoundEvents.register("entity.ravager.roar");
_SoundEvents._ENTITY_ILLUSIONER_AMBIENT = _SoundEvents.register("entity.illusioner.ambient");
_SoundEvents._ENTITY_ILLUSIONER_CAST_SPELL = _SoundEvents.register("entity.illusioner.cast_spell");
_SoundEvents._ENTITY_ILLUSIONER_DEATH = _SoundEvents.register("entity.illusioner.death");
_SoundEvents._ENTITY_ILLUSIONER_HURT = _SoundEvents.register("entity.illusioner.hurt");
_SoundEvents._ENTITY_ILLUSIONER_MIRROR_MOVE = _SoundEvents.register("entity.illusioner.mirror_move");
_SoundEvents._ENTITY_ILLUSIONER_PREPARE_BLINDNESS = _SoundEvents.register("entity.illusioner.prepare_blindness");
_SoundEvents._ENTITY_ILLUSIONER_PREPARE_MIRROR = _SoundEvents.register("entity.illusioner.prepare_mirror");
_SoundEvents._BLOCK_IRON_DOOR_CLOSE = _SoundEvents.register("block.iron_door.close");
_SoundEvents._BLOCK_IRON_DOOR_OPEN = _SoundEvents.register("block.iron_door.open");
_SoundEvents._ENTITY_IRON_GOLEM_ATTACK = _SoundEvents.register("entity.iron_golem.attack");
_SoundEvents._ENTITY_IRON_GOLEM_DEATH = _SoundEvents.register("entity.iron_golem.death");
_SoundEvents._ENTITY_IRON_GOLEM_HURT = _SoundEvents.register("entity.iron_golem.hurt");
_SoundEvents._ENTITY_IRON_GOLEM_STEP = _SoundEvents.register("entity.iron_golem.step");
_SoundEvents._BLOCK_IRON_TRAPDOOR_CLOSE = _SoundEvents.register("block.iron_trapdoor.close");
_SoundEvents._BLOCK_IRON_TRAPDOOR_OPEN = _SoundEvents.register("block.iron_trapdoor.open");
_SoundEvents._ENTITY_ITEM_FRAME_ADD_ITEM = _SoundEvents.register("entity.item_frame.add_item");
_SoundEvents._ENTITY_ITEM_FRAME_BREAK = _SoundEvents.register("entity.item_frame.break");
_SoundEvents._ENTITY_ITEM_FRAME_PLACE = _SoundEvents.register("entity.item_frame.place");
_SoundEvents._ENTITY_ITEM_FRAME_REMOVE_ITEM = _SoundEvents.register("entity.item_frame.remove_item");
_SoundEvents._ENTITY_ITEM_FRAME_ROTATE_ITEM = _SoundEvents.register("entity.item_frame.rotate_item");
_SoundEvents._ENTITY_ITEM_BREAK = _SoundEvents.register("entity.item.break");
_SoundEvents._ENTITY_ITEM_PICKUP = _SoundEvents.register("entity.item.pickup");
_SoundEvents._BLOCK_LADDER_BREAK = _SoundEvents.register("block.ladder.break");
_SoundEvents._BLOCK_LADDER_FALL = _SoundEvents.register("block.ladder.fall");
_SoundEvents._BLOCK_LADDER_HIT = _SoundEvents.register("block.ladder.hit");
_SoundEvents._BLOCK_LADDER_PLACE = _SoundEvents.register("block.ladder.place");
_SoundEvents._BLOCK_LADDER_STEP = _SoundEvents.register("block.ladder.step");
_SoundEvents._BLOCK_LANTERN_BREAK = _SoundEvents.register("block.lantern.break");
_SoundEvents._BLOCK_LANTERN_FALL = _SoundEvents.register("block.lantern.fall");
_SoundEvents._BLOCK_LANTERN_HIT = _SoundEvents.register("block.lantern.hit");
_SoundEvents._BLOCK_LANTERN_PLACE = _SoundEvents.register("block.lantern.place");
_SoundEvents._BLOCK_LANTERN_STEP = _SoundEvents.register("block.lantern.step");
_SoundEvents._BLOCK_LAVA_AMBIENT = _SoundEvents.register("block.lava.ambient");
_SoundEvents._BLOCK_LAVA_EXTINGUISH = _SoundEvents.register("block.lava.extinguish");
_SoundEvents._BLOCK_LAVA_POP = _SoundEvents.register("block.lava.pop");
_SoundEvents._ENTITY_LEASH_KNOT_BREAK = _SoundEvents.register("entity.leash_knot.break");
_SoundEvents._ENTITY_LEASH_KNOT_PLACE = _SoundEvents.register("entity.leash_knot.place");
_SoundEvents._BLOCK_LEVER_CLICK = _SoundEvents.register("block.lever.click");
_SoundEvents._ENTITY_LIGHTNING_BOLT_IMPACT = _SoundEvents.register("entity.lightning_bolt.impact");
_SoundEvents._ENTITY_LIGHTNING_BOLT_THUNDER = _SoundEvents.register("entity.lightning_bolt.thunder");
_SoundEvents._ENTITY_LINGERING_POTION_THROW = _SoundEvents.register("entity.lingering_potion.throw");
_SoundEvents._ENTITY_LLAMA_AMBIENT = _SoundEvents.register("entity.llama.ambient");
_SoundEvents._ENTITY_LLAMA_ANGRY = _SoundEvents.register("entity.llama.angry");
_SoundEvents._ENTITY_LLAMA_CHEST = _SoundEvents.register("entity.llama.chest");
_SoundEvents._ENTITY_LLAMA_DEATH = _SoundEvents.register("entity.llama.death");
_SoundEvents._ENTITY_LLAMA_EAT = _SoundEvents.register("entity.llama.eat");
_SoundEvents._ENTITY_LLAMA_HURT = _SoundEvents.register("entity.llama.hurt");
_SoundEvents._ENTITY_LLAMA_SPIT = _SoundEvents.register("entity.llama.spit");
_SoundEvents._ENTITY_LLAMA_STEP = _SoundEvents.register("entity.llama.step");
_SoundEvents._ENTITY_LLAMA_SWAG = _SoundEvents.register("entity.llama.swag");
_SoundEvents._ENTITY_MAGMA_CUBE_DEATH = _SoundEvents.register("entity.magma_cube.death");
_SoundEvents._ENTITY_MAGMA_CUBE_HURT = _SoundEvents.register("entity.magma_cube.hurt");
_SoundEvents._ENTITY_MAGMA_CUBE_JUMP = _SoundEvents.register("entity.magma_cube.jump");
_SoundEvents._ENTITY_MAGMA_CUBE_SQUISH = _SoundEvents.register("entity.magma_cube.squish");
_SoundEvents._BLOCK_METAL_BREAK = _SoundEvents.register("block.metal.break");
_SoundEvents._BLOCK_METAL_FALL = _SoundEvents.register("block.metal.fall");
_SoundEvents._BLOCK_METAL_HIT = _SoundEvents.register("block.metal.hit");
_SoundEvents._BLOCK_METAL_PLACE = _SoundEvents.register("block.metal.place");
_SoundEvents._BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF = _SoundEvents.register("block.metal_pressure_plate.click_off");
_SoundEvents._BLOCK_METAL_PRESSURE_PLATE_CLICK_ON = _SoundEvents.register("block.metal_pressure_plate.click_on");
_SoundEvents._BLOCK_METAL_STEP = _SoundEvents.register("block.metal.step");
_SoundEvents._ENTITY_MINECART_INSIDE = _SoundEvents.register("entity.minecart.inside");
_SoundEvents._ENTITY_MINECART_RIDING = _SoundEvents.register("entity.minecart.riding");
_SoundEvents._ENTITY_MOOSHROOM_CONVERT = _SoundEvents.register("entity.mooshroom.convert");
_SoundEvents._ENTITY_MOOSHROOM_EAT = _SoundEvents.register("entity.mooshroom.eat");
_SoundEvents._ENTITY_MOOSHROOM_MILK = _SoundEvents.register("entity.mooshroom.milk");
_SoundEvents._ENTITY_MOOSHROOM_SUSPICIOUS_MILK = _SoundEvents.register("entity.mooshroom.suspicious_milk");
_SoundEvents._ENTITY_MOOSHROOM_SHEAR = _SoundEvents.register("entity.mooshroom.shear");
_SoundEvents._ENTITY_MULE_AMBIENT = _SoundEvents.register("entity.mule.ambient");
_SoundEvents._ENTITY_MULE_CHEST = _SoundEvents.register("entity.mule.chest");
_SoundEvents._ENTITY_MULE_DEATH = _SoundEvents.register("entity.mule.death");
_SoundEvents._ENTITY_MULE_HURT = _SoundEvents.register("entity.mule.hurt");
_SoundEvents._MUSIC_CREATIVE = _SoundEvents.register("music.creative");
_SoundEvents._MUSIC_CREDITS = _SoundEvents.register("music.credits");
_SoundEvents._MUSIC_DRAGON = _SoundEvents.register("music.dragon");
_SoundEvents._MUSIC_END = _SoundEvents.register("music.end");
_SoundEvents._MUSIC_GAME = _SoundEvents.register("music.game");
_SoundEvents._MUSIC_MENU = _SoundEvents.register("music.menu");
_SoundEvents._MUSIC_NETHER = _SoundEvents.register("music.nether");
_SoundEvents._MUSIC_UNDER_WATER = _SoundEvents.register("music.under_water");
_SoundEvents._BLOCK_NETHER_WART_BREAK = _SoundEvents.register("block.nether_wart.break");
_SoundEvents._ITEM_NETHER_WART_PLANT = _SoundEvents.register("item.nether_wart.plant");
_SoundEvents._BLOCK_NOTE_BLOCK_BASEDRUM = _SoundEvents.register("block.note_block.basedrum");
_SoundEvents._BLOCK_NOTE_BLOCK_BASS = _SoundEvents.register("block.note_block.bass");
_SoundEvents._BLOCK_NOTE_BLOCK_BELL = _SoundEvents.register("block.note_block.bell");
_SoundEvents._BLOCK_NOTE_BLOCK_CHIME = _SoundEvents.register("block.note_block.chime");
_SoundEvents._BLOCK_NOTE_BLOCK_FLUTE = _SoundEvents.register("block.note_block.flute");
_SoundEvents._BLOCK_NOTE_BLOCK_GUITAR = _SoundEvents.register("block.note_block.guitar");
_SoundEvents._BLOCK_NOTE_BLOCK_HARP = _SoundEvents.register("block.note_block.harp");
_SoundEvents._BLOCK_NOTE_BLOCK_HAT = _SoundEvents.register("block.note_block.hat");
_SoundEvents._BLOCK_NOTE_BLOCK_PLING = _SoundEvents.register("block.note_block.pling");
_SoundEvents._BLOCK_NOTE_BLOCK_SNARE = _SoundEvents.register("block.note_block.snare");
_SoundEvents._BLOCK_NOTE_BLOCK_XYLOPHONE = _SoundEvents.register("block.note_block.xylophone");
_SoundEvents._BLOCK_NOTE_BLOCK_IRON_XYLOPHONE = _SoundEvents.register("block.note_block.iron_xylophone");
_SoundEvents._BLOCK_NOTE_BLOCK_COW_BELL = _SoundEvents.register("block.note_block.cow_bell");
_SoundEvents._BLOCK_NOTE_BLOCK_DIDGERIDOO = _SoundEvents.register("block.note_block.didgeridoo");
_SoundEvents._BLOCK_NOTE_BLOCK_BIT = _SoundEvents.register("block.note_block.bit");
_SoundEvents._BLOCK_NOTE_BLOCK_BANJO = _SoundEvents.register("block.note_block.banjo");
_SoundEvents._ENTITY_OCELOT_HURT = _SoundEvents.register("entity.ocelot.hurt");
_SoundEvents._ENTITY_OCELOT_AMBIENT = _SoundEvents.register("entity.ocelot.ambient");
_SoundEvents._ENTITY_OCELOT_DEATH = _SoundEvents.register("entity.ocelot.death");
_SoundEvents._ENTITY_PAINTING_BREAK = _SoundEvents.register("entity.painting.break");
_SoundEvents._ENTITY_PAINTING_PLACE = _SoundEvents.register("entity.painting.place");
_SoundEvents._ENTITY_PANDA_PRE_SNEEZE = _SoundEvents.register("entity.panda.pre_sneeze");
_SoundEvents._ENTITY_PANDA_SNEEZE = _SoundEvents.register("entity.panda.sneeze");
_SoundEvents._ENTITY_PANDA_AMBIENT = _SoundEvents.register("entity.panda.ambient");
_SoundEvents._ENTITY_PANDA_DEATH = _SoundEvents.register("entity.panda.death");
_SoundEvents._ENTITY_PANDA_EAT = _SoundEvents.register("entity.panda.eat");
_SoundEvents._ENTITY_PANDA_STEP = _SoundEvents.register("entity.panda.step");
_SoundEvents._ENTITY_PANDA_CANT_BREED = _SoundEvents.register("entity.panda.cant_breed");
_SoundEvents._ENTITY_PANDA_AGGRESSIVE_AMBIENT = _SoundEvents.register("entity.panda.aggressive_ambient");
_SoundEvents._ENTITY_PANDA_WORRIED_AMBIENT = _SoundEvents.register("entity.panda.worried_ambient");
_SoundEvents._ENTITY_PANDA_HURT = _SoundEvents.register("entity.panda.hurt");
_SoundEvents._ENTITY_PANDA_BITE = _SoundEvents.register("entity.panda.bite");
_SoundEvents._ENTITY_PARROT_AMBIENT = _SoundEvents.register("entity.parrot.ambient");
_SoundEvents._ENTITY_PARROT_DEATH = _SoundEvents.register("entity.parrot.death");
_SoundEvents._ENTITY_PARROT_EAT = _SoundEvents.register("entity.parrot.eat");
_SoundEvents._ENTITY_PARROT_FLY = _SoundEvents.register("entity.parrot.fly");
_SoundEvents._ENTITY_PARROT_HURT = _SoundEvents.register("entity.parrot.hurt");
_SoundEvents._ENTITY_PARROT_IMITATE_BLAZE = _SoundEvents.register("entity.parrot.imitate.blaze");
_SoundEvents._ENTITY_PARROT_IMITATE_CREEPER = _SoundEvents.register("entity.parrot.imitate.creeper");
_SoundEvents._ENTITY_PARROT_IMITATE_DROWNED = _SoundEvents.register("entity.parrot.imitate.drowned");
_SoundEvents._ENTITY_PARROT_IMITATE_ELDER_GUARDIAN = _SoundEvents.register("entity.parrot.imitate.elder_guardian");
_SoundEvents._ENTITY_PARROT_IMITATE_ENDER_DRAGON = _SoundEvents.register("entity.parrot.imitate.ender_dragon");
_SoundEvents._ENTITY_PARROT_IMITATE_ENDERMAN = _SoundEvents.register("entity.parrot.imitate.enderman");
_SoundEvents._ENTITY_PARROT_IMITATE_ENDERMITE = _SoundEvents.register("entity.parrot.imitate.endermite");
_SoundEvents._ENTITY_PARROT_IMITATE_EVOKER = _SoundEvents.register("entity.parrot.imitate.evoker");
_SoundEvents._ENTITY_PARROT_IMITATE_GHAST = _SoundEvents.register("entity.parrot.imitate.ghast");
_SoundEvents._ENTITY_PARROT_IMITATE_GUARDIAN = _SoundEvents.register("entity.parrot.imitate.guardian");
_SoundEvents._ENTITY_PARROT_IMITATE_HUSK = _SoundEvents.register("entity.parrot.imitate.husk");
_SoundEvents._ENTITY_PARROT_IMITATE_ILLUSIONER = _SoundEvents.register("entity.parrot.imitate.illusioner");
_SoundEvents._ENTITY_PARROT_IMITATE_MAGMA_CUBE = _SoundEvents.register("entity.parrot.imitate.magma_cube");
_SoundEvents._ENTITY_PARROT_IMITATE_PANDA = _SoundEvents.register("entity.parrot.imitate.panda");
_SoundEvents._ENTITY_PARROT_IMITATE_PHANTOM = _SoundEvents.register("entity.parrot.imitate.phantom");
_SoundEvents._ENTITY_PARROT_IMITATE_PILLAGER = _SoundEvents.register("entity.parrot.imitate.pillager");
_SoundEvents._ENTITY_PARROT_IMITATE_POLAR_BEAR = _SoundEvents.register("entity.parrot.imitate.polar_bear");
_SoundEvents._ENTITY_PARROT_IMITATE_RAVAGER = _SoundEvents.register("entity.parrot.imitate.ravager");
_SoundEvents._ENTITY_PARROT_IMITATE_SHULKER = _SoundEvents.register("entity.parrot.imitate.shulker");
_SoundEvents._ENTITY_PARROT_IMITATE_SILVERFISH = _SoundEvents.register("entity.parrot.imitate.silverfish");
_SoundEvents._ENTITY_PARROT_IMITATE_SKELETON = _SoundEvents.register("entity.parrot.imitate.skeleton");
_SoundEvents._ENTITY_PARROT_IMITATE_SLIME = _SoundEvents.register("entity.parrot.imitate.slime");
_SoundEvents._ENTITY_PARROT_IMITATE_SPIDER = _SoundEvents.register("entity.parrot.imitate.spider");
_SoundEvents._ENTITY_PARROT_IMITATE_STRAY = _SoundEvents.register("entity.parrot.imitate.stray");
_SoundEvents._ENTITY_PARROT_IMITATE_VEX = _SoundEvents.register("entity.parrot.imitate.vex");
_SoundEvents._ENTITY_PARROT_IMITATE_VINDICATOR = _SoundEvents.register("entity.parrot.imitate.vindicator");
_SoundEvents._ENTITY_PARROT_IMITATE_WITCH = _SoundEvents.register("entity.parrot.imitate.witch");
_SoundEvents._ENTITY_PARROT_IMITATE_WITHER = _SoundEvents.register("entity.parrot.imitate.wither");
_SoundEvents._ENTITY_PARROT_IMITATE_WITHER_SKELETON = _SoundEvents.register("entity.parrot.imitate.wither_skeleton");
_SoundEvents._ENTITY_PARROT_IMITATE_WOLF = _SoundEvents.register("entity.parrot.imitate.wolf");
_SoundEvents._ENTITY_PARROT_IMITATE_ZOMBIE = _SoundEvents.register("entity.parrot.imitate.zombie");
_SoundEvents._ENTITY_PARROT_IMITATE_ZOMBIE_PIGMAN = _SoundEvents.register("entity.parrot.imitate.zombie_pigman");
_SoundEvents._ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER = _SoundEvents.register("entity.parrot.imitate.zombie_villager");
_SoundEvents._ENTITY_PARROT_STEP = _SoundEvents.register("entity.parrot.step");
_SoundEvents._ENTITY_PHANTOM_AMBIENT = _SoundEvents.register("entity.phantom.ambient");
_SoundEvents._ENTITY_PHANTOM_BITE = _SoundEvents.register("entity.phantom.bite");
_SoundEvents._ENTITY_PHANTOM_DEATH = _SoundEvents.register("entity.phantom.death");
_SoundEvents._ENTITY_PHANTOM_FLAP = _SoundEvents.register("entity.phantom.flap");
_SoundEvents._ENTITY_PHANTOM_HURT = _SoundEvents.register("entity.phantom.hurt");
_SoundEvents._ENTITY_PHANTOM_SWOOP = _SoundEvents.register("entity.phantom.swoop");
_SoundEvents._ENTITY_PIG_AMBIENT = _SoundEvents.register("entity.pig.ambient");
_SoundEvents._ENTITY_PIG_DEATH = _SoundEvents.register("entity.pig.death");
_SoundEvents._ENTITY_PIG_HURT = _SoundEvents.register("entity.pig.hurt");
_SoundEvents._ENTITY_PIG_SADDLE = _SoundEvents.register("entity.pig.saddle");
_SoundEvents._ENTITY_PIG_STEP = _SoundEvents.register("entity.pig.step");
_SoundEvents._ENTITY_PILLAGER_AMBIENT = _SoundEvents.register("entity.pillager.ambient");
_SoundEvents._ENTITY_PILLAGER_CELEBRATE = _SoundEvents.register("entity.pillager.celebrate");
_SoundEvents._ENTITY_PILLAGER_DEATH = _SoundEvents.register("entity.pillager.death");
_SoundEvents._ENTITY_PILLAGER_HURT = _SoundEvents.register("entity.pillager.hurt");
_SoundEvents._BLOCK_PISTON_CONTRACT = _SoundEvents.register("block.piston.contract");
_SoundEvents._BLOCK_PISTON_EXTEND = _SoundEvents.register("block.piston.extend");
_SoundEvents._ENTITY_PLAYER_ATTACK_CRIT = _SoundEvents.register("entity.player.attack.crit");
_SoundEvents._ENTITY_PLAYER_ATTACK_KNOCKBACK = _SoundEvents.register("entity.player.attack.knockback");
_SoundEvents._ENTITY_PLAYER_ATTACK_NODAMAGE = _SoundEvents.register("entity.player.attack.nodamage");
_SoundEvents._ENTITY_PLAYER_ATTACK_STRONG = _SoundEvents.register("entity.player.attack.strong");
_SoundEvents._ENTITY_PLAYER_ATTACK_SWEEP = _SoundEvents.register("entity.player.attack.sweep");
_SoundEvents._ENTITY_PLAYER_ATTACK_WEAK = _SoundEvents.register("entity.player.attack.weak");
_SoundEvents._ENTITY_PLAYER_BIG_FALL = _SoundEvents.register("entity.player.big_fall");
_SoundEvents._ENTITY_PLAYER_BREATH = _SoundEvents.register("entity.player.breath");
_SoundEvents._ENTITY_PLAYER_BURP = _SoundEvents.register("entity.player.burp");
_SoundEvents._ENTITY_PLAYER_DEATH = _SoundEvents.register("entity.player.death");
_SoundEvents._ENTITY_PLAYER_HURT = _SoundEvents.register("entity.player.hurt");
_SoundEvents._ENTITY_PLAYER_HURT_DROWN = _SoundEvents.register("entity.player.hurt_drown");
_SoundEvents._ENTITY_PLAYER_HURT_ON_FIRE = _SoundEvents.register("entity.player.hurt_on_fire");
_SoundEvents._ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH = _SoundEvents.register("entity.player.hurt_sweet_berry_bush");
_SoundEvents._ENTITY_PLAYER_LEVELUP = _SoundEvents.register("entity.player.levelup");
_SoundEvents._ENTITY_PLAYER_SMALL_FALL = _SoundEvents.register("entity.player.small_fall");
_SoundEvents._ENTITY_PLAYER_SPLASH = _SoundEvents.register("entity.player.splash");
_SoundEvents._ENTITY_PLAYER_SPLASH_HIGH_SPEED = _SoundEvents.register("entity.player.splash.high_speed");
_SoundEvents._ENTITY_PLAYER_SWIM = _SoundEvents.register("entity.player.swim");
_SoundEvents._ENTITY_POLAR_BEAR_AMBIENT = _SoundEvents.register("entity.polar_bear.ambient");
_SoundEvents._ENTITY_POLAR_BEAR_AMBIENT_BABY = _SoundEvents.register("entity.polar_bear.ambient_baby");
_SoundEvents._ENTITY_POLAR_BEAR_DEATH = _SoundEvents.register("entity.polar_bear.death");
_SoundEvents._ENTITY_POLAR_BEAR_HURT = _SoundEvents.register("entity.polar_bear.hurt");
_SoundEvents._ENTITY_POLAR_BEAR_STEP = _SoundEvents.register("entity.polar_bear.step");
_SoundEvents._ENTITY_POLAR_BEAR_WARNING = _SoundEvents.register("entity.polar_bear.warning");
_SoundEvents._BLOCK_PORTAL_AMBIENT = _SoundEvents.register("block.portal.ambient");
_SoundEvents._BLOCK_PORTAL_TRAVEL = _SoundEvents.register("block.portal.travel");
_SoundEvents._BLOCK_PORTAL_TRIGGER = _SoundEvents.register("block.portal.trigger");
_SoundEvents._ENTITY_PUFFER_FISH_AMBIENT = _SoundEvents.register("entity.puffer_fish.ambient");
_SoundEvents._ENTITY_PUFFER_FISH_BLOW_OUT = _SoundEvents.register("entity.puffer_fish.blow_out");
_SoundEvents._ENTITY_PUFFER_FISH_BLOW_UP = _SoundEvents.register("entity.puffer_fish.blow_up");
_SoundEvents._ENTITY_PUFFER_FISH_DEATH = _SoundEvents.register("entity.puffer_fish.death");
_SoundEvents._ENTITY_PUFFER_FISH_FLOP = _SoundEvents.register("entity.puffer_fish.flop");
_SoundEvents._ENTITY_PUFFER_FISH_HURT = _SoundEvents.register("entity.puffer_fish.hurt");
_SoundEvents._ENTITY_PUFFER_FISH_STING = _SoundEvents.register("entity.puffer_fish.sting");
_SoundEvents._BLOCK_PUMPKIN_CARVE = _SoundEvents.register("block.pumpkin.carve");
_SoundEvents._ENTITY_RABBIT_AMBIENT = _SoundEvents.register("entity.rabbit.ambient");
_SoundEvents._ENTITY_RABBIT_ATTACK = _SoundEvents.register("entity.rabbit.attack");
_SoundEvents._ENTITY_RABBIT_DEATH = _SoundEvents.register("entity.rabbit.death");
_SoundEvents._ENTITY_RABBIT_HURT = _SoundEvents.register("entity.rabbit.hurt");
_SoundEvents._ENTITY_RABBIT_JUMP = _SoundEvents.register("entity.rabbit.jump");
_SoundEvents._EVENT_RAID_HORN = _SoundEvents.register("event.raid.horn");
_SoundEvents._MUSIC_DISC_11 = _SoundEvents.register("music_disc.11");
_SoundEvents._MUSIC_DISC_13 = _SoundEvents.register("music_disc.13");
_SoundEvents._MUSIC_DISC_BLOCKS = _SoundEvents.register("music_disc.blocks");
_SoundEvents._MUSIC_DISC_CAT = _SoundEvents.register("music_disc.cat");
_SoundEvents._MUSIC_DISC_CHIRP = _SoundEvents.register("music_disc.chirp");
_SoundEvents._MUSIC_DISC_FAR = _SoundEvents.register("music_disc.far");
_SoundEvents._MUSIC_DISC_MALL = _SoundEvents.register("music_disc.mall");
_SoundEvents._MUSIC_DISC_MELLOHI = _SoundEvents.register("music_disc.mellohi");
_SoundEvents._MUSIC_DISC_STAL = _SoundEvents.register("music_disc.stal");
_SoundEvents._MUSIC_DISC_STRAD = _SoundEvents.register("music_disc.strad");
_SoundEvents._MUSIC_DISC_WAIT = _SoundEvents.register("music_disc.wait");
_SoundEvents._MUSIC_DISC_WARD = _SoundEvents.register("music_disc.ward");
_SoundEvents._BLOCK_REDSTONE_TORCH_BURNOUT = _SoundEvents.register("block.redstone_torch.burnout");
_SoundEvents._ENTITY_SALMON_AMBIENT = _SoundEvents.register("entity.salmon.ambient");
_SoundEvents._ENTITY_SALMON_DEATH = _SoundEvents.register("entity.salmon.death");
_SoundEvents._ENTITY_SALMON_FLOP = _SoundEvents.register("entity.salmon.flop");
_SoundEvents._ENTITY_SALMON_HURT = _SoundEvents.register("entity.salmon.hurt");
_SoundEvents._BLOCK_SAND_BREAK = _SoundEvents.register("block.sand.break");
_SoundEvents._BLOCK_SAND_FALL = _SoundEvents.register("block.sand.fall");
_SoundEvents._BLOCK_SAND_HIT = _SoundEvents.register("block.sand.hit");
_SoundEvents._BLOCK_SAND_PLACE = _SoundEvents.register("block.sand.place");
_SoundEvents._BLOCK_SAND_STEP = _SoundEvents.register("block.sand.step");
_SoundEvents._BLOCK_SCAFFOLDING_BREAK = _SoundEvents.register("block.scaffolding.break");
_SoundEvents._BLOCK_SCAFFOLDING_FALL = _SoundEvents.register("block.scaffolding.fall");
_SoundEvents._BLOCK_SCAFFOLDING_HIT = _SoundEvents.register("block.scaffolding.hit");
_SoundEvents._BLOCK_SCAFFOLDING_PLACE = _SoundEvents.register("block.scaffolding.place");
_SoundEvents._BLOCK_SCAFFOLDING_STEP = _SoundEvents.register("block.scaffolding.step");
_SoundEvents._ENTITY_SHEEP_AMBIENT = _SoundEvents.register("entity.sheep.ambient");
_SoundEvents._ENTITY_SHEEP_DEATH = _SoundEvents.register("entity.sheep.death");
_SoundEvents._ENTITY_SHEEP_HURT = _SoundEvents.register("entity.sheep.hurt");
_SoundEvents._ENTITY_SHEEP_SHEAR = _SoundEvents.register("entity.sheep.shear");
_SoundEvents._ENTITY_SHEEP_STEP = _SoundEvents.register("entity.sheep.step");
_SoundEvents._ITEM_SHIELD_BLOCK = _SoundEvents.register("item.shield.block");
_SoundEvents._ITEM_SHIELD_BREAK = _SoundEvents.register("item.shield.break");
_SoundEvents._ITEM_SHOVEL_FLATTEN = _SoundEvents.register("item.shovel.flatten");
_SoundEvents._ENTITY_SHULKER_AMBIENT = _SoundEvents.register("entity.shulker.ambient");
_SoundEvents._BLOCK_SHULKER_BOX_CLOSE = _SoundEvents.register("block.shulker_box.close");
_SoundEvents._BLOCK_SHULKER_BOX_OPEN = _SoundEvents.register("block.shulker_box.open");
_SoundEvents._ENTITY_SHULKER_BULLET_HIT = _SoundEvents.register("entity.shulker_bullet.hit");
_SoundEvents._ENTITY_SHULKER_BULLET_HURT = _SoundEvents.register("entity.shulker_bullet.hurt");
_SoundEvents._ENTITY_SHULKER_CLOSE = _SoundEvents.register("entity.shulker.close");
_SoundEvents._ENTITY_SHULKER_DEATH = _SoundEvents.register("entity.shulker.death");
_SoundEvents._ENTITY_SHULKER_HURT = _SoundEvents.register("entity.shulker.hurt");
_SoundEvents._ENTITY_SHULKER_HURT_CLOSED = _SoundEvents.register("entity.shulker.hurt_closed");
_SoundEvents._ENTITY_SHULKER_OPEN = _SoundEvents.register("entity.shulker.open");
_SoundEvents._ENTITY_SHULKER_SHOOT = _SoundEvents.register("entity.shulker.shoot");
_SoundEvents._ENTITY_SHULKER_TELEPORT = _SoundEvents.register("entity.shulker.teleport");
_SoundEvents._ENTITY_SILVERFISH_AMBIENT = _SoundEvents.register("entity.silverfish.ambient");
_SoundEvents._ENTITY_SILVERFISH_DEATH = _SoundEvents.register("entity.silverfish.death");
_SoundEvents._ENTITY_SILVERFISH_HURT = _SoundEvents.register("entity.silverfish.hurt");
_SoundEvents._ENTITY_SILVERFISH_STEP = _SoundEvents.register("entity.silverfish.step");
_SoundEvents._ENTITY_SKELETON_AMBIENT = _SoundEvents.register("entity.skeleton.ambient");
_SoundEvents._ENTITY_SKELETON_DEATH = _SoundEvents.register("entity.skeleton.death");
_SoundEvents._ENTITY_SKELETON_HORSE_AMBIENT = _SoundEvents.register("entity.skeleton_horse.ambient");
_SoundEvents._ENTITY_SKELETON_HORSE_DEATH = _SoundEvents.register("entity.skeleton_horse.death");
_SoundEvents._ENTITY_SKELETON_HORSE_HURT = _SoundEvents.register("entity.skeleton_horse.hurt");
_SoundEvents._ENTITY_SKELETON_HORSE_SWIM = _SoundEvents.register("entity.skeleton_horse.swim");
_SoundEvents._ENTITY_SKELETON_HORSE_AMBIENT_WATER = _SoundEvents.register("entity.skeleton_horse.ambient_water");
_SoundEvents._ENTITY_SKELETON_HORSE_GALLOP_WATER = _SoundEvents.register("entity.skeleton_horse.gallop_water");
_SoundEvents._ENTITY_SKELETON_HORSE_JUMP_WATER = _SoundEvents.register("entity.skeleton_horse.jump_water");
_SoundEvents._ENTITY_SKELETON_HORSE_STEP_WATER = _SoundEvents.register("entity.skeleton_horse.step_water");
_SoundEvents._ENTITY_SKELETON_HURT = _SoundEvents.register("entity.skeleton.hurt");
_SoundEvents._ENTITY_SKELETON_SHOOT = _SoundEvents.register("entity.skeleton.shoot");
_SoundEvents._ENTITY_SKELETON_STEP = _SoundEvents.register("entity.skeleton.step");
_SoundEvents._ENTITY_SLIME_ATTACK = _SoundEvents.register("entity.slime.attack");
_SoundEvents._ENTITY_SLIME_DEATH = _SoundEvents.register("entity.slime.death");
_SoundEvents._ENTITY_SLIME_HURT = _SoundEvents.register("entity.slime.hurt");
_SoundEvents._ENTITY_SLIME_JUMP = _SoundEvents.register("entity.slime.jump");
_SoundEvents._ENTITY_SLIME_SQUISH = _SoundEvents.register("entity.slime.squish");
_SoundEvents._BLOCK_SLIME_BLOCK_BREAK = _SoundEvents.register("block.slime_block.break");
_SoundEvents._BLOCK_SLIME_BLOCK_FALL = _SoundEvents.register("block.slime_block.fall");
_SoundEvents._BLOCK_SLIME_BLOCK_HIT = _SoundEvents.register("block.slime_block.hit");
_SoundEvents._BLOCK_SLIME_BLOCK_PLACE = _SoundEvents.register("block.slime_block.place");
_SoundEvents._BLOCK_SLIME_BLOCK_STEP = _SoundEvents.register("block.slime_block.step");
_SoundEvents._ENTITY_MAGMA_CUBE_DEATH_SMALL = _SoundEvents.register("entity.magma_cube.death_small");
_SoundEvents._ENTITY_MAGMA_CUBE_HURT_SMALL = _SoundEvents.register("entity.magma_cube.hurt_small");
_SoundEvents._ENTITY_MAGMA_CUBE_SQUISH_SMALL = _SoundEvents.register("entity.magma_cube.squish_small");
_SoundEvents._ENTITY_SLIME_DEATH_SMALL = _SoundEvents.register("entity.slime.death_small");
_SoundEvents._ENTITY_SLIME_HURT_SMALL = _SoundEvents.register("entity.slime.hurt_small");
_SoundEvents._ENTITY_SLIME_JUMP_SMALL = _SoundEvents.register("entity.slime.jump_small");
_SoundEvents._ENTITY_SLIME_SQUISH_SMALL = _SoundEvents.register("entity.slime.squish_small");
_SoundEvents._BLOCK_SMOKER_SMOKE = _SoundEvents.register("block.smoker.smoke");
_SoundEvents._ENTITY_SNOWBALL_THROW = _SoundEvents.register("entity.snowball.throw");
_SoundEvents._BLOCK_SNOW_BREAK = _SoundEvents.register("block.snow.break");
_SoundEvents._BLOCK_SNOW_FALL = _SoundEvents.register("block.snow.fall");
_SoundEvents._ENTITY_SNOW_GOLEM_AMBIENT = _SoundEvents.register("entity.snow_golem.ambient");
_SoundEvents._ENTITY_SNOW_GOLEM_DEATH = _SoundEvents.register("entity.snow_golem.death");
_SoundEvents._ENTITY_SNOW_GOLEM_HURT = _SoundEvents.register("entity.snow_golem.hurt");
_SoundEvents._ENTITY_SNOW_GOLEM_SHOOT = _SoundEvents.register("entity.snow_golem.shoot");
_SoundEvents._BLOCK_SNOW_HIT = _SoundEvents.register("block.snow.hit");
_SoundEvents._BLOCK_SNOW_PLACE = _SoundEvents.register("block.snow.place");
_SoundEvents._BLOCK_SNOW_STEP = _SoundEvents.register("block.snow.step");
_SoundEvents._ENTITY_SPIDER_AMBIENT = _SoundEvents.register("entity.spider.ambient");
_SoundEvents._ENTITY_SPIDER_DEATH = _SoundEvents.register("entity.spider.death");
_SoundEvents._ENTITY_SPIDER_HURT = _SoundEvents.register("entity.spider.hurt");
_SoundEvents._ENTITY_SPIDER_STEP = _SoundEvents.register("entity.spider.step");
_SoundEvents._ENTITY_SPLASH_POTION_BREAK = _SoundEvents.register("entity.splash_potion.break");
_SoundEvents._ENTITY_SPLASH_POTION_THROW = _SoundEvents.register("entity.splash_potion.throw");
_SoundEvents._ENTITY_SQUID_AMBIENT = _SoundEvents.register("entity.squid.ambient");
_SoundEvents._ENTITY_SQUID_DEATH = _SoundEvents.register("entity.squid.death");
_SoundEvents._ENTITY_SQUID_HURT = _SoundEvents.register("entity.squid.hurt");
_SoundEvents._ENTITY_SQUID_SQUIRT = _SoundEvents.register("entity.squid.squirt");
_SoundEvents._BLOCK_STONE_BREAK = _SoundEvents.register("block.stone.break");
_SoundEvents._BLOCK_STONE_BUTTON_CLICK_OFF = _SoundEvents.register("block.stone_button.click_off");
_SoundEvents._BLOCK_STONE_BUTTON_CLICK_ON = _SoundEvents.register("block.stone_button.click_on");
_SoundEvents._BLOCK_STONE_FALL = _SoundEvents.register("block.stone.fall");
_SoundEvents._BLOCK_STONE_HIT = _SoundEvents.register("block.stone.hit");
_SoundEvents._BLOCK_STONE_PLACE = _SoundEvents.register("block.stone.place");
_SoundEvents._BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF = _SoundEvents.register("block.stone_pressure_plate.click_off");
_SoundEvents._BLOCK_STONE_PRESSURE_PLATE_CLICK_ON = _SoundEvents.register("block.stone_pressure_plate.click_on");
_SoundEvents._BLOCK_STONE_STEP = _SoundEvents.register("block.stone.step");
_SoundEvents._ENTITY_STRAY_AMBIENT = _SoundEvents.register("entity.stray.ambient");
_SoundEvents._ENTITY_STRAY_DEATH = _SoundEvents.register("entity.stray.death");
_SoundEvents._ENTITY_STRAY_HURT = _SoundEvents.register("entity.stray.hurt");
_SoundEvents._ENTITY_STRAY_STEP = _SoundEvents.register("entity.stray.step");
_SoundEvents._BLOCK_SWEET_BERRY_BUSH_BREAK = _SoundEvents.register("block.sweet_berry_bush.break");
_SoundEvents._BLOCK_SWEET_BERRY_BUSH_PLACE = _SoundEvents.register("block.sweet_berry_bush.place");
_SoundEvents._ITEM_SWEET_BERRIES_PICK_FROM_BUSH = _SoundEvents.register("item.sweet_berries.pick_from_bush");
_SoundEvents._ENCHANT_THORNS_HIT = _SoundEvents.register("enchant.thorns.hit");
_SoundEvents._ENTITY_TNT_PRIMED = _SoundEvents.register("entity.tnt.primed");
_SoundEvents._ITEM_TOTEM_USE = _SoundEvents.register("item.totem.use");
_SoundEvents._ITEM_TRIDENT_HIT = _SoundEvents.register("item.trident.hit");
_SoundEvents._ITEM_TRIDENT_HIT_GROUND = _SoundEvents.register("item.trident.hit_ground");
_SoundEvents._ITEM_TRIDENT_RETURN = _SoundEvents.register("item.trident.return");
_SoundEvents._ITEM_TRIDENT_RIPTIDE_1 = _SoundEvents.register("item.trident.riptide_1");
_SoundEvents._ITEM_TRIDENT_RIPTIDE_2 = _SoundEvents.register("item.trident.riptide_2");
_SoundEvents._ITEM_TRIDENT_RIPTIDE_3 = _SoundEvents.register("item.trident.riptide_3");
_SoundEvents._ITEM_TRIDENT_THROW = _SoundEvents.register("item.trident.throw");
_SoundEvents._ITEM_TRIDENT_THUNDER = _SoundEvents.register("item.trident.thunder");
_SoundEvents._BLOCK_TRIPWIRE_ATTACH = _SoundEvents.register("block.tripwire.attach");
_SoundEvents._BLOCK_TRIPWIRE_CLICK_OFF = _SoundEvents.register("block.tripwire.click_off");
_SoundEvents._BLOCK_TRIPWIRE_CLICK_ON = _SoundEvents.register("block.tripwire.click_on");
_SoundEvents._BLOCK_TRIPWIRE_DETACH = _SoundEvents.register("block.tripwire.detach");
_SoundEvents._ENTITY_TROPICAL_FISH_AMBIENT = _SoundEvents.register("entity.tropical_fish.ambient");
_SoundEvents._ENTITY_TROPICAL_FISH_DEATH = _SoundEvents.register("entity.tropical_fish.death");
_SoundEvents._ENTITY_TROPICAL_FISH_FLOP = _SoundEvents.register("entity.tropical_fish.flop");
_SoundEvents._ENTITY_TROPICAL_FISH_HURT = _SoundEvents.register("entity.tropical_fish.hurt");
_SoundEvents._ENTITY_TURTLE_AMBIENT_LAND = _SoundEvents.register("entity.turtle.ambient_land");
_SoundEvents._ENTITY_TURTLE_DEATH = _SoundEvents.register("entity.turtle.death");
_SoundEvents._ENTITY_TURTLE_DEATH_BABY = _SoundEvents.register("entity.turtle.death_baby");
_SoundEvents._ENTITY_TURTLE_EGG_BREAK = _SoundEvents.register("entity.turtle.egg_break");
_SoundEvents._ENTITY_TURTLE_EGG_CRACK = _SoundEvents.register("entity.turtle.egg_crack");
_SoundEvents._ENTITY_TURTLE_EGG_HATCH = _SoundEvents.register("entity.turtle.egg_hatch");
_SoundEvents._ENTITY_TURTLE_HURT = _SoundEvents.register("entity.turtle.hurt");
_SoundEvents._ENTITY_TURTLE_HURT_BABY = _SoundEvents.register("entity.turtle.hurt_baby");
_SoundEvents._ENTITY_TURTLE_LAY_EGG = _SoundEvents.register("entity.turtle.lay_egg");
_SoundEvents._ENTITY_TURTLE_SHAMBLE = _SoundEvents.register("entity.turtle.shamble");
_SoundEvents._ENTITY_TURTLE_SHAMBLE_BABY = _SoundEvents.register("entity.turtle.shamble_baby");
_SoundEvents._ENTITY_TURTLE_SWIM = _SoundEvents.register("entity.turtle.swim");
_SoundEvents._UI_BUTTON_CLICK = _SoundEvents.register("ui.button.click");
_SoundEvents._UI_LOOM_SELECT_PATTERN = _SoundEvents.register("ui.loom.select_pattern");
_SoundEvents._UI_LOOM_TAKE_RESULT = _SoundEvents.register("ui.loom.take_result");
_SoundEvents._UI_CARTOGRAPHY_TABLE_TAKE_RESULT = _SoundEvents.register("ui.cartography_table.take_result");
_SoundEvents._UI_STONECUTTER_TAKE_RESULT = _SoundEvents.register("ui.stonecutter.take_result");
_SoundEvents._UI_STONECUTTER_SELECT_RECIPE = _SoundEvents.register("ui.stonecutter.select_recipe");
_SoundEvents._UI_TOAST_CHALLENGE_COMPLETE = _SoundEvents.register("ui.toast.challenge_complete");
_SoundEvents._UI_TOAST_IN = _SoundEvents.register("ui.toast.in");
_SoundEvents._UI_TOAST_OUT = _SoundEvents.register("ui.toast.out");
_SoundEvents._ENTITY_VEX_AMBIENT = _SoundEvents.register("entity.vex.ambient");
_SoundEvents._ENTITY_VEX_CHARGE = _SoundEvents.register("entity.vex.charge");
_SoundEvents._ENTITY_VEX_DEATH = _SoundEvents.register("entity.vex.death");
_SoundEvents._ENTITY_VEX_HURT = _SoundEvents.register("entity.vex.hurt");
_SoundEvents._ENTITY_VILLAGER_AMBIENT = _SoundEvents.register("entity.villager.ambient");
_SoundEvents._ENTITY_VILLAGER_CELEBRATE = _SoundEvents.register("entity.villager.celebrate");
_SoundEvents._ENTITY_VILLAGER_DEATH = _SoundEvents.register("entity.villager.death");
_SoundEvents._ENTITY_VILLAGER_HURT = _SoundEvents.register("entity.villager.hurt");
_SoundEvents._ENTITY_VILLAGER_NO = _SoundEvents.register("entity.villager.no");
_SoundEvents._ENTITY_VILLAGER_TRADE = _SoundEvents.register("entity.villager.trade");
_SoundEvents._ENTITY_VILLAGER_YES = _SoundEvents.register("entity.villager.yes");
_SoundEvents._ENTITY_VILLAGER_WORK_ARMORER = _SoundEvents.register("entity.villager.work_armorer");
_SoundEvents._ENTITY_VILLAGER_WORK_BUTCHER = _SoundEvents.register("entity.villager.work_butcher");
_SoundEvents._ENTITY_VILLAGER_WORK_CARTOGRAPHER = _SoundEvents.register("entity.villager.work_cartographer");
_SoundEvents._ENTITY_VILLAGER_WORK_CLERIC = _SoundEvents.register("entity.villager.work_cleric");
_SoundEvents._ENTITY_VILLAGER_WORK_FARMER = _SoundEvents.register("entity.villager.work_farmer");
_SoundEvents._ENTITY_VILLAGER_WORK_FISHERMAN = _SoundEvents.register("entity.villager.work_fisherman");
_SoundEvents._ENTITY_VILLAGER_WORK_FLETCHER = _SoundEvents.register("entity.villager.work_fletcher");
_SoundEvents._ENTITY_VILLAGER_WORK_LEATHERWORKER = _SoundEvents.register("entity.villager.work_leatherworker");
_SoundEvents._ENTITY_VILLAGER_WORK_LIBRARIAN = _SoundEvents.register("entity.villager.work_librarian");
_SoundEvents._ENTITY_VILLAGER_WORK_MASON = _SoundEvents.register("entity.villager.work_mason");
_SoundEvents._ENTITY_VILLAGER_WORK_SHEPHERD = _SoundEvents.register("entity.villager.work_shepherd");
_SoundEvents._ENTITY_VILLAGER_WORK_TOOLSMITH = _SoundEvents.register("entity.villager.work_toolsmith");
_SoundEvents._ENTITY_VILLAGER_WORK_WEAPONSMITH = _SoundEvents.register("entity.villager.work_weaponsmith");
_SoundEvents._ENTITY_VINDICATOR_AMBIENT = _SoundEvents.register("entity.vindicator.ambient");
_SoundEvents._ENTITY_VINDICATOR_CELEBRATE = _SoundEvents.register("entity.vindicator.celebrate");
_SoundEvents._ENTITY_VINDICATOR_DEATH = _SoundEvents.register("entity.vindicator.death");
_SoundEvents._ENTITY_VINDICATOR_HURT = _SoundEvents.register("entity.vindicator.hurt");
_SoundEvents._BLOCK_LILY_PAD_PLACE = _SoundEvents.register("block.lily_pad.place");
_SoundEvents._ENTITY_WANDERING_TRADER_AMBIENT = _SoundEvents.register("entity.wandering_trader.ambient");
_SoundEvents._ENTITY_WANDERING_TRADER_DEATH = _SoundEvents.register("entity.wandering_trader.death");
_SoundEvents._ENTITY_WANDERING_TRADER_DISAPPEARED = _SoundEvents.register("entity.wandering_trader.disappeared");
_SoundEvents._ENTITY_WANDERING_TRADER_DRINK_MILK = _SoundEvents.register("entity.wandering_trader.drink_milk");
_SoundEvents._ENTITY_WANDERING_TRADER_DRINK_POTION = _SoundEvents.register("entity.wandering_trader.drink_potion");
_SoundEvents._ENTITY_WANDERING_TRADER_HURT = _SoundEvents.register("entity.wandering_trader.hurt");
_SoundEvents._ENTITY_WANDERING_TRADER_NO = _SoundEvents.register("entity.wandering_trader.no");
_SoundEvents._ENTITY_WANDERING_TRADER_REAPPEARED = _SoundEvents.register("entity.wandering_trader.reappeared");
_SoundEvents._ENTITY_WANDERING_TRADER_TRADE = _SoundEvents.register("entity.wandering_trader.trade");
_SoundEvents._ENTITY_WANDERING_TRADER_YES = _SoundEvents.register("entity.wandering_trader.yes");
_SoundEvents._BLOCK_WATER_AMBIENT = _SoundEvents.register("block.water.ambient");
_SoundEvents._WEATHER_RAIN = _SoundEvents.register("weather.rain");
_SoundEvents._WEATHER_RAIN_ABOVE = _SoundEvents.register("weather.rain.above");
_SoundEvents._ENTITY_WITCH_AMBIENT = _SoundEvents.register("entity.witch.ambient");
_SoundEvents._ENTITY_WITCH_CELEBRATE = _SoundEvents.register("entity.witch.celebrate");
_SoundEvents._ENTITY_WITCH_DEATH = _SoundEvents.register("entity.witch.death");
_SoundEvents._ENTITY_WITCH_DRINK = _SoundEvents.register("entity.witch.drink");
_SoundEvents._ENTITY_WITCH_HURT = _SoundEvents.register("entity.witch.hurt");
_SoundEvents._ENTITY_WITCH_THROW = _SoundEvents.register("entity.witch.throw");
_SoundEvents._ENTITY_WITHER_AMBIENT = _SoundEvents.register("entity.wither.ambient");
_SoundEvents._ENTITY_WITHER_BREAK_BLOCK = _SoundEvents.register("entity.wither.break_block");
_SoundEvents._ENTITY_WITHER_DEATH = _SoundEvents.register("entity.wither.death");
_SoundEvents._ENTITY_WITHER_HURT = _SoundEvents.register("entity.wither.hurt");
_SoundEvents._ENTITY_WITHER_SHOOT = _SoundEvents.register("entity.wither.shoot");
_SoundEvents._ENTITY_WITHER_SKELETON_AMBIENT = _SoundEvents.register("entity.wither_skeleton.ambient");
_SoundEvents._ENTITY_WITHER_SKELETON_DEATH = _SoundEvents.register("entity.wither_skeleton.death");
_SoundEvents._ENTITY_WITHER_SKELETON_HURT = _SoundEvents.register("entity.wither_skeleton.hurt");
_SoundEvents._ENTITY_WITHER_SKELETON_STEP = _SoundEvents.register("entity.wither_skeleton.step");
_SoundEvents._ENTITY_WITHER_SPAWN = _SoundEvents.register("entity.wither.spawn");
_SoundEvents._ENTITY_WOLF_AMBIENT = _SoundEvents.register("entity.wolf.ambient");
_SoundEvents._ENTITY_WOLF_DEATH = _SoundEvents.register("entity.wolf.death");
_SoundEvents._ENTITY_WOLF_GROWL = _SoundEvents.register("entity.wolf.growl");
_SoundEvents._ENTITY_WOLF_HOWL = _SoundEvents.register("entity.wolf.howl");
_SoundEvents._ENTITY_WOLF_HURT = _SoundEvents.register("entity.wolf.hurt");
_SoundEvents._ENTITY_WOLF_PANT = _SoundEvents.register("entity.wolf.pant");
_SoundEvents._ENTITY_WOLF_SHAKE = _SoundEvents.register("entity.wolf.shake");
_SoundEvents._ENTITY_WOLF_STEP = _SoundEvents.register("entity.wolf.step");
_SoundEvents._ENTITY_WOLF_WHINE = _SoundEvents.register("entity.wolf.whine");
_SoundEvents._BLOCK_WOODEN_DOOR_CLOSE = _SoundEvents.register("block.wooden_door.close");
_SoundEvents._BLOCK_WOODEN_DOOR_OPEN = _SoundEvents.register("block.wooden_door.open");
_SoundEvents._BLOCK_WOODEN_TRAPDOOR_CLOSE = _SoundEvents.register("block.wooden_trapdoor.close");
_SoundEvents._BLOCK_WOODEN_TRAPDOOR_OPEN = _SoundEvents.register("block.wooden_trapdoor.open");
_SoundEvents._BLOCK_WOOD_BREAK = _SoundEvents.register("block.wood.break");
_SoundEvents._BLOCK_WOODEN_BUTTON_CLICK_OFF = _SoundEvents.register("block.wooden_button.click_off");
_SoundEvents._BLOCK_WOODEN_BUTTON_CLICK_ON = _SoundEvents.register("block.wooden_button.click_on");
_SoundEvents._BLOCK_WOOD_FALL = _SoundEvents.register("block.wood.fall");
_SoundEvents._BLOCK_WOOD_HIT = _SoundEvents.register("block.wood.hit");
_SoundEvents._BLOCK_WOOD_PLACE = _SoundEvents.register("block.wood.place");
_SoundEvents._BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF = _SoundEvents.register("block.wooden_pressure_plate.click_off");
_SoundEvents._BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON = _SoundEvents.register("block.wooden_pressure_plate.click_on");
_SoundEvents._BLOCK_WOOD_STEP = _SoundEvents.register("block.wood.step");
_SoundEvents._ENTITY_ZOMBIE_AMBIENT = _SoundEvents.register("entity.zombie.ambient");
_SoundEvents._ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR = _SoundEvents.register("entity.zombie.attack_wooden_door");
_SoundEvents._ENTITY_ZOMBIE_ATTACK_IRON_DOOR = _SoundEvents.register("entity.zombie.attack_iron_door");
_SoundEvents._ENTITY_ZOMBIE_BREAK_WOODEN_DOOR = _SoundEvents.register("entity.zombie.break_wooden_door");
_SoundEvents._ENTITY_ZOMBIE_CONVERTED_TO_DROWNED = _SoundEvents.register("entity.zombie.converted_to_drowned");
_SoundEvents._ENTITY_ZOMBIE_DEATH = _SoundEvents.register("entity.zombie.death");
_SoundEvents._ENTITY_ZOMBIE_DESTROY_EGG = _SoundEvents.register("entity.zombie.destroy_egg");
_SoundEvents._ENTITY_ZOMBIE_HORSE_AMBIENT = _SoundEvents.register("entity.zombie_horse.ambient");
_SoundEvents._ENTITY_ZOMBIE_HORSE_DEATH = _SoundEvents.register("entity.zombie_horse.death");
_SoundEvents._ENTITY_ZOMBIE_HORSE_HURT = _SoundEvents.register("entity.zombie_horse.hurt");
_SoundEvents._ENTITY_ZOMBIE_HURT = _SoundEvents.register("entity.zombie.hurt");
_SoundEvents._ENTITY_ZOMBIE_INFECT = _SoundEvents.register("entity.zombie.infect");
_SoundEvents._ENTITY_ZOMBIE_PIGMAN_AMBIENT = _SoundEvents.register("entity.zombie_pigman.ambient");
_SoundEvents._ENTITY_ZOMBIE_PIGMAN_ANGRY = _SoundEvents.register("entity.zombie_pigman.angry");
_SoundEvents._ENTITY_ZOMBIE_PIGMAN_DEATH = _SoundEvents.register("entity.zombie_pigman.death");
_SoundEvents._ENTITY_ZOMBIE_PIGMAN_HURT = _SoundEvents.register("entity.zombie_pigman.hurt");
_SoundEvents._ENTITY_ZOMBIE_STEP = _SoundEvents.register("entity.zombie.step");
_SoundEvents._ENTITY_ZOMBIE_VILLAGER_AMBIENT = _SoundEvents.register("entity.zombie_villager.ambient");
_SoundEvents._ENTITY_ZOMBIE_VILLAGER_CONVERTED = _SoundEvents.register("entity.zombie_villager.converted");
_SoundEvents._ENTITY_ZOMBIE_VILLAGER_CURE = _SoundEvents.register("entity.zombie_villager.cure");
_SoundEvents._ENTITY_ZOMBIE_VILLAGER_DEATH = _SoundEvents.register("entity.zombie_villager.death");
_SoundEvents._ENTITY_ZOMBIE_VILLAGER_HURT = _SoundEvents.register("entity.zombie_villager.hurt");
_SoundEvents._ENTITY_ZOMBIE_VILLAGER_STEP = _SoundEvents.register("entity.zombie_villager.step");


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _SoundEvent {
    constructor(key) {
        this._key = key;
    }
}
exports._SoundEvent = _SoundEvent;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _LegacyBlockDataMap {
    constructor() {
        this._byData = [];
        this._names = [];
        this._opaque = false;
    }
    _fillAll(name, blockTypeInstance) {
        for (let i = 0; i < 16; i++) {
            this._byData[i] = blockTypeInstance;
            this._names[i] = name;
        }
    }
}
exports._LegacyBlockDataMap = _LegacyBlockDataMap;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _BlocksHelper {
}
exports._BlocksHelper = _BlocksHelper;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _DyeColor {
}
exports._DyeColor = _DyeColor;
_DyeColor._WHITE = 0;
_DyeColor._ORANGE = 1;
_DyeColor._MAGENTA = 2;
_DyeColor._LIGHT_BLUE = 3;
_DyeColor._YELLOW = 4;
_DyeColor._LIME = 5;
_DyeColor._PINK = 6;
_DyeColor._GRAY = 7;
_DyeColor._LIGHT_GRAY = 8;
_DyeColor._CYAN = 9;
_DyeColor._PURPLE = 10;
_DyeColor._BLUE = 11;
_DyeColor._BROWN = 12;
_DyeColor._GREEN = 13;
_DyeColor._RED = 14;
_DyeColor._BLACK = 15;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _Effects;
(function (_Effects) {
    _Effects[_Effects["_SATURATION"] = 0] = "_SATURATION";
    _Effects[_Effects["_FIRE_RESISTANCE"] = 1] = "_FIRE_RESISTANCE";
    _Effects[_Effects["_BLINDNESS"] = 2] = "_BLINDNESS";
    _Effects[_Effects["_WEAKNESS"] = 3] = "_WEAKNESS";
    _Effects[_Effects["_REGENERATION"] = 4] = "_REGENERATION";
    _Effects[_Effects["_JUMP_BOOST"] = 5] = "_JUMP_BOOST";
    _Effects[_Effects["_WITHER"] = 6] = "_WITHER";
    _Effects[_Effects["_POISON"] = 7] = "_POISON";
    _Effects[_Effects["_SPEED"] = 8] = "_SPEED";
})(_Effects = exports._Effects || (exports._Effects = {}));


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _CPacketLoginStart extends Packet_1._Packet {
    constructor(name) {
        super();
        this._name = (name !== undefined ? name : "");
    }
    _writePacketData(buf, reg) {
        buf._writeVarInt(0x00);
        buf._writeString(this._name);
    }
}
exports._CPacketLoginStart = _CPacketLoginStart;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _CPacketChatMessage extends Packet_1._Packet {
    constructor(message) {
        super();
        this._message = (message !== undefined ? message : "");
        if (this._message.length > 100) {
            this._message = this._message.substring(0, 100);
        }
    }
    _writePacketData(buf, reg) {
        buf._writeVarInt(reg._SERVER_CHAT);
        buf._writeString(this._message);
    }
}
exports._CPacketChatMessage = _CPacketChatMessage;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
const EnumConnectionState_1 = __webpack_require__(32);
class _CHandshake extends Packet_1._Packet {
    constructor(version, ip, port, requestedState) {
        super();
        this._protocolVersion = (version !== undefined ? version : 47);
        this._ip = (ip !== undefined ? ip : "");
        this._port = (port !== undefined ? port : 25565);
        this._requestedState = (requestedState !== undefined ? requestedState : EnumConnectionState_1._EnumConnectionState._Login);
    }
    _writePacketData(buf, reg) {
        buf._writeVarInt(0x00);
        buf._writeVarInt(this._protocolVersion);
        buf._writeString(this._ip);
        buf._writeUint16(this._port);
        buf._writeVarInt(this._requestedState);
    }
}
exports._CHandshake = _CHandshake;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const PacketBuffer_1 = __webpack_require__(10);
const v47_1 = __webpack_require__(81);
const v480_1 = __webpack_require__(82);
class _NetworkManager {
    constructor(klocki, url) {
        this._packetListener = null;
        this._w = new Worker("network.js");
        this._w.onerror = (event) => this._onError(event);
        this._w.onmessage = (event) => this._onMessage(event);
        this._w.postMessage(url);
        this._writeArrayBuffer = new ArrayBuffer(2 * 1024 * 1024);
        this._writePacketBuffer = new PacketBuffer_1._PacketBuffer(this._writeArrayBuffer);
        this._requestPackets = false;
        this._requestPacketsFromWorker();
        this._protocol = klocki._protocol;
        const reg = _NetworkManager._getRegistryByProtocol(this._protocol);
        this._packetRegistry = reg;
    }
    static _getRegistryByProtocol(protocol) {
        let reg = null;
        if (protocol === 47) {
            reg = new v47_1._v47();
        }
        if (protocol >= 480) {
            reg = new v480_1._v480();
        }
        if (reg) {
            reg._protocol = protocol;
            return reg;
        }
        throw new Error(`unrecognized protocol: ${protocol}`);
    }
    _sendPacket(packet) {
        const buff = this._writePacketBuffer;
        buff._reset();
        packet._writePacketData(buff, this._packetRegistry);
        const r = buff._getReaderIndex();
        const w = buff._getWriterIndex();
        const written = this._writeArrayBuffer.slice(r, w);
        this._w.postMessage(written, [written]);
    }
    _close() {
        this._w.postMessage("string that is not arraybuffer");
    }
    _onError(event) {
        console.log(event);
    }
    _onPacket(buf) {
        const p = new PacketBuffer_1._PacketBuffer(buf.buffer, buf.byteOffset, buf.byteLength);
        const id = p._readVarInt();
        if (this._packetListener) {
            try {
                const packet = this._packetListener._deserialize(id);
                if (packet !== null) {
                    packet._readPacketData(p, this._packetRegistry);
                    if (p._getReaderIndex() !== p._u8.byteLength) {
                        throw new Error(`Packet id:${id} = 0x` + id.toString(16) + ` larger, found ${buf.byteLength - p._getReaderIndex()}B extra`);
                    }
                    packet._processPacket(this._packetListener);
                }
                else {
                }
            }
            catch (e) {
                console.log(`err in`, id, "= 0x" + id.toString(16), e);
            }
        }
        else {
            console.warn(`unhandled packet ${id} = 0x` + id.toString(16));
        }
    }
    _onMessage(event) {
        const data = event.data;
        if (data instanceof Array) {
            this._requestPacketsFromWorker();
            for (let i = 0; i < data.length; i++) {
                this._onPacket(data[i]);
            }
        }
        else if (data instanceof Uint8Array) {
            const buf = data;
            this._onPacket(buf);
        }
        else {
            console.log(`received message: ${event.data}`);
        }
    }
    _requestPacketsFromWorker() {
        this._requestPackets = true;
    }
    _idleCallback() {
        if (this._requestPackets) {
            this._w.postMessage(0);
        }
    }
}
exports._NetworkManager = _NetworkManager;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const PacketRegistry_1 = __webpack_require__(33);
class _v47 extends PacketRegistry_1._PacketRegistry {
    constructor() {
        super(47);
        this._CLIENT_KEEPALIVE = 0x00;
        this._CLIENT_JOIN_GAME = 0x01;
        this._CLIENT_CHAT = 0x02;
        this._CLIENT_TIME_UPDATE = 0x03;
        this._CLIENT_ENTITY_EQUIPMENT = 0x04;
        this._CLIENT_SPAWN_POSITION = 0x05;
        this._CLIENT_UPDATE_HEALTH = 0x06;
        this._CLIENT_RESPAWN = 0x07;
        this._CLIENT_PLAYER_POSITION_AND_LOOK = 0x08;
        this._CLIENT_HELD_ITEM_CHANGE = 0x09;
        this._CLIENT_USE_BED = 0x0A;
        this._CLIENT_ANIMATION = 0x0B;
        this._CLIENT_SPAWN_PLAYER = 0x0C;
        this._CLIENT_COLLECT_ITEM = 0x0D;
        this._CLIENT_SPAWN_OBJECT = 0x0E;
        this._CLIENT_SPAWN_MOB = 0x0F;
        this._CLIENT_SPAWN_PAINTING = 0x10;
        this._CLIENT_SPAWN_EXPERIENCE_ORB = 0x11;
        this._CLIENT_ENTITY_VELOCITY = 0x12;
        this._CLIENT_DESTROY_ENTITIES = 0x13;
        this._CLIENT_ENTITY = 0x14;
        this._CLIENT_ENTITY_RELATIVE_MOVE = 0x15;
        this._CLIENT_ENTITY_LOOK = 0x16;
        this._CLIENT_ENTITY_LOOK_AND_RELATIVE_MOVE = 0x17;
        this._CLIENT_ENTITY_TELEPORT = 0x18;
        this._CLIENT_ENTITY_HEAD_LOOK = 0x19;
        this._CLIENT_ENTITY_STATUS = 0x1A;
        this._CLIENT_ATTACH_ENTITY = 0x1B;
        this._CLIENT_ENTITY_METADATA = 0x1C;
        this._CLIENT_ENTITY_EFFECT = 0x1D;
        this._CLIENT_REMOVE_ENTITY_EFFECT = 0x1E;
        this._CLIENT_SET_EXPERIENCE = 0x1F;
        this._CLIENT_ENTITY_PROPERTIES = 0x20;
        this._CLIENT_CHUNK_DATA = 0x21;
        this._CLIENT_MULTI_BLOCK_CHANGE = 0x22;
        this._CLIENT_BLOCK_CHANGE = 0x23;
        this._CLIENT_BLOCK_ACTION = 0x24;
        this._CLIENT_BLOCK_BREAK_ANIMATION = 0x25;
        this._CLIENT_MAP_CHUNK_BULK = 0x26;
        this._CLIENT_EXPLOSION = 0x27;
        this._CLIENT_EFFECT = 0x28;
        this._CLIENT_NAMED_SOUND_EFFECT = 0x29;
        this._CLIENT_PARTICLE = 0x2A;
        this._CLIENT_CHANGE_GAME_STATE = 0x2B;
        this._CLIENT_SPAWN_GLOBAL_ENTITY = 0x2C;
        this._CLIENT_OPEN_WINDOW = 0x2D;
        this._CLIENT_CLOSE_WINDOW = 0x2E;
        this._CLIENT_SET_SLOT = 0x2F;
        this._CLIENT_WINDOW_ITEMS = 0x30;
        this._CLIENT_WINDOW_PROPERTY = 0x31;
        this._CLIENT_CONFIRM_TRANSACTION = 0x32;
        this._CLIENT_UPDATE_SIGN = 0x33;
        this._CLIENT_MAPS = 0x34;
        this._CLIENT_UPDATE_BLOCK_ENTITY = 0x35;
        this._CLIENT_SIGN_EDITOR_OPEN = 0x36;
        this._CLIENT_STATISTICS = 0x37;
        this._CLIENT_PLAYER_LIST = 0x38;
        this._CLIENT_PLAYER_ABILITIES = 0x39;
        this._CLIENT_TAB_COMPLETE = 0x3A;
        this._CLIENT_SCOREBOARD_OBJECTIVE = 0x3B;
        this._CLIENT_UPDATE_SCORE = 0x3C;
        this._CLIENT_DISPLAY_SCOREBOARD = 0x3D;
        this._CLIENT_TEAMS = 0x3E;
        this._CLIENT_PLUGIN_MESSAGE = 0x3F;
        this._CLIENT_DISCONNECT = 0x40;
        this._CLIENT_DIFFICULTY = 0x41;
        this._CLIENT_COMBAT_EVENT = 0x42;
        this._CLIENT_CAMERA = 0x43;
        this._CLIENT_WORLD_BORDER = 0x44;
        this._CLIENT_TITLE = 0x45;
        this._CLIENT_SET_COMPRESSION = 0x46;
        this._CLIENT_PLAYER_LIST_HEAD_FOOT = 0x47;
        this._CLIENT_RESOURCE_PACK = 0x48;
        this._CLIENT_UPDATE_ENTITY_NBT = 0x49;
        this._SERVER_KEEPALIVE = 0x00;
        this._SERVER_CHAT = 0x01;
        this._SERVER_USE_ENTITY = 0x02;
        this._SERVER_PLAYER = 0x03;
        this._SERVER_PLAYER_POSITION = 0x04;
        this._SERVER_PLAYER_LOOK = 0x05;
        this._SERVER_PLAYER_LOOK_AND_POSITION = 0x06;
        this._SERVER_PLAYER_DIGGING = 0x07;
        this._SERVER_PLAYER_BLOCK_PLACEMENT = 0x08;
        this._SERVER_HELD_ITEM_CHANGE = 0x09;
        this._SERVER_ANIMATION = 0x0A;
        this._SERVER_ENTITY_ACTION = 0x0B;
        this._SERVER_STEER_VEHICLE = 0x0C;
        this._SERVER_CLOSE_WINDOW = 0x0D;
        this._SERVER_CLICK_WINDOW = 0x0E;
        this._SERVER_CONFIRM_TRANSACTION = 0x0F;
        this._SERVER_CREATIVE_INVENTORY_ACTION = 0x10;
        this._SERVER_ENCHANT_ITEM = 0x11;
        this._SERVER_UPDATE_SIGN = 0x12;
        this._SERVER_PLAYER_ABILITIES = 0x13;
        this._SERVER_TAB_COMPLETE = 0x14;
        this._SERVER_CLIENT_SETTINGS = 0x15;
        this._SERVER_CLIENT_STATUS = 0x16;
        this._SERVER_PLUGIN_MESSAGE = 0x17;
        this._SERVER_SPECTATE = 0x18;
        this._SERVER_RESOURCE_PACK_STATUS = 0x19;
        this._CLIENT_LOGIN_DISCONNECT = 0x00;
        this._CLIENT_LOGIN_ENCRYPT_REQUEST = 0x01;
        this._CLIENT_LOGIN_SUCCESS = 0x02;
        this._CLIENT_LOGIN_SET_COMPRESSION = 0x03;
        this._SERVER_LOGIN_START = 0x00;
        this._SERVER_LOGIN_ENCRYPT_RESPONSE = 0x01;
    }
}
exports._v47 = _v47;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const PacketRegistry_1 = __webpack_require__(33);
class _v480 extends PacketRegistry_1._PacketRegistry {
    constructor() {
        super(480);
        this._CLIENT_SPAWN_OBJECT = 0x00;
        this._CLIENT_SPAWN_EXPERIENCE_ORB = 0x01;
        this._CLIENT_SPAWN_GLOBAL_ENTITY = 0x02;
        this._CLIENT_SPAWN_MOB = 0x03;
        this._CLIENT_SPAWN_PAINTING = 0x04;
        this._CLIENT_SPAWN_PLAYER = 0x05;
        this._CLIENT_ANIMATION = 0x06;
        this._CLIENT_STATISTICS = 0x07;
        this._CLIENT_BLOCK_BREAK_ANIMATION = 0x08;
        this._CLIENT_UPDATE_BLOCK_ENTITY = 0x09;
        this._CLIENT_BLOCK_ACTION = 0x0A;
        this._CLIENT_BLOCK_CHANGE = 0x0B;
        this._CLIENT_BOSS_BAR = 0x0C;
        this._CLIENT_DIFFICULTY = 0x0D;
        this._CLIENT_CHAT = 0x0E;
        this._CLIENT_MULTI_BLOCK_CHANGE = 0x0F;
        this._CLIENT_TAB_COMPLETE = 0x10;
        this._CLIENT_DECLARE_COMMANDS = 0x11;
        this._CLIENT_CONFIRM_TRANSACTION = 0x12;
        this._CLIENT_CLOSE_WINDOW = 0x13;
        this._CLIENT_WINDOW_ITEMS = 0x14;
        this._CLIENT_WINDOW_PROPERTY = 0x15;
        this._CLIENT_SET_SLOT = 0x16;
        this._CLIENT_SET_COOLDOWN = 0x17;
        this._CLIENT_PLUGIN_MESSAGE = 0x18;
        this._CLIENT_NAMED_SOUND_EFFECT = 0x19;
        this._CLIENT_DISCONNECT = 0x1A;
        this._CLIENT_ENTITY_STATUS = 0x1B;
        this._CLIENT_EXPLOSION = 0x1C;
        this._CLIENT_UNLOAD_CHUNK = 0x1D;
        this._CLIENT_CHANGE_GAME_STATE = 0x1E;
        this._CLIENT_OPEN_HORSE_WINDOW = 0x1F;
        this._CLIENT_KEEPALIVE = 0x20;
        this._CLIENT_CHUNK_DATA = 0x21;
        this._CLIENT_EFFECT = 0x22;
        this._CLIENT_PARTICLE = 0x23;
        this._CLIENT_UPDATE_LIGHT = 0x24;
        this._CLIENT_JOIN_GAME = 0x25;
        this._CLIENT_MAPS = 0x26;
        this._CLIENT_TRADE_LIST = 0x27;
        this._CLIENT_ENTITY_RELATIVE_MOVE = 0x28;
        this._CLIENT_ENTITY_LOOK_AND_RELATIVE_MOVE = 0x29;
        this._CLIENT_ENTITY_LOOK = 0x2A;
        this._CLIENT_ENTITY = 0x2B;
        this._CLIENT_VEHICLE_MOVE = 0x2C;
        this._CLIENT_OPEN_BOOK = 0x2D;
        this._CLIENT_OPEN_WINDOW = 0x2E;
        this._CLIENT_SIGN_EDITOR_OPEN = 0x2F;
        this._CLIENT_CRAFT_RECIPE_RESPONSE = 0x30;
        this._CLIENT_PLAYER_ABILITIES = 0x31;
        this._CLIENT_COMBAT_EVENT = 0x32;
        this._CLIENT_PLAYER_LIST = 0x33;
        this._CLIENT_FACE_PLAYER = 0x34;
        this._CLIENT_PLAYER_POSITION_AND_LOOK = 0x35;
        this._CLIENT_UNLOCK_RECIPES = 0x36;
        this._CLIENT_DESTROY_ENTITIES = 0x37;
        this._CLIENT_REMOVE_ENTITY_EFFECT = 0x38;
        this._CLIENT_RESOURCE_PACK = 0x39;
        this._CLIENT_RESPAWN = 0x3A;
        this._CLIENT_ENTITY_HEAD_LOOK = 0x3B;
        this._CLIENT_ADVANCEMENT_PROGRESS = 0x3C;
        this._CLIENT_WORLD_BORDER = 0x3D;
        this._CLIENT_CAMERA = 0x3E;
        this._CLIENT_HELD_ITEM_CHANGE = 0x3F;
        this._CLIENT_UPDATE_VIEW_POSITION = 0x40;
        this._CLIENT_UPDATE_VIEW_DISTANCE = 0x41;
        this._CLIENT_DISPLAY_SCOREBOARD = 0x42;
        this._CLIENT_ENTITY_METADATA = 0x43;
        this._CLIENT_ATTACH_ENTITY = 0x44;
        this._CLIENT_ENTITY_VELOCITY = 0x45;
        this._CLIENT_ENTITY_EQUIPMENT = 0x46;
        this._CLIENT_SET_EXPERIENCE = 0x47;
        this._CLIENT_UPDATE_HEALTH = 0x48;
        this._CLIENT_SCOREBOARD_OBJECTIVE = 0x49;
        this._CLIENT_SET_PASSENGERS = 0x4A;
        this._CLIENT_TEAMS = 0x4B;
        this._CLIENT_UPDATE_SCORE = 0x4C;
        this._CLIENT_SPAWN_POSITION = 0x4D;
        this._CLIENT_TIME_UPDATE = 0x4E;
        this._CLIENT_TITLE = 0x4F;
        this._CLIENT_ENTITY_SOUND_EFFECT = 0x50;
        this._CLIENT_SOUND_EFFECT = 0x51;
        this._CLIENT_STOP_SOUND = 0x52;
        this._CLIENT_PLAYER_LIST_HEAD_FOOT = 0x53;
        this._CLIENT_NBT_QUERY_RESPONSE = 0x54;
        this._CLIENT_COLLECT_ITEM = 0x55;
        this._CLIENT_ENTITY_TELEPORT = 0x56;
        this._CLIENT_ADVANCEMENTS = 0x57;
        this._CLIENT_ENTITY_PROPERTIES = 0x58;
        this._CLIENT_ENTITY_EFFECT = 0x59;
        this._CLIENT_DECLARE_RECIPES = 0x5A;
        this._CLIENT_TAGS = 0x5B;
        this._CLIENT_UPDATE_SIGN = -1;
        this._CLIENT_MAP_CHUNK_BULK = -1;
        this._CLIENT_SET_COMPRESSION = -1;
        this._CLIENT_UPDATE_ENTITY_NBT = -1;
        this._CLIENT_USE_BED = -1;
        this._SERVER_TELEPORT_CONFIRM = 0x00;
        this._SERVER_QUERY_BLOCK_NBT = 0x01;
        this._SERVER_SET_DIFFICULTY = 0x02;
        this._SERVER_CHAT = 0x03;
        this._SERVER_CLIENT_STATUS = 0x04;
        this._SERVER_CLIENT_SETTINGS = 0x05;
        this._SERVER_TAB_COMPLETE = 0x06;
        this._SERVER_CONFIRM_TRANSACTION = 0x07;
        this._SERVER_ENCHANT_ITEM = 0x08;
        this._SERVER_CLICK_WINDOW = 0x09;
        this._SERVER_CLOSE_WINDOW = 0x0A;
        this._SERVER_PLUGIN_MESSAGE = 0x0B;
        this._SERVER_EDIT_BOOK = 0x0C;
        this._SERVER_QUERY_ENTITY_NBT = 0x0D;
        this._SERVER_USE_ENTITY = 0x0E;
        this._SERVER_KEEPALIVE = 0x0F;
        this._SERVER_LOCK_DIFFICULTY = 0x10;
        this._SERVER_PLAYER_POSITION = 0x11;
        this._SERVER_PLAYER_LOOK_AND_POSITION = 0x12;
        this._SERVER_PLAYER_LOOK = 0x13;
        this._SERVER_PLAYER = 0x14;
        this._SERVER_VEHICLE_MOVE = 0x15;
        this._SERVER_STEER_BOAT = 0x16;
        this._SERVER_PICK_ITEM = 0x17;
        this._SERVER_CRAFT_RECIPE_REQUEST = 0x18;
        this._SERVER_PLAYER_ABILITIES = 0x19;
        this._SERVER_PLAYER_DIGGING = 0x1A;
        this._SERVER_ENTITY_ACTION = 0x1B;
        this._SERVER_STEER_VEHICLE = 0x1C;
        this._SERVER_CRAFTING_BOOK_DATA = 0x1D;
        this._SERVER_NAME_ITEM = 0x1E;
        this._SERVER_RESOURCE_PACK_STATUS = 0x1F;
        this._SERVER_ADVANCEMENT_TAB = 0x20;
        this._SERVER_SELECT_TRADE = 0x21;
        this._SERVER_SET_BEACON_EFFECT = 0x22;
        this._SERVER_HELD_ITEM_CHANGE = 0x23;
        this._SERVER_UPDATE_COMMAND_BLOCK = 0x24;
        this._SERVER_UPDATE_COMMAND_BLOCK_MINECART = 0x25;
        this._SERVER_CREATIVE_INVENTORY_ACTION = 0x26;
        this._SERVER_UPDATE_JIGSAW_BLOCK = 0x27;
        this._SERVER_UPDATE_STRUCTURE_BLOCK = 0x28;
        this._SERVER_UPDATE_SIGN = 0x29;
        this._SERVER_ANIMATION = 0x2A;
        this._SERVER_SPECTATE = 0x2B;
        this._SERVER_PLAYER_BLOCK_PLACEMENT = 0x2C;
        this._SERVER_USE_ITEM = 0x2D;
        this._SERVER_PREPARE_CRAFTING_GRID = -1;
    }
}
exports._v480 = _v480;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Timer {
    constructor(ticksPerSecond) {
        this._deltaTicks = 0;
        this._deltaTime = 0;
        this._elapsedTicks = 0;
        this._deltaTimeQuantized = 0;
        this._renderPartialTicks = 0;
        this._ticksPerSecond = ticksPerSecond;
        this._timeNow = Date.now() / 1000;
        this._timeNowQuantized = this._timeNow;
        this._timeLastUpdate = this._timeNow;
    }
    _updateTimer(time) {
        this._timeNow = Date.now() / 1000;
        this._deltaTime = this._timeNow - this._timeLastUpdate;
        this._deltaTimeQuantized = this._timeNow - this._timeNowQuantized;
        this._deltaTicks = this._deltaTimeQuantized * this._ticksPerSecond;
        if (Math.abs(this._deltaTicks) > 5 * this._ticksPerSecond) {
            console.log("Can't keep up! Skipping", this._deltaTicks, "ticks");
            this._deltaTime = 0;
            this._deltaTicks = 0;
            this._timeNowQuantized = this._timeNow;
        }
        this._elapsedTicks = Math.floor(this._deltaTicks);
        this._timeNowQuantized += this._elapsedTicks / this._ticksPerSecond;
        this._renderPartialTicks = this._deltaTicks % 1;
        this._timeLastUpdate = this._timeNow;
    }
}
exports._Timer = _Timer;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Klocki_1 = __webpack_require__(2);
class _Panner {
    constructor(panner) {
        this._panner = panner;
    }
    _setPosition(x, y, z) {
        this._panner.setPosition(x, y, z);
    }
}
exports._Panner = _Panner;
class _AudioManager {
    constructor(klocki) {
        this._klocki = klocki;
        const AudioContext = window.AudioContext || window.webkitAudioContext;
        const audioCtx = new AudioContext();
        const listener = audioCtx.listener;
        this._audioCtx = audioCtx;
        this._listener = listener;
    }
    _setListenerPos(x, y, z) {
        this._listener.setPosition(x, y, z);
    }
    _setListenerOrientation(x, y, z, ux, uy, uz) {
        this._listener.setOrientation(x, y, z, ux, uy, uz);
    }
    _newPanner() {
        const panner = this._audioCtx.createPanner();
        panner.panningModel = 'HRTF';
        panner.distanceModel = 'inverse';
        panner.refDistance = 3;
        panner.maxDistance = 1000;
        panner.rolloffFactor = 1;
        panner.coneInnerAngle = 360;
        panner.coneOuterAngle = 0;
        panner.coneOuterGain = 0;
        return new _Panner(panner);
    }
    _newFastPanner() {
        const panner = this._audioCtx.createPanner();
        panner.panningModel = 'equalpower';
        panner.distanceModel = 'inverse';
        panner.refDistance = 3;
        panner.maxDistance = 1000;
        panner.rolloffFactor = 1;
        panner.coneInnerAngle = 360;
        panner.coneOuterAngle = 0;
        panner.coneOuterGain = 0;
        return new _Panner(panner);
    }
    _playSoundKeyAt(soundKey, vol, pitch, x, y, z) {
        const soundDesc = this._klocki._soundsJson[soundKey];
        const soundPaths = soundDesc.sounds;
        const r = Math.floor(Math.random() * soundPaths.length);
        const soundPath = soundPaths[r];
        const resourceId = Klocki_1._Klocki._forbiddenWord + "/sounds/" + soundPath + ".ogg";
        console.log("playing " + resourceId);
        const resourceInfo = this._klocki._assetsJson.objects[resourceId];
        if (resourceInfo) {
            const resourceHash = resourceInfo.hash;
            const resourcePath = Klocki_1._Klocki._hashToPath(resourceHash);
            const request = new Request(resourcePath);
            fetch(request).then(function (response) {
                return response.arrayBuffer();
            }).then((buffer) => {
                const audioCtx = this._klocki._audioManager._audioCtx;
                const source = audioCtx.createBufferSource();
                const panner = this._klocki._audioManager._newFastPanner();
                panner._setPosition(x, y, z);
                audioCtx.decodeAudioData(buffer, function (decodedData) {
                    source.buffer = decodedData;
                    source.playbackRate.value = pitch;
                    const gainer = audioCtx.createGain();
                    gainer.gain.value = vol * 0.2;
                    source.connect(panner._panner).connect(gainer).connect(audioCtx.destination);
                    const startTime = audioCtx.currentTime;
                    source.start(startTime, 0);
                    source.onended = () => {
                        source.disconnect(panner._panner);
                        panner._panner.disconnect(gainer);
                        gainer.disconnect(audioCtx.destination);
                    };
                });
            });
        }
    }
}
exports._AudioManager = _AudioManager;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Klocki_1 = __webpack_require__(2);
const Model_1 = __webpack_require__(86);
class _ModelRegistry {
    constructor(klocki) {
        this._klocki = klocki;
        this._nameModelMap = new Map();
        this._namePromiseMap = new Map();
    }
    _fetchModel(name) {
        const guiChat = this._klocki._guiChat;
        if (guiChat) {
            guiChat._appendMessage({ text: "Loading model " + name });
        }
        return fetch("assets/" + Klocki_1._Klocki._forbiddenWord + "/models/" + name + ".json")
            .then(function (response) {
            if (response.status !== 200) {
                return null;
            }
            return response.json();
        });
    }
    _loadModel(name) {
        let promise = this._namePromiseMap.get(name);
        if (promise) {
            return promise;
        }
        promise = new Promise((resolve, reject) => {
            this._fetchModel(name).then((mjson) => {
                if (mjson === null) {
                    resolve(null);
                }
                else {
                    const loaded = Model_1._BlockModel._load(mjson);
                    if (loaded._parent != "") {
                        this._getModel(loaded._parent).then((parentModel) => {
                            loaded._init(parentModel);
                            resolve(loaded);
                        });
                    }
                }
            });
        });
        this._namePromiseMap.set(name, promise);
        return promise;
    }
    _getModel(name) {
        const model = this._nameModelMap.get(name);
        if (!model) {
            return this._loadModel(name);
        }
        return Promise.resolve(model);
    }
}
exports._ModelRegistry = _ModelRegistry;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _ModelFace {
    constructor(texture, cullface, uv, tintindex) {
        this._texture = texture;
        this._textureResolved = null;
        this._cullface = cullface;
        this._tintindex = tintindex;
        let index = dir2order.get(cullface);
        if (index === void 0) {
            index = -1;
        }
        this._cullfaceIndex = index;
        this._uv = [
            uv[0] / 16,
            uv[1] / 16,
            uv[2] / 16,
            uv[3] / 16,
            (uv[2] - uv[0]) / 16,
            (uv[3] - uv[1]) / 16
        ];
    }
}
exports._ModelFace = _ModelFace;
const dir2order = new Map([["up", 0], ["down", 1], ["north", 2], ["south", 3], ["west", 4], ["east", 5]]);
class _ModelElement {
    constructor(from, to, faces) {
        this._from = from;
        this._to = to;
        this._delta = [to[0] - from[0], to[1] - from[1], to[2] - from[2]];
        this._faces = Array(6);
        this._facesOriginal = faces;
        if (faces) {
            for (const dirName in faces) {
                if (faces.hasOwnProperty(dirName)) {
                    const f = faces[dirName];
                    let cull = f.cullface;
                    if (!cull) {
                        cull = "";
                    }
                    let uv = f.uv;
                    if (!uv) {
                        uv = [0, 0, 16, 16];
                    }
                    const num = dir2order.get(dirName);
                    let tintindex = -1;
                    if (f.hasOwnProperty("tintindex")) {
                        tintindex = f.tintindex;
                    }
                    if (num !== void 0) {
                        this._faces[num] = new _ModelFace(f.texture, cull, uv, tintindex);
                    }
                }
            }
        }
    }
    _copy() {
        return new _ModelElement(this._from, this._to, this._facesOriginal);
    }
}
exports._ModelElement = _ModelElement;
class _BlockModel {
    constructor() {
        this._parentModel = null;
        this._selfTextures = new Map();
        this._textures = new Map();
        this._elements = [];
        this._selfElements = [];
    }
    static _load(mjson) {
        const m = new _BlockModel();
        m._parent = mjson.parent;
        const texs = mjson.textures;
        for (let texKey in texs) {
            if (texs.hasOwnProperty(texKey)) {
                const texVal = texs[texKey];
                if (texKey.charAt(0) === '#') {
                    texKey = texKey.substring(1);
                }
                m._selfTextures.set(texKey, texVal);
            }
        }
        if (mjson.elements) {
            for (let i = 0; i < mjson.elements.length; i++) {
                const e = mjson.elements[i];
                const from = [e.from[0] / 16, e.from[1] / 16, e.from[2] / 16];
                const to = [e.to[0] / 16, e.to[1] / 16, e.to[2] / 16];
                m._selfElements.push(new _ModelElement(from, to, e.faces));
            }
        }
        return m;
    }
    _resolveTexture(name) {
        let v = name;
        if (v.charAt(0) === '#') {
            v = v.substring(1);
        }
        while (true) {
            v = this._textures.get(v);
            if (v === void 0) {
                return "";
            }
            if (v.charAt(0) === '#') {
                v = v.substring(1);
            }
            else {
                return v;
            }
        }
    }
    _init(parent) {
        this._parentModel = parent;
        if (parent != null) {
            parent._textures.forEach((v, k) => {
                this._textures.set(k, v);
            });
            for (let i = 0; i < parent._elements.length; i++) {
                this._elements.push(parent._elements[i]._copy());
            }
        }
        this._selfTextures.forEach((v, k) => {
            this._textures.set(k, v);
        });
        for (let i = 0; i < this._selfElements.length; i++) {
            this._elements.push(this._selfElements[i]);
        }
    }
}
exports._BlockModel = _BlockModel;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const OriginRenderOcTree_1 = __webpack_require__(21);
class _RenderList {
    constructor(klocki, cx, cy, cz) {
        this._lastsx = 0;
        this._lastsy = 0;
        this._lastsz = 0;
        this._klocki = klocki;
        this._countChunksX = cx;
        this._countChunksY = cy;
        this._countChunksZ = cz;
        this._renderRegions = Array(cx * cy * cz);
        this._divisionSize = 256;
        for (let x = 0; x < cx; x++) {
            for (let y = 0; y < cy; y++) {
                for (let z = 0; z < cz; z++) {
                    const index = (z * cy + y) * cx + x;
                    this._renderRegions[index] = new OriginRenderOcTree_1._OriginRenderOcTree(klocki, null, null, 0, 0, 0, 16, 16, 16);
                }
            }
        }
    }
    static _renderPos(start, divisionSize, countDivisions, arrpos) {
        const size = divisionSize * countDivisions;
        const blockArrpos = arrpos * divisionSize;
        let j = blockArrpos - start + Math.trunc(size / 2);
        if (j < 0) {
            j -= size - 1;
        }
        return blockArrpos - Math.trunc(j / size) * size;
    }
    _bakeAll(wr, shaderWorld) {
        for (let i = 0; i < this._renderRegions.length; i++) {
            const rc = this._renderRegions[i];
            rc._bakeAndUpload(shaderWorld);
        }
    }
    _renderAll(wr, shaderWorld) {
        for (let i = 0; i < this._renderRegions.length; i++) {
            this._renderRegions[i]._preRender(shaderWorld);
        }
        let secs = this._klocki._sectionsByDistanceSquared;
        const gl = this._klocki._display._gl;
        const indexBuf = this._klocki._display._indexBuffer;
        const baker = this._klocki._worldRendererBaker;
        for (let secsIndex = 0; secsIndex < secs.length; ++secsIndex) {
            const sections = secs[secsIndex];
            const count = sections[0];
            for (let i = 1; i <= count; i++) {
                const arr = sections[i];
                const s = arr[0];
                const drawCount = arr[1];
                const glBuf = arr[2];
                gl.bindBuffer(gl.ARRAY_BUFFER, glBuf);
                baker._setupPointers(shaderWorld);
                shaderWorld._updateOffset(s._origin._offsetarr);
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuf);
                gl.drawElements(gl.TRIANGLES, (drawCount * 6) >>> 2, gl.UNSIGNED_INT, 0);
            }
        }
    }
    _joinAt(level) {
        for (let i = 0; i < this._renderRegions.length; i++) {
            this._renderRegions[i]._joinAt(level);
        }
    }
    _updatePositions(viewEntityX, viewEntityY, viewEntityZ) {
        const csize = this._divisionSize;
        const sx = Math.floor(viewEntityX) - csize / 2;
        const sz = Math.floor(viewEntityZ) - csize / 2;
        this._lastsx = sx;
        this._lastsy = 0;
        this._lastsz = sz;
        for (let x = 0; x < this._countChunksX; ++x) {
            const blockX = _RenderList._renderPos(sx, csize, this._countChunksX, x);
            for (let z = 0; z < this._countChunksZ; ++z) {
                const blockZ = _RenderList._renderPos(sz, csize, this._countChunksZ, z);
                for (let y = 0; y < this._countChunksY; ++y) {
                    const blockY = y * csize;
                    const renderRegion = this._renderRegions[(z * this._countChunksY + y) * this._countChunksX + x];
                    if (renderRegion._setPosition(blockX, blockY, blockZ)) {
                        return;
                    }
                }
            }
        }
    }
}
exports._RenderList = _RenderList;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ChunkSection_1 = __webpack_require__(34);
const OriginRenderOcTree_1 = __webpack_require__(21);
const Uint32BlockStorage_1 = __webpack_require__(35);
const Klocki_1 = __webpack_require__(2);
const faceVertices = [
    {
        indices: [0, 1, 2, 3, 2, 1],
        verts: [
            { X: 0, Y: 1, Z: 0, TOffsetX: 0, TOffsetY: 0 },
            { X: 1, Y: 1, Z: 0, TOffsetX: 1, TOffsetY: 0 },
            { X: 0, Y: 1, Z: 1, TOffsetX: 0, TOffsetY: 1 },
            { X: 1, Y: 1, Z: 1, TOffsetX: 1, TOffsetY: 1 }
        ],
        direction: { X: 0, Y: 1, Z: 0 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        verts: [
            { X: 0, Y: 0, Z: 0, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 0, Z: 1, TOffsetX: 0, TOffsetY: 0 },
            { X: 1, Y: 0, Z: 0, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 0, Z: 1, TOffsetX: 1, TOffsetY: 0 },
        ],
        direction: { X: 0, Y: -1, Z: 0 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        verts: [
            { X: 0, Y: 0, Z: 0, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 0, Z: 0, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 0, TOffsetX: 1, TOffsetY: 0 },
            { X: 1, Y: 1, Z: 0, TOffsetX: 0, TOffsetY: 0 },
        ],
        direction: { X: 0, Y: 0, Z: -1 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        verts: [
            { X: 0, Y: 0, Z: 1, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 1, TOffsetX: 0, TOffsetY: 0 },
            { X: 1, Y: 0, Z: 1, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 1, Z: 1, TOffsetX: 1, TOffsetY: 0 },
        ],
        direction: { X: 0, Y: 0, Z: 1 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        verts: [
            { X: 0, Y: 0, Z: 0, TOffsetX: 0, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 0, TOffsetX: 0, TOffsetY: 0 },
            { X: 0, Y: 0, Z: 1, TOffsetX: 1, TOffsetY: 1 },
            { X: 0, Y: 1, Z: 1, TOffsetX: 1, TOffsetY: 0 },
        ],
        direction: { X: -1, Y: 0, Z: 0 },
    },
    {
        indices: [0, 1, 2, 3, 2, 1],
        verts: [
            { X: 1, Y: 0, Z: 0, TOffsetX: 1, TOffsetY: 1 },
            { X: 1, Y: 0, Z: 1, TOffsetX: 0, TOffsetY: 1 },
            { X: 1, Y: 1, Z: 0, TOffsetX: 1, TOffsetY: 0 },
            { X: 1, Y: 1, Z: 1, TOffsetX: 0, TOffsetY: 0 },
        ],
        direction: { X: 1, Y: 0, Z: 0 },
    }
];
class _BakeTask {
    constructor(renderLeaf, section) {
        this._renderLeaf = renderLeaf;
        this._section = section;
        this._bakeId = _BakeTask._bakeIdCounter++;
        this._sections = new Array(4 * 4 * 4);
        this._registry = this._renderLeaf._klocki._blockRegistry;
        this._stillDirty = false;
        this._done = false;
    }
    _getBlockTypeFast(x, y, z) {
        const qsx = x >> 4;
        const qsy = y >> 4;
        const qsz = z >> 4;
        const section = this._sections[((1 + qsx) << 4) | ((1 + qsy) << 2) | (1 + qsz)];
        if (section === null) {
            return 1;
        }
        return section._getBlockType(x & 15, y & 15, z & 15);
    }
    _getBlockTypeFastDir(x, y, z, dir) {
        switch (dir) {
            case 0: return this._getBlockTypeFast(x, y + 1, z);
            case 1: return this._getBlockTypeFast(x, y - 1, z);
            case 2: return this._getBlockTypeFast(x, y, z - 1);
            case 3: return this._getBlockTypeFast(x, y, z + 1);
            case 4: return this._getBlockTypeFast(x - 1, y, z);
            case 5: return this._getBlockTypeFast(x + 1, y, z);
            default: return -1;
        }
    }
    _bake(wr) {
        this._done = true;
        this._renderLeaf._unmarkDirty();
        wr._reset();
        const sx = this._section._posX;
        const sy = this._section._posY;
        const sz = this._section._posZ;
        const ox = this._renderLeaf._fromoriginx * 16;
        const oy = this._renderLeaf._fromoriginy * 16;
        const oz = this._renderLeaf._fromoriginz * 16;
        const world = this._renderLeaf._klocki._theWorld;
        const registry = this._registry;
        if (!world) {
            return;
        }
        const section = world._getSection(sx, sy, sz);
        if (!section) {
            this._renderLeaf._baking = false;
            this._renderLeaf._bakeTask = null;
            return;
        }
        for (let x = 0; x < 3; x++) {
            for (let y = 0; y < 3; y++) {
                for (let z = 0; z < 3; z++) {
                    let section = world._getSection(sx + x - 1, sy + y - 1, sz + z - 1);
                    if (section == null) {
                        if (world._isUglyChunkLoaded(sx + x - 1, sz + z - 1)) {
                            section = _BakeTask._airSection;
                        }
                    }
                    this._sections[(x << 4) | (y << 2) | z] = section;
                }
            }
        }
        const bs = 16;
        for (let x = 0; x < bs; x++) {
            for (let y = 0; y < bs; y++) {
                for (let z = 0; z < bs; z++) {
                    const stateId = this._getBlockTypeFast(x, y, z);
                    if (stateId != 0) {
                        let block = registry._globalPalette[stateId];
                        if (!block) {
                            block = registry._globalPalette[1];
                        }
                        if (!block._hasModel) {
                            continue;
                        }
                        wr._atlas = 0;
                        this._renderModel(x, y, z, ox + x, oy + y, oz + z, wr, block);
                    }
                }
            }
        }
        const stride = wr._stride;
        const gl = this._renderLeaf._klocki._display._gl;
        OriginRenderOcTree_1._OriginRenderOcTree._usedVideoMemory -= this._renderLeaf._drawCount * stride;
        if (this._renderLeaf._glBuffer != null) {
            this._renderLeaf._klocki._scheduleDeleteBuffer(this._renderLeaf._glBuffer);
            this._renderLeaf._glBuffer = null;
        }
        gl.bindBuffer(gl.ARRAY_BUFFER, this._renderLeaf._getBuffer());
        this._renderLeaf._drawCount = wr._upload(this._renderLeaf._klocki._shaderWorld, true);
        OriginRenderOcTree_1._OriginRenderOcTree._usedVideoMemory += this._renderLeaf._drawCount * stride;
        this._renderLeaf._baking = false;
        this._renderLeaf._bakeTask = null;
        if (this._stillDirty) {
        }
    }
    _renderModel(x, y, z, ax, ay, az, wr, block) {
        const model = block._model;
        const reduced = false;
        const numFaces = 6;
        let lastColor = 0xFFFFFFFF;
        let lastUV = _BakeTask._initUV;
        const registry = this._registry;
        const globalPaletteOpaque = registry._globalPaletteOpaque;
        let oneFaceDrawn = false;
        let topRendered = false;
        let reducedTexOffsetX = 0;
        let reducedTexOffsetY = 0;
        if (model != null) {
            let texOffsetX = 0, texOffsetY = 0, texScaleX = 0, texScaleY = 0;
            let from = _BakeTask._initXYZ;
            let delta = _BakeTask._initXYZ;
            oneFaceDrawn = false;
            for (let i = 0; i < model._elements.length; i++) {
                const element = model._elements[i];
                from = element._from;
                delta = element._delta;
                for (let facei = numFaces - 1; facei >= 0; facei--) {
                    const modelFace = element._faces[facei];
                    if (modelFace) {
                        let texInfo = modelFace._textureResolved;
                        if (texInfo == null) {
                            const textureName = model._resolveTexture(modelFace._texture);
                            if (textureName != "") {
                                texInfo = this._renderLeaf._klocki._textureManager._loadCached(`assets/` + Klocki_1._Klocki._forbiddenWord + `/textures/` + textureName + `.png`, true);
                            }
                        }
                        if (texInfo != null) {
                            if (texInfo._promise != null) {
                                texInfo._promise.then(() => {
                                    this._renderLeaf._markDirty();
                                });
                            }
                            modelFace._textureResolved = texInfo;
                            texOffsetX = texInfo._texOffsetX;
                            texOffsetY = texInfo._texOffsetY;
                            texScaleX = texInfo._texScaleX;
                            texScaleY = texInfo._texScaleY;
                        }
                        if (modelFace._cullfaceIndex !== -1) {
                            const neighborBlockId = this._getBlockTypeFastDir(x, y, z, modelFace._cullfaceIndex);
                            if (neighborBlockId >= 0 && neighborBlockId < globalPaletteOpaque.length) {
                                const blockOpaque = globalPaletteOpaque[neighborBlockId];
                                if (blockOpaque != 0) {
                                    continue;
                                }
                            }
                        }
                        const face = faceVertices[facei];
                        const verts = face.verts;
                        const uv = modelFace._uv;
                        let color = 0xFFFFFFFF;
                        if (facei == 2 || facei == 3) {
                            color = 0xFFCCCCCC;
                        }
                        if (facei == 4 || facei == 5) {
                            color = 0xFFAAAAAA;
                        }
                        if (facei == 1) {
                            color = 0xFF999999;
                        }
                        let tintcolor = 0xFFFFFFFF;
                        if (modelFace._tintindex == 0) {
                            tintcolor = 0xFF10C40A;
                            color = 0xFF000000 | (((color & 0xFF) * (tintcolor & 0xFF)) * (1 / 255)) & 0xFF | (((((color >> 8) & 0xFF) * ((tintcolor >> 8) & 0xFF)) * (1 / 255)) & 0xFF) << 8 | (((((color >> 16) & 0xFF) * ((tintcolor >> 16) & 0xFF)) * (1 / 255)) & 0xFF) << 16;
                        }
                        if (facei != 1) {
                            if (!topRendered) {
                                oneFaceDrawn = true;
                                lastUV = uv;
                                lastColor = color;
                                reducedTexOffsetX = texOffsetX;
                                reducedTexOffsetY = texOffsetY;
                            }
                            if (facei == 0) {
                                topRendered = true;
                            }
                        }
                        if (!reduced) {
                            for (let i = 0; i < 4; i++) {
                                const vert = verts[i];
                                wr._pos(ax + vert.X * delta[0] + from[0], ay + vert.Y * delta[1] + from[1], az + vert.Z * delta[2] + from[2])
                                    ._tex(texOffsetX + (uv[0] + vert.TOffsetX * uv[4]) * texScaleX, texOffsetY + (uv[1] + vert.TOffsetY * uv[5]) * texScaleY)
                                    ._color(color)._endVertex();
                            }
                        }
                    }
                }
            }
            if (reduced && oneFaceDrawn) {
                wr._pos(ax + 0.5 * delta[0] + from[0], ay + 0.5 * delta[1] + from[1], az + 0.5 * delta[2] + from[2])
                    ._tex(reducedTexOffsetX + (lastUV[0]) * texScaleX, reducedTexOffsetY + (lastUV[1]) * texScaleY)
                    ._color(lastColor)._endVertex();
            }
        }
    }
}
exports._BakeTask = _BakeTask;
_BakeTask._airSection = new ChunkSection_1._ChunkSection(0, -1, 0, new Uint32BlockStorage_1._Uint32BlockStorage(-1, false, new Uint32Array(4096)));
_BakeTask._bakeIdCounter = 0;
_BakeTask._initUV = [0, 0];
_BakeTask._initXYZ = [0, 0, 0];


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _NibbleArray {
    constructor(data) {
        if (data) {
            this._data = data;
            if (data.length != 2048) {
                throw new Error(`ChunkNibbleArrays should be 2048 bytes not: ${data.length}`);
            }
        }
        else {
            this._data = new Uint8Array(2048);
        }
    }
    _get(x, y, z) {
        return this._getFromIndex(this._getCoordinateIndex(x, y, z));
    }
    _set(x, y, z, value) {
        this._setIndex(this._getCoordinateIndex(x, y, z), value);
    }
    _getFromIndex(index) {
        const i = this._getNibbleIndex(index);
        return (this._data[i] >> ((index & 1) << 2)) & 15;
    }
    _setIndex(index, value) {
        const i = this._getNibbleIndex(index);
        if (this._isLowerNibble(index)) {
            this._data[i] = (this._data[i] & 240 | value & 15);
        }
        else {
            this._data[i] = (this._data[i] & 15 | (value & 15) << 4);
        }
    }
    _getCoordinateIndex(x, y, z) {
        return y << 8 | z << 4 | x;
    }
    _isLowerNibble(index) {
        return (index & 1) === 0;
    }
    _getNibbleIndex(index) {
        return index >> 1;
    }
}
exports._NibbleArray = _NibbleArray;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const SPacketDisconnect_1 = __webpack_require__(91);
const SPacketLoginSuccess_1 = __webpack_require__(92);
const NetHandlerPlayClient_1 = __webpack_require__(93);
class _NetHandlerLoginClient {
    constructor(klocki) {
        this._klocki = klocki;
    }
    _handleDisconnect(packet) {
        console.log(`Disconnected: ${packet._reason}`);
        alert(`Disconnected: ${packet._reason}`);
    }
    _handleLoginSuccess(packet) {
        console.log(`Logged as ${packet._name} with UUID ${packet._uuid}`);
        if (this._klocki._networkManager) {
            this._klocki._networkManager._packetListener = new NetHandlerPlayClient_1._NetHandlerPlayClient(this._klocki);
        }
    }
    _deserialize(id) {
        switch (id) {
            case 0x00: return new SPacketDisconnect_1._SPacketDisconnect();
            case 0x02: return new SPacketLoginSuccess_1._SPacketLoginSuccess();
            default:
                throw new Error(`Bad packet id ${id}`);
        }
    }
}
exports._NetHandlerLoginClient = _NetHandlerLoginClient;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketDisconnect extends Packet_1._Packet {
    _writePacketData(buf, reg) {
        throw new Error("Method not implemented.");
    }
    _readPacketData(buf, reg) {
        this._reason = buf._readString();
    }
    _processPacket(handler) {
        handler._handleDisconnect(this);
    }
}
exports._SPacketDisconnect = _SPacketDisconnect;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketLoginSuccess extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._uuid = buf._readString();
        this._name = buf._readString();
    }
    _processPacket(handler) {
        handler._handleLoginSuccess(this);
    }
}
exports._SPacketLoginSuccess = _SPacketLoginSuccess;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const SPacketChat_1 = __webpack_require__(94);
const SPacketJoinGame_1 = __webpack_require__(95);
const SPacketKeepAlive_1 = __webpack_require__(96);
const CPacketKeepAlive_1 = __webpack_require__(97);
const ChatUtils_1 = __webpack_require__(36);
const ChatColor_1 = __webpack_require__(37);
const SPacketPlayerPosLook_1 = __webpack_require__(98);
const SPacketChunkData47_1 = __webpack_require__(99);
const SPacketMapChunkBulk47_1 = __webpack_require__(100);
const WorldClient_1 = __webpack_require__(101);
const ChunkSection_1 = __webpack_require__(34);
const CPacketClientStatus_1 = __webpack_require__(105);
const KlockiEntityPlayerSP_1 = __webpack_require__(106);
const SPacketSpawnPlayer_1 = __webpack_require__(110);
const KlockiEntityPlayerMP_1 = __webpack_require__(111);
const SPacketEntityRelativeMove_1 = __webpack_require__(112);
const SPacketEntityLookRelativeMove_1 = __webpack_require__(113);
const SPacketEntityLook_1 = __webpack_require__(114);
const SPacketEntityTeleport_1 = __webpack_require__(115);
const CPacketPositionAndLook_1 = __webpack_require__(116);
const SPacketChunkData107_1 = __webpack_require__(117);
const PacketBuffer_1 = __webpack_require__(10);
const BitMap_1 = __webpack_require__(118);
const Uint32BlockStorage_1 = __webpack_require__(35);
const SPacketEntityDestroy_1 = __webpack_require__(119);
const SPacketOpenWindow_1 = __webpack_require__(120);
const SPacketWindowItems_1 = __webpack_require__(121);
const SPacketSetSlot_1 = __webpack_require__(122);
const SPacketSpawnMob_1 = __webpack_require__(123);
const KlockiEntityCreeper_1 = __webpack_require__(124);
const CPacketTeleportConfirm_1 = __webpack_require__(125);
const SPacketBlockChange_1 = __webpack_require__(126);
const SPacketMultiBlockChange_1 = __webpack_require__(127);
const SPacketChunkUnload_1 = __webpack_require__(128);
const KlockiEntityItemFrame_1 = __webpack_require__(129);
class _NetHandlerPlayClient {
    constructor(klocki) {
        this._world = null;
        this._klocki = klocki;
        this._netManager = klocki._networkManager;
        this._protocol = klocki._protocol;
        this._inPacketArr = Array(100);
        this._firstJoin = true;
        const reg = this._netManager._packetRegistry;
        this._inPacketArr[reg._CLIENT_KEEPALIVE] = SPacketKeepAlive_1._SPacketKeepAlive;
        this._inPacketArr[reg._CLIENT_JOIN_GAME] = SPacketJoinGame_1._SPacketJoinGame;
        this._inPacketArr[reg._CLIENT_CHAT] = SPacketChat_1._SPacketChat;
        this._inPacketArr[reg._CLIENT_PLAYER_POSITION_AND_LOOK] = SPacketPlayerPosLook_1._SPacketPlayerPosLook;
        this._inPacketArr[reg._CLIENT_SPAWN_PLAYER] = SPacketSpawnPlayer_1._SPacketSpawnPlayer;
        this._inPacketArr[reg._CLIENT_ENTITY_RELATIVE_MOVE] = SPacketEntityRelativeMove_1._SPacketEntityRelativeMove;
        this._inPacketArr[reg._CLIENT_ENTITY_LOOK_AND_RELATIVE_MOVE] = SPacketEntityLookRelativeMove_1._SPacketEntityLookRelativeMove;
        this._inPacketArr[reg._CLIENT_ENTITY_LOOK] = SPacketEntityLook_1._SPacketEntityLook;
        this._inPacketArr[reg._CLIENT_ENTITY_TELEPORT] = SPacketEntityTeleport_1._SPacketEntityTeleport;
        this._inPacketArr[reg._CLIENT_DESTROY_ENTITIES] = SPacketEntityDestroy_1._SPacketEntityDestroy;
        this._inPacketArr[reg._CLIENT_SPAWN_MOB] = SPacketSpawnMob_1._SPacketSpawnMob;
        this._inPacketArr[reg._CLIENT_BLOCK_CHANGE] = SPacketBlockChange_1._SPacketBlockChange;
        this._inPacketArr[reg._CLIENT_MULTI_BLOCK_CHANGE] = SPacketMultiBlockChange_1._SPacketMultiBlockChange;
        this._inPacketArr[reg._CLIENT_UNLOAD_CHUNK] = SPacketChunkUnload_1._SPacketChunkUnload;
        if (this._protocol <= 47) {
            this._inPacketArr[reg._CLIENT_CHUNK_DATA] = SPacketChunkData47_1._SPacketChunkData47;
            this._inPacketArr[reg._CLIENT_MAP_CHUNK_BULK] = SPacketMapChunkBulk47_1._SPacketMapChunkBulk47;
            this._inPacketArr[reg._CLIENT_OPEN_WINDOW] = SPacketOpenWindow_1._SPacketOpenWindow;
            this._inPacketArr[reg._CLIENT_WINDOW_ITEMS] = SPacketWindowItems_1._SPacketWindowItems;
            this._inPacketArr[reg._CLIENT_SET_SLOT] = SPacketSetSlot_1._SPacketSetSlot;
        }
        if (this._protocol >= 107) {
            this._inPacketArr[reg._CLIENT_CHUNK_DATA] = SPacketChunkData107_1._SPacketChunkData107;
        }
    }
    _handleKeepAlive(packet) {
        console.log(`keep alive: ${packet._keepAliveID}`);
        this._netManager._sendPacket(new CPacketKeepAlive_1._CPacketKeepAlive(packet._keepAliveID));
    }
    _handleJoinGame(packet) {
        console.log(`joined the game:`, packet);
        const world = new WorldClient_1._WorldClient(this._klocki, this);
        this._klocki._theWorld = world;
        const thePlayer = new KlockiEntityPlayerSP_1._KlockiEntityPlayerSP(this._klocki);
        thePlayer._eid = packet._entityId;
        thePlayer._gameMode = packet._gameType;
        world._thePlayer = thePlayer;
        world._addEntity(thePlayer);
        this._world = world;
        if (this._firstJoin) {
            this._firstJoin = false;
        }
    }
    _handleChat(packet) {
        const jsonChat = JSON.parse(packet._chatComponent);
        const plainText = ChatUtils_1._ChatUtils._toLegacyTextFromChat(jsonChat);
        console.log("rawChat:", packet._chatComponent);
        console.log(`CHAT: ${ChatColor_1._ChatColor._stripColor(plainText)}`);
        this._klocki._guiChat._appendMessage(jsonChat);
    }
    _handlePlayerPosLook(packet) {
        if (this._world === null) {
            return;
        }
        const thePlayer = this._world._thePlayer;
        let v = "pos move:";
        if (packet._isRelative(SPacketPlayerPosLook_1._SPacketPlayerPosLook._X_FLAG)) {
            v += ` x_rel=${packet._x}`;
            thePlayer._posX += packet._x;
        }
        else {
            v += ` x_abs=${packet._x}`;
            thePlayer._posX = packet._x;
        }
        if (packet._isRelative(SPacketPlayerPosLook_1._SPacketPlayerPosLook._Y_FLAG)) {
            v += ` y_rel=${packet._y}`;
            thePlayer._posY += packet._y;
        }
        else {
            v += ` y_abs=${packet._y}`;
            thePlayer._posY = packet._y;
        }
        if (packet._isRelative(SPacketPlayerPosLook_1._SPacketPlayerPosLook._Z_FLAG)) {
            v += ` z_rel=${packet._z}`;
            thePlayer._posZ += packet._z;
        }
        else {
            v += ` z_abs=${packet._z}`;
            thePlayer._posZ = packet._z;
        }
        if (packet._isRelative(SPacketPlayerPosLook_1._SPacketPlayerPosLook._YAW_ROT_FLAG)) {
            v += ` yaw_rel=${packet._yaw}`;
            thePlayer._yaw += (packet._yaw / 180) * Math.PI;
        }
        else {
            v += ` yaw_abs=${packet._yaw}`;
            thePlayer._yaw = (packet._yaw / 180) * Math.PI;
        }
        if (packet._isRelative(SPacketPlayerPosLook_1._SPacketPlayerPosLook._PITCH_ROT_FLAG)) {
            v += ` pitch_rel=${packet._pitch}`;
            thePlayer._pitch += (packet._pitch / 180) * Math.PI;
        }
        else {
            v += ` pitch_abs=${packet._pitch}`;
            thePlayer._pitch = (packet._pitch / 180) * Math.PI;
        }
        console.log(v);
        if (this._protocol >= 107) {
            this._netManager._sendPacket(new CPacketTeleportConfirm_1._CPacketTeleportConfirm(packet._teleportId));
        }
    }
    _handleChunkData47(packet) {
        if (!this._world) {
            return;
        }
        const primaryMask = packet._primaryBitMask;
        this._world._setUglyChunkLoaded(packet._chunkX, packet._chunkZ);
        let offset = 0;
        for (let y = 0; y < 16; y++) {
            if ((primaryMask & (1 << y)) !== 0) {
                const cpblocks = packet._data.slice(offset, offset + 8192);
                this._loadChunk47(packet._chunkX, y, packet._chunkZ, cpblocks);
                offset += 8192;
            }
        }
    }
    _handleChunkUnload(packet) {
        const world = this._world;
        if (world != null) {
            const x = packet._chunkX;
            const z = packet._chunkZ;
            world._setUglyChunkUnloaded(x, z);
            for (let y = 0; y < 16; y++) {
                const key = WorldClient_1._WorldClient._sectionKey(x, y, z);
                const w = world._sections.get(key);
                if (w != null) {
                    w._setSection(null);
                }
            }
        }
    }
    _handleMapChunkBulk47(packet) {
        const world = this._world;
        if (!world) {
            return;
        }
        for (let i = 0; i < packet._chunkX.length; i++) {
            const x = packet._chunkX[i];
            const z = packet._chunkZ[i];
            this._world._setUglyChunkLoaded(x, z);
            const primaryMask = packet._primaryBitMask[i];
            let offset = 0;
            for (let y = 0; y < 16; y++) {
                if ((primaryMask & (1 << y)) !== 0) {
                    const data = packet._chunkData[i];
                    const cpblocks = data.slice(offset, offset + 8192);
                    this._loadChunk47(x, y, z, cpblocks);
                    offset += 8192;
                }
            }
        }
    }
    _loadChunk47(x, y, z, cpblocks) {
        const world = this._world;
        const uints = new Uint32Array(new Uint16Array(cpblocks.buffer, 0, 4096));
        const storage = new Uint32BlockStorage_1._Uint32BlockStorage(y, false, uints);
        const section = new ChunkSection_1._ChunkSection(x, y, z, storage);
        let w = world._getSectionWatcher(x, y, z);
        w._setSection(section);
        w = world._getSectionWatcher(x + 1, y, z);
        w._notify();
        w = world._getSectionWatcher(x, y, z + 1);
        w._notify();
        w = world._getSectionWatcher(x - 1, y, z);
        w._notify();
        w = world._getSectionWatcher(x, y, z - 1);
        w._notify();
    }
    _handleSpawnPlayer(packet) {
        const world = this._world;
        if (world != null) {
            console.log("spawning player eid", packet._eid);
            const player = new KlockiEntityPlayerMP_1._KlockiEntityPlayerMP(this._klocki);
            player._eid = packet._eid;
            player._serverPosX = packet._serverx;
            player._serverPosY = packet._servery;
            player._serverPosZ = packet._serverz;
            player._serverYaw = packet._yaw;
            player._serverPitch = packet._pitch;
            player._yaw = packet._yaw;
            player._pitch = packet._pitch;
            player._prevYaw = packet._yaw;
            player._prevPitch = packet._pitch;
            player._posX = packet._serverx;
            player._posY = packet._servery;
            player._posZ = packet._serverz;
            player._lastTickPosX = packet._serverx;
            player._lastTickPosY = packet._servery;
            player._lastTickPosZ = packet._serverz;
            player._prevPosX = packet._serverx;
            player._prevPosY = packet._servery;
            player._prevPosZ = packet._serverz;
            world._addEntity(player);
        }
    }
    _handleSpawnMob(packet) {
        const world = this._world;
        if (world != null) {
            let entity = null;
            let creeperType = 50;
            if (this._protocol >= 480) {
                creeperType = 11;
            }
            if (packet._mobType == creeperType) {
                entity = new KlockiEntityCreeper_1._KlockiEntityCreeper(this._klocki);
            }
            if (entity != null) {
                entity._eid = packet._eid;
                entity._serverPosX = packet._serverx;
                entity._serverPosY = packet._servery;
                entity._serverPosZ = packet._serverz;
                entity._serverYaw = packet._yaw;
                entity._serverPitch = packet._pitch;
                entity._yaw = packet._yaw;
                entity._pitch = packet._pitch;
                entity._prevYaw = packet._yaw;
                entity._prevPitch = packet._pitch;
                entity._posX = packet._serverx;
                entity._posY = packet._servery;
                entity._posZ = packet._serverz;
                entity._lastTickPosX = packet._serverx;
                entity._lastTickPosY = packet._servery;
                entity._lastTickPosZ = packet._serverz;
                entity._prevPosX = packet._serverx;
                entity._prevPosY = packet._servery;
                entity._prevPosZ = packet._serverz;
                world._addEntity(entity);
            }
        }
    }
    _handleSpawnObject(packet) {
        const world = this._world;
        if (world != null) {
            let entity = null;
            let itemFrameType = 50;
            if (this._protocol >= 480) {
                itemFrameType = 71;
            }
            if (packet._mobType == itemFrameType) {
                entity = new KlockiEntityItemFrame_1._KlockiEntityItemFrame(this._klocki);
            }
            if (entity != null) {
                entity._eid = packet._eid;
                entity._serverPosX = packet._serverx;
                entity._serverPosY = packet._servery;
                entity._serverPosZ = packet._serverz;
                entity._serverYaw = packet._yaw;
                entity._serverPitch = packet._pitch;
                entity._yaw = packet._yaw;
                entity._pitch = packet._pitch;
                entity._prevYaw = packet._yaw;
                entity._prevPitch = packet._pitch;
                entity._posX = packet._serverx;
                entity._posY = packet._servery;
                entity._posZ = packet._serverz;
                entity._lastTickPosX = packet._serverx;
                entity._lastTickPosY = packet._servery;
                entity._lastTickPosZ = packet._serverz;
                entity._prevPosX = packet._serverx;
                entity._prevPosY = packet._servery;
                entity._prevPosZ = packet._serverz;
                world._addEntity(entity);
            }
        }
    }
    _handleEntityRelativeMove(packet) {
        const world = this._world;
        if (world != null) {
            const entity = world._getEntity(packet._eid);
            if (entity) {
                entity._serverPosX += packet._serverx;
                entity._serverPosY += packet._servery;
                entity._serverPosZ += packet._serverz;
                entity._setNewLocation(entity._serverPosX, entity._serverPosY, entity._serverPosZ, entity._serverYaw, entity._serverPitch, 3, false);
            }
        }
    }
    _handleEntityLookRelativeMove(packet) {
        const world = this._world;
        if (world != null) {
            const entity = world._getEntity(packet._eid);
            if (entity) {
                entity._serverPosX += packet._serverx;
                entity._serverPosY += packet._servery;
                entity._serverPosZ += packet._serverz;
                entity._serverYaw = packet._yaw;
                entity._serverPitch = packet._pitch;
                entity._setNewLocation(entity._serverPosX, entity._serverPosY, entity._serverPosZ, entity._serverYaw, entity._serverPitch, 3, false);
            }
        }
    }
    _handleEntityLook(packet) {
        const world = this._world;
        if (world != null) {
            const entity = world._getEntity(packet._eid);
            if (entity) {
                entity._serverYaw = packet._yaw;
                entity._serverPitch = packet._pitch;
                entity._setNewLocation(entity._serverPosX, entity._serverPosY, entity._serverPosZ, entity._serverYaw, entity._serverPitch, 3, false);
            }
        }
    }
    _handleEntityTeleport(packet) {
        const world = this._world;
        if (world != null) {
            const entity = world._getEntity(packet._eid);
            if (entity) {
                entity._serverPosX = packet._serverx;
                entity._serverPosY = packet._servery;
                entity._serverPosZ = packet._serverz;
                entity._serverYaw = packet._yaw;
                entity._serverPitch = packet._pitch;
                entity._setNewLocation(entity._serverPosX, entity._serverPosY, entity._serverPosZ, entity._serverYaw, entity._serverPitch, 3, false);
            }
        }
    }
    _handleEntityDestroy(packet) {
        const world = this._world;
        if (world != null) {
            for (let i = 0; i < packet._count; i++) {
                const eid = packet._eids[i];
                const entity = world._getEntity(eid);
                if (entity) {
                    entity._onDestroy();
                    world._removeEntity(eid);
                }
            }
        }
    }
    _handleOpenWindow(packet) {
        const world = this._world;
        if (world != null) {
            const player = world._thePlayer;
            if (packet._windowId == 0) {
                console.log("window main inv: " + packet._windowType);
                for (let i = 0; i < packet._numSlots; i++) {
                    void (player);
                }
            }
        }
    }
    _handleWindowItems(packet) {
        const world = this._world;
        if (world != null) {
            const player = world._thePlayer;
            void (player);
            console.log("window items " + packet._windowId + " " + packet._count);
            if (packet._windowId == 0) {
                const inv = player._currentWindow;
                for (let i = 0; i < packet._count; i++) {
                    inv._slots[i]._setItem(packet._slots[i]);
                }
            }
        }
    }
    _handleSetSlot(packet) {
        const world = this._world;
        if (world != null) {
            const player = world._thePlayer;
            void (player);
            console.log("set slot " + packet._windowId + " " + packet._slotId);
            if (packet._windowId == 0) {
                const inv = player._currentWindow;
                inv._slots[packet._slotId]._setItem(packet._slot);
            }
        }
    }
    _handleBlockChange(packet) {
        const world = this._world;
        if (world != null) {
            const bx = packet._position[0];
            const by = packet._position[1];
            const bz = packet._position[2];
            const x = bx >> 4;
            const y = by >> 4;
            const z = bz >> 4;
            let w = world._getSectionWatcher(x, y, z);
            let section = w._section;
            if (!w._section) {
                section = new ChunkSection_1._ChunkSection(x, y, z, new Uint32BlockStorage_1._Uint32BlockStorage(y, false, new Uint32Array(4096)));
                w._setSection(section);
            }
            if (section) {
                const sx = bx & 15;
                const sy = by & 15;
                const sz = bz & 15;
                section._setBlockType(sx, sy, sz, packet._blockID);
                w._notify();
                if (sx == 15) {
                    w = world._getSectionWatcher(x + 1, y, z);
                    w._notify();
                }
                if (sz == 15) {
                    w = world._getSectionWatcher(x, y, z + 1);
                    w._notify();
                }
                if (sy == 15) {
                    w = world._getSectionWatcher(x, y + 1, z);
                    w._notify();
                }
                if (sx == 0) {
                    w = world._getSectionWatcher(x - 1, y, z);
                    w._notify();
                }
                if (sz == 0) {
                    w = world._getSectionWatcher(x, y, z - 1);
                    w._notify();
                }
                if (sy == 0) {
                    w = world._getSectionWatcher(x, y - 1, z);
                    w._notify();
                }
            }
        }
    }
    _handleMultiBlockChange(packet) {
        const world = this._world;
        if (world != null) {
            const watchersToNotify = new Set();
            const records = packet._records;
            const offsetX = packet._chunkX * 16;
            const offsetZ = packet._chunkZ * 16;
            for (let i = 0; i < records.length; i += 4) {
                const bx = offsetX + records[i];
                const by = records[i + 1];
                const bz = offsetZ + records[i + 2];
                const blockID = records[i + 3];
                const x = bx >> 4;
                const y = by >> 4;
                const z = bz >> 4;
                let w = world._getSectionWatcher(x, y, z);
                let section = w._section;
                if (!w._section) {
                    section = new ChunkSection_1._ChunkSection(x, y, z, new Uint32BlockStorage_1._Uint32BlockStorage(y, false, new Uint32Array(4096)));
                    w._setSection(section);
                }
                if (section) {
                    const sx = bx & 15;
                    const sy = by & 15;
                    const sz = bz & 15;
                    section._setBlockType(sx, sy, sz, blockID);
                    watchersToNotify.add(w);
                    if (sx == 15) {
                        w = world._getSectionWatcher(x + 1, y, z);
                        watchersToNotify.add(w);
                    }
                    if (sz == 15) {
                        w = world._getSectionWatcher(x, y, z + 1);
                        watchersToNotify.add(w);
                    }
                    if (sy == 15) {
                        w = world._getSectionWatcher(x, y + 1, z);
                        watchersToNotify.add(w);
                    }
                    if (sx == 0) {
                        w = world._getSectionWatcher(x - 1, y, z);
                        watchersToNotify.add(w);
                    }
                    if (sz == 0) {
                        w = world._getSectionWatcher(x, y, z - 1);
                        watchersToNotify.add(w);
                    }
                    if (sy == 0) {
                        w = world._getSectionWatcher(x, y - 1, z);
                        watchersToNotify.add(w);
                    }
                }
            }
            watchersToNotify.forEach((w) => w._notify());
        }
    }
    _handleChunkData107(packet) {
        const world = this._world;
        if (!world) {
            return;
        }
        const primaryMask = packet._primaryBitMask;
        const buf = new PacketBuffer_1._PacketBuffer(packet._data.buffer, packet._data.byteOffset, packet._data.byteLength);
        const x = packet._chunkX;
        const z = packet._chunkZ;
        world._setUglyChunkLoaded(x, z);
        for (let y = 0; y < 16; y++) {
            if ((primaryMask & (1 << y)) !== 0) {
                const nonAirBlocks = buf._readUint16();
                void (nonAirBlocks);
                let bitsPerBlock = buf._readUint8();
                if (bitsPerBlock < 4) {
                }
                let blockMap = null;
                if (bitsPerBlock <= 8) {
                    const count = buf._readVarInt();
                    blockMap = new Uint32Array(count);
                    for (let i = 0; i < count; i++) {
                        const bid = buf._readVarInt();
                        blockMap[i] = bid;
                    }
                }
                else {
                }
                const blocks = new Uint32Array(4096);
                const blen = buf._readVarInt();
                if (blen < 0 || blen > 1024 * 1024) {
                    throw new Error("wrong count of uint64s in block array");
                }
                const packed = buf._readUint32Array(blen * 2);
                let val1 = 0;
                let val2 = 0;
                for (let i = 0; i < packed.length; i += 2) {
                    val1 = packed[i];
                    val2 = packed[i + 1];
                    packed[i + 1] = ((val1 & 0xFF) << 24) | ((val1 & 0xFF00) << 8) | ((val1 >>> 8) & 0xFF00) | ((val1 >>> 24) & 0xFF);
                    packed[i] = ((val2 & 0xFF) << 24) | ((val2 & 0xFF00) << 8) | ((val2 >>> 8) & 0xFF00) | ((val2 >>> 24) & 0xFF);
                }
                const bitMap = new BitMap_1._BitMap(bitsPerBlock, packed);
                if (blockMap == null) {
                    for (let i = 0; i < 4096; i++) {
                        blocks[i] = bitMap._get(i);
                    }
                }
                else {
                    for (let i = 0; i < 4096; i++) {
                        blocks[i] = blockMap[bitMap._get(i)];
                    }
                }
                const storage = new Uint32BlockStorage_1._Uint32BlockStorage(y, false, blocks);
                const section = new ChunkSection_1._ChunkSection(x, y, z, storage);
                section._debugInfo = "bits:" + bitsPerBlock;
                let w = world._getSectionWatcher(x, y, z);
                w._setSection(section);
                w = world._getSectionWatcher(x + 1, y, z);
                w._notify();
                w = world._getSectionWatcher(x, y, z + 1);
                w._notify();
                w = world._getSectionWatcher(x - 1, y, z);
                w._notify();
                w = world._getSectionWatcher(x, y, z - 1);
                w._notify();
            }
        }
    }
    _respawn() {
        this._netManager._sendPacket(new CPacketClientStatus_1._CPacketClientStatus(0));
    }
    _sendPosition(x, y, z, yaw, pitch, onground) {
        this._netManager._sendPacket(new CPacketPositionAndLook_1._CPacketPositionAndLook(x, y, z, (yaw / Math.PI) * 180, (pitch / Math.PI) * 180, onground));
    }
    _deserialize(id) {
        const packetClass = this._inPacketArr[id];
        if (packetClass !== undefined) {
            return new packetClass();
        }
        else {
            return null;
        }
    }
}
exports._NetHandlerPlayClient = _NetHandlerPlayClient;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketChat extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._chatComponent = buf._readString();
        this._type = buf._readInt8();
    }
    _processPacket(handler) {
        handler._handleChat(this);
    }
}
exports._SPacketChat = _SPacketChat;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketJoinGame extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._entityId = buf._readInt32();
        let i = buf._readUint8();
        this._hardcoreMode = (i & 8) == 8;
        i = i & -9;
        this._gameType = i;
        if (reg._protocol >= 107) {
            this._dimension = buf._readInt32();
        }
        else {
            this._dimension = buf._readInt8();
        }
        if (reg._protocol < 477) {
            this._difficulty = buf._readUint8();
        }
        this._maxPlayers = buf._readUint8();
        this._worldType = buf._readString();
        if (reg._protocol >= 477) {
            this._viewDistance = buf._readVarInt();
        }
        this._reducedDebugInfo = buf._readBoolean();
    }
    _processPacket(handler) {
        handler._handleJoinGame(this);
    }
}
exports._SPacketJoinGame = _SPacketJoinGame;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketKeepAlive extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        if (reg._protocol >= 107) {
            this._keepAliveID = buf._readUint8Array(8);
        }
        else {
            this._keepAliveID = buf._readVarInt();
        }
    }
    _processPacket(handler) {
        handler._handleKeepAlive(this);
    }
}
exports._SPacketKeepAlive = _SPacketKeepAlive;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _CPacketKeepAlive extends Packet_1._Packet {
    constructor(keepAliveID) {
        super();
        this._keepAliveID = keepAliveID;
    }
    _writePacketData(buf, reg) {
        buf._writeVarInt(reg._SERVER_KEEPALIVE);
        if (reg._protocol >= 107) {
            buf._writeUint8Array(this._keepAliveID);
        }
        else {
            buf._writeVarInt(this._keepAliveID);
        }
    }
}
exports._CPacketKeepAlive = _CPacketKeepAlive;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketPlayerPosLook extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._x = buf._readFloat64();
        this._y = buf._readFloat64();
        this._z = buf._readFloat64();
        this._yaw = buf._readFloat32();
        this._pitch = buf._readFloat32();
        this._flags = buf._readUint8();
        if (reg._protocol >= 107) {
            this._teleportId = buf._readVarInt();
        }
    }
    _processPacket(handler) {
        handler._handlePlayerPosLook(this);
    }
    _isRelative(flag) {
        if (this._flags !== undefined) {
            return (this._flags & flag) === flag;
        }
        return false;
    }
}
exports._SPacketPlayerPosLook = _SPacketPlayerPosLook;
_SPacketPlayerPosLook._X_FLAG = 0x01;
_SPacketPlayerPosLook._Y_FLAG = 0x02;
_SPacketPlayerPosLook._Z_FLAG = 0x04;
_SPacketPlayerPosLook._YAW_ROT_FLAG = 0x08;
_SPacketPlayerPosLook._PITCH_ROT_FLAG = 0x10;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketChunkData47 extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._chunkX = buf._readInt32();
        this._chunkZ = buf._readInt32();
        this._groundUpContinuous = buf._readBoolean();
        this._primaryBitMask = buf._readUint16();
        this._data = buf._readUint8Array(buf._readVarInt());
    }
    _processPacket(handler) {
        handler._handleChunkData47(this);
    }
}
exports._SPacketChunkData47 = _SPacketChunkData47;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketMapChunkBulk47 extends Packet_1._Packet {
    static _calculateSize(bitCount, skyLightSent, hasBiomes) {
        const a = bitCount * 2 * 16 * 16 * 16;
        const b = bitCount * 16 * 16 * 16 / 2;
        const c = skyLightSent ? bitCount * 16 * 16 * 16 / 2 : 0;
        const d = hasBiomes ? 256 : 0;
        return a + b + c + d;
    }
    static _bitCount32(n) {
        n = n - ((n >> 1) & 0x55555555);
        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
        return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
    }
    _readPacketData(buf, reg) {
        this._skyLightSent = buf._readBoolean();
        const chunkColumnCount = buf._readVarInt();
        this._chunkX = new Int32Array(chunkColumnCount);
        this._chunkZ = new Int32Array(chunkColumnCount);
        this._primaryBitMask = new Uint16Array(chunkColumnCount);
        this._chunkData = Array(chunkColumnCount);
        for (let i = 0; i < chunkColumnCount; i++) {
            this._chunkX[i] = buf._readInt32();
            this._chunkZ[i] = buf._readInt32();
            this._primaryBitMask[i] = buf._readUint16();
        }
        for (let i = 0; i < chunkColumnCount; i++) {
            const bitCount = _SPacketMapChunkBulk47._bitCount32(this._primaryBitMask[i]);
            const chunkSize = _SPacketMapChunkBulk47._calculateSize(bitCount, this._skyLightSent, true);
            this._chunkData[i] = buf._readUint8Array(chunkSize);
        }
    }
    _processPacket(handler) {
        handler._handleMapChunkBulk47(this);
    }
}
exports._SPacketMapChunkBulk47 = _SPacketMapChunkBulk47;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Klocki_1 = __webpack_require__(2);
const Placeholders_1 = __webpack_require__(102);
const SectionWatcher_1 = __webpack_require__(103);
const TraceGen_1 = __webpack_require__(104);
class _WorldClient {
    constructor(klocki, playHandler) {
        this._thePlayer = null;
        this._klocki = klocki;
        this._playHandler = playHandler;
        this._sections = new Map();
        this._loadedUglyLimitedHeightChunks = new Map();
        this._ticksPassed = 0;
        this._entities = new Map();
        this._renderEntityFunc = (e) => this._renderEntity(e);
        this._tickEntityFunc = (e) => this._tickEntity(e);
    }
    static _uglyChunkKey(x, z) {
        return (x << 16) ^ z;
    }
    static _sectionKey(x, y, z) {
        return (x << 20) ^ (y << 10) ^ z;
    }
    _tick() {
        this._ticksPassed++;
        const thePlayer = this._thePlayer;
        this._entities.forEach(this._tickEntityFunc);
        if (thePlayer) {
            this._klocki._renderList._updatePositions(thePlayer._posX, thePlayer._posY, thePlayer._posZ);
            this._playHandler._sendPosition(thePlayer._posX, thePlayer._posY, thePlayer._posZ, thePlayer._yaw, thePlayer._pitch, thePlayer._onGround);
        }
    }
    _getSectionWatcher(x, y, z) {
        const key = _WorldClient._sectionKey(x, y, z);
        let w = this._sections.get(key);
        if (w === void 0) {
            w = new SectionWatcher_1._SectionWatcher();
            this._sections.set(key, w);
        }
        return w;
    }
    _setSection(x, y, z, section) {
        const watcher = this._getSectionWatcher(x, y, z);
        watcher._setSection(section);
    }
    _getSection(x, y, z) {
        const watcher = this._getSectionWatcher(x, y, z);
        return watcher._section;
    }
    _setUglyChunkLoaded(x, z) {
        this._loadedUglyLimitedHeightChunks.set(_WorldClient._uglyChunkKey(x, z), true);
    }
    _isUglyChunkLoaded(x, z) {
        return this._loadedUglyLimitedHeightChunks.get(_WorldClient._uglyChunkKey(x, z)) === true;
    }
    _setUglyChunkUnloaded(x, z) {
        this._loadedUglyLimitedHeightChunks.delete(_WorldClient._uglyChunkKey(x, z));
    }
    _getBlockType(x, y, z) {
        const section = this._getSection(x >> 4, y >> 4, z >> 4);
        if (!section) {
            return 0;
        }
        return section._getBlockType(x & 15, y & 15, z & 15);
    }
    _getBlockAABBsInAABB(aabb) {
        const list = [];
        const minx = Math.floor(aabb._minX());
        const miny = Math.floor(aabb._minY());
        const minz = Math.floor(aabb._minZ());
        const maxx = Math.floor(aabb._maxX() + 1);
        const maxy = Math.floor(aabb._maxY() + 1);
        const maxz = Math.floor(aabb._maxZ() + 1);
        const aabbs = new Array(16);
        let aabbsIndex = 0;
        const reg = this._klocki._blockRegistry;
        for (let x = minx; x < maxx; x++) {
            for (let y = miny; y < maxy; y++) {
                for (let z = minz; z < maxz; z++) {
                    const id = this._getBlockType(x, y, z);
                    if (id >= 1) {
                        const block = reg._byStateId(id);
                        if (block && block._opaque) {
                            aabbs[aabbsIndex++] = Placeholders_1._Placeholders._fullBlockAABB;
                            for (let i = 0; i < aabbsIndex; ++i) {
                                const aabb = aabbs[i]._createWithOffset(x, y, z);
                                list.push(aabb);
                            }
                        }
                    }
                }
            }
        }
        return list;
    }
    _addEntity(entity) {
        this._entities.set(entity._eid, entity);
    }
    _getEntity(eid) {
        return this._entities.get(eid);
    }
    _removeEntity(eid) {
        return this._entities.delete(eid);
    }
    _renderEntities() {
        const wr = this._klocki._worldRendererMobs;
        wr._reset();
        wr._pos(0, 200, 0)._tex(0, 0)._color(0xFFFFFFFF)._endVertex();
        wr._pos(100, 200, 0)._tex(1, 0)._color(0xFFFFFFFF)._endVertex();
        wr._pos(0, 200, 100)._tex(0, 1)._color(0xFFFFFFFF)._endVertex();
        wr._pos(100, 200, 100)._tex(1, 1)._color(0xFFFFFFFF)._endVertex();
        wr._atlas = 1;
        wr._pos(0, 210, 0)._tex(0, 0)._color(0xFFFFFFFF)._endVertex();
        wr._pos(100, 210, 0)._tex(1, 0)._color(0xFFFFFFFF)._endVertex();
        wr._pos(0, 210, 100)._tex(0, 1)._color(0xFFFFFFFF)._endVertex();
        wr._pos(100, 210, 100)._tex(1, 1)._color(0xFFFFFFFF)._endVertex();
        wr._atlas = 0;
        this._entities.forEach(this._renderEntityFunc);
    }
    _renderEntity(e) {
        const vec = Klocki_1._Klocki._utilVec3;
        vec[0] = e._posX;
        vec[1] = e._posY;
        vec[2] = e._posZ;
        if (this._klocki._frustum._testSphereTouches(vec, -4)) {
            e._render();
        }
    }
    _tickEntity(e) {
        e._tick();
    }
    _traceAnyBlock(max, s, d) {
        return this._traceRay(max, s, d, (x, y, z) => {
            const blockType = this._getBlockType(x, y, z);
            return blockType == 0;
        });
    }
    _traceRay(max, s, d, cb) {
        const aGen = new TraceGen_1._TraceGen(s[0], d[0]);
        const bGen = new TraceGen_1._TraceGen(s[1], d[1]);
        const cGen = new TraceGen_1._TraceGen(s[2], d[2]);
        let nextNA = aGen._next();
        let nextNB = bGen._next();
        let nextNC = cGen._next();
        let x = Math.floor(s[0]);
        let y = Math.floor(s[1]);
        let z = Math.floor(s[2]);
        while (1) {
            if (!cb(x, y, z)) {
                return [x, y, z];
            }
            let nextN = 0;
            if (nextNA <= nextNB) {
                if (nextNA <= nextNC) {
                    nextN = nextNA;
                    nextNA = aGen._next();
                    x += Math.sign(d[0]);
                }
                else {
                    nextN = nextNC;
                    nextNC = cGen._next();
                    z += Math.sign(d[2]);
                }
            }
            else {
                if (nextNB <= nextNC) {
                    nextN = nextNB;
                    nextNB = bGen._next();
                    y += Math.sign(d[1]);
                }
                else {
                    nextN = nextNC;
                    nextNC = cGen._next();
                    z += Math.sign(d[2]);
                }
            }
            if (nextN > max) {
                break;
            }
        }
        return null;
    }
}
exports._WorldClient = _WorldClient;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const AxisAlignedBB_1 = __webpack_require__(38);
class _Placeholders {
    static _isLiquidBlock(b) {
        return b >= 8 && b <= 11;
    }
    static _makeTranslucent() {
        const blocks = new Array(256);
        blocks[0] = true;
        blocks[6] = true;
        for (let i = 8; i <= 11; i++) {
            blocks[i] = true;
        }
        blocks[31] = true;
        blocks[32] = true;
        for (let i = 37; i <= 40; i++) {
            blocks[i] = true;
        }
        blocks[50] = true;
        blocks[55] = true;
        blocks[59] = true;
        blocks[63] = true;
        blocks[65] = true;
        blocks[66] = true;
        blocks[68] = true;
        blocks[69] = true;
        blocks[70] = true;
        blocks[72] = true;
        blocks[75] = true;
        blocks[76] = true;
        blocks[77] = true;
        blocks[83] = true;
        blocks[90] = true;
        blocks[104] = true;
        blocks[105] = true;
        blocks[106] = true;
        blocks[140] = true;
        blocks[141] = true;
        blocks[142] = true;
        blocks[143] = true;
        blocks[147] = true;
        blocks[148] = true;
        blocks[171] = true;
        blocks[175] = true;
        return blocks;
    }
    static _isTranslucentBlock(id) {
        return _Placeholders._translucentArr[id];
    }
}
exports._Placeholders = _Placeholders;
_Placeholders._translucentArr = _Placeholders._makeTranslucent();
_Placeholders._fullBlockAABB = new AxisAlignedBB_1._AxisAlignedBB(new Float64Array([0, 0, 0, 1, 1, 1]));


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _SectionWatcher {
    constructor() {
        this._section = null;
        this._refCount = 0;
        this._watcher = null;
    }
    _setSection(section) {
        this._section = section;
        this._notify();
    }
    _retain(num) {
        if (num) {
            this._refCount += num;
        }
        else {
            this._refCount++;
        }
    }
    _addWatcher(w) {
        this._watcher = w;
    }
    _notify() {
        if (this._watcher !== null) {
            this._watcher._notify();
        }
    }
}
exports._SectionWatcher = _SectionWatcher;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _TraceGen {
    constructor(start, d) {
        this._count = 0;
        this._state = new Float64Array(2);
        if (d > 0) {
            this._state[0] = (Math.ceil(start) - start) / d;
        }
        else if (d < 0) {
            d = -d;
            this._state[0] = (start - Math.floor(start)) / d;
        }
        this._state[1] = d;
    }
    _next() {
        this._count++;
        if (this._state[1] == 0) {
            return Infinity;
        }
        return this._state[0] + (this._count - 1) / this._state[1];
    }
}
exports._TraceGen = _TraceGen;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _CPacketClientStatus extends Packet_1._Packet {
    constructor(status) {
        super();
        this._status = status;
    }
    _writePacketData(buf, reg) {
        buf._writeVarInt(reg._SERVER_CLIENT_STATUS);
        buf._writeVarInt(this._status);
    }
}
exports._CPacketClientStatus = _CPacketClientStatus;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const PlayerInventory_1 = __webpack_require__(107);
const InventoryWindow_1 = __webpack_require__(108);
const KlockiEntityPlayer_1 = __webpack_require__(40);
class _KlockiEntityPlayerSP extends KlockiEntityPlayer_1._KlockiEntityPlayer {
    constructor(klocki) {
        super(klocki);
        this._doGravity = true;
        this._touchMoveForward = 0;
        this._touchMoveStrafe = 0;
        this._inventory = new PlayerInventory_1._PlayerInventory();
        this._inventoryWindow = new InventoryWindow_1._InventoryWindow(this._inventory);
        this._currentWindow = this._inventoryWindow;
        this._selectedHotbarSlot = 0;
        this._hotbarSlots = 9;
    }
    _tick() {
        super._tick();
    }
    _render() {
        if (this._klocki._personViewMode != 0) {
            super._render();
        }
    }
    _scroll(delta) {
        this._selectedHotbarSlot += delta;
        this._selectedHotbarSlot = (this._selectedHotbarSlot + this._hotbarSlots) % this._hotbarSlots;
    }
}
exports._KlockiEntityPlayerSP = _KlockiEntityPlayerSP;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Slot_1 = __webpack_require__(39);
class _PlayerInventory {
    constructor() {
        this._mainInventory = Slot_1._Slot._makeSlotArray(36);
        this._armorInventory = Slot_1._Slot._makeSlotArray(4);
        this._offHandInventory = Slot_1._Slot._makeSlotArray(1);
    }
}
exports._PlayerInventory = _PlayerInventory;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Window_1 = __webpack_require__(109);
const Slot_1 = __webpack_require__(39);
class _InventoryWindow extends Window_1._Window {
    constructor(inv) {
        super(46);
        for (let i = 0; i < 5; i++) {
            this._initAppendSlot(new Slot_1._Slot());
        }
        this._initAppendSlots(inv._armorInventory);
        this._initAppendSlots(inv._mainInventory);
        this._initAppendSlots(inv._offHandInventory);
    }
}
exports._InventoryWindow = _InventoryWindow;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Window {
    constructor(countSlots) {
        this._slotIndex = 0;
        this._slots = new Array(countSlots);
    }
    _initAppendSlot(s) {
        if (this._slotIndex >= this._slots.length) {
            throw new Error("init window: too small window size in constructor");
        }
        this._slots[this._slotIndex++] = s;
    }
    _initAppendSlots(ss) {
        for (let i = 0; i < ss.length; i++) {
            this._initAppendSlot(ss[i]);
        }
    }
}
exports._Window = _Window;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketSpawnPlayer extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._eid = buf._readVarInt();
        this._uuid = buf._readUint8Array(16);
        if (reg._protocol <= 47) {
            this._serverx = buf._readInt32() / 32;
            this._servery = buf._readInt32() / 32;
            this._serverz = buf._readInt32() / 32;
        }
        else {
            this._serverx = buf._readFloat64();
            this._servery = buf._readFloat64();
            this._serverz = buf._readFloat64();
        }
        this._yaw = buf._readInt8() / 256 * Math.PI * 2;
        this._pitch = buf._readInt8() / 256 * Math.PI * 2;
        if (reg._protocol >= 480) {
        }
        else if (reg._protocol >= 107) {
            this._flags = buf._readUint8();
            this._currentItem = buf._readInt16();
        }
        buf._setReaderIndex(buf._u8.byteLength);
    }
    _processPacket(handler) {
        handler._handleSpawnPlayer(this);
    }
}
exports._SPacketSpawnPlayer = _SPacketSpawnPlayer;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const KlockiEntityPlayer_1 = __webpack_require__(40);
class _KlockiEntityPlayerMP extends KlockiEntityPlayer_1._KlockiEntityPlayer {
    constructor(klocki) {
        super(klocki);
    }
    _tick() {
        super._tick();
    }
}
exports._KlockiEntityPlayerMP = _KlockiEntityPlayerMP;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketEntityRelativeMove extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._eid = buf._readVarInt();
        if (reg._protocol >= 107) {
            this._serverx = buf._readInt16() / (128 * 32);
            this._servery = buf._readInt16() / (128 * 32);
            this._serverz = buf._readInt16() / (128 * 32);
            this._onGround = buf._readBoolean();
        }
        else {
            this._serverx = buf._readInt8() / 32;
            this._servery = buf._readInt8() / 32;
            this._serverz = buf._readInt8() / 32;
        }
        buf._setReaderIndex(buf._u8.byteLength);
    }
    _processPacket(handler) {
        handler._handleEntityRelativeMove(this);
    }
}
exports._SPacketEntityRelativeMove = _SPacketEntityRelativeMove;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketEntityLookRelativeMove extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._eid = buf._readVarInt();
        if (reg._protocol >= 107) {
            this._serverx = buf._readInt16() / (32 * 128);
            this._servery = buf._readInt16() / (32 * 128);
            this._serverz = buf._readInt16() / (32 * 128);
        }
        else {
            this._serverx = buf._readInt8() / 32;
            this._servery = buf._readInt8() / 32;
            this._serverz = buf._readInt8() / 32;
        }
        this._yaw = buf._readInt8() / 256 * Math.PI * 2;
        this._pitch = buf._readInt8() / 256 * Math.PI * 2;
        buf._setReaderIndex(buf._u8.byteLength);
    }
    _processPacket(handler) {
        handler._handleEntityLookRelativeMove(this);
    }
}
exports._SPacketEntityLookRelativeMove = _SPacketEntityLookRelativeMove;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketEntityLook extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._eid = buf._readVarInt();
        this._yaw = buf._readInt8() / 256 * Math.PI * 2;
        this._pitch = buf._readInt8() / 256 * Math.PI * 2;
        buf._setReaderIndex(buf._u8.byteLength);
    }
    _processPacket(handler) {
        handler._handleEntityLook(this);
    }
}
exports._SPacketEntityLook = _SPacketEntityLook;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketEntityTeleport extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._eid = buf._readVarInt();
        if (reg._protocol >= 107) {
            this._serverx = buf._readFloat64();
            this._servery = buf._readFloat64();
            this._serverz = buf._readFloat64();
        }
        else {
            this._serverx = buf._readInt32() / 32;
            this._servery = buf._readInt32() / 32;
            this._serverz = buf._readInt32() / 32;
        }
        this._yaw = buf._readInt8() / 256 * Math.PI * 2;
        this._pitch = buf._readInt8() / 256 * Math.PI * 2;
        buf._setReaderIndex(buf._u8.byteLength);
    }
    _processPacket(handler) {
        handler._handleEntityTeleport(this);
    }
}
exports._SPacketEntityTeleport = _SPacketEntityTeleport;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _CPacketPositionAndLook extends Packet_1._Packet {
    constructor(x, y, z, yaw, pitch, onground) {
        super();
        this._x = x;
        this._y = y;
        this._z = z;
        this._yaw = yaw;
        this._pitch = pitch;
        this._onground = onground;
    }
    _writePacketData(buf, reg) {
        buf._writeVarInt(reg._SERVER_PLAYER_LOOK_AND_POSITION);
        buf._writeFloat64(this._x);
        buf._writeFloat64(this._y);
        buf._writeFloat64(this._z);
        buf._writeFloat32(this._yaw);
        buf._writeFloat32(this._pitch);
        buf._writeBoolean(this._onground);
    }
}
exports._CPacketPositionAndLook = _CPacketPositionAndLook;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
const Nbt_1 = __webpack_require__(43);
class _SPacketChunkData107 extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._chunkX = buf._readInt32();
        this._chunkZ = buf._readInt32();
        this._fullChunk = buf._readBoolean();
        this._primaryBitMask = buf._readVarInt();
        if (reg._protocol >= 480) {
            this._heightmaps = Nbt_1._NbtReader._readMainTag(buf);
        }
        this._size = buf._readVarInt();
        this._data = buf._readUint8Array(this._size);
        this._countBlockEntities = buf._readVarInt();
        buf._setReaderIndex(buf._u8.byteLength);
    }
    _processPacket(handler) {
        handler._handleChunkData107(this);
    }
}
exports._SPacketChunkData107 = _SPacketChunkData107;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _BitMap {
    constructor(bitSize, bits) {
        this._bitSize = bitSize;
        this._bits = bits;
        this._mask = (1 << this._bitSize) - 1;
    }
    _get(i) {
        const bitSize = this._bitSize;
        i *= bitSize;
        const pos = i >> 5;
        const mask = this._mask;
        const ii = i & 0x1F;
        const pos2 = (i + bitSize - 1) >>> 5;
        const bits = this._bits;
        const len = bits.length;
        if (pos < len && pos2 < len) {
            if (pos2 != pos) {
                const used = 32 - ii;
                return ((bits[pos] >>> ii) | ((bits[pos2]) << used)) & mask;
            }
            else {
                return (bits[pos] >>> ii) & mask;
            }
        }
        else {
            return 0;
        }
    }
}
exports._BitMap = _BitMap;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketEntityDestroy extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._count = buf._readVarInt();
        if (this._count > 1024 * 1024 || this._count < 0) {
            throw new Error("can't destroy " + this._count + " entities");
        }
        this._eids = new Array(this._count);
        for (let i = 0; i < this._count; i++) {
            this._eids[i] = buf._readVarInt();
        }
    }
    _processPacket(handler) {
        handler._handleEntityDestroy(this);
    }
}
exports._SPacketEntityDestroy = _SPacketEntityDestroy;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketOpenWindow extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._windowId = buf._readUint8();
        this._windowType = buf._readString();
        this._windowTitle = buf._readString();
        this._numSlots = buf._readUint8();
        this._entityId = buf._readInt32();
    }
    _processPacket(handler) {
        handler._handleOpenWindow(this);
    }
}
exports._SPacketOpenWindow = _SPacketOpenWindow;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
const ItemStack_1 = __webpack_require__(44);
class _SPacketWindowItems extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._windowId = buf._readUint8();
        this._count = buf._readUint16();
        const slots = new Array(this._count);
        for (let i = 0; i < this._count; i++) {
            slots[i] = ItemStack_1._ItemStack._read(buf, reg._protocol);
        }
        this._slots = slots;
    }
    _processPacket(handler) {
        handler._handleWindowItems(this);
    }
}
exports._SPacketWindowItems = _SPacketWindowItems;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
const ItemStack_1 = __webpack_require__(44);
class _SPacketSetSlot extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._windowId = buf._readUint8();
        this._slotId = buf._readUint16();
        this._slot = ItemStack_1._ItemStack._read(buf, reg._protocol);
    }
    _processPacket(handler) {
        handler._handleSetSlot(this);
    }
}
exports._SPacketSetSlot = _SPacketSetSlot;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketSpawnMob extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._eid = buf._readVarInt();
        if (reg._protocol >= 340) {
            this._uuid = buf._readUint8Array(16);
        }
        if (reg._protocol >= 107) {
            this._mobType = buf._readVarInt();
        }
        else {
            this._mobType = buf._readUint8();
        }
        if (reg._protocol >= 107) {
            this._serverx = buf._readFloat64();
            this._servery = buf._readFloat64();
            this._serverz = buf._readFloat64();
        }
        else {
            this._serverx = buf._readInt32() / 32;
            this._servery = buf._readInt32() / 32;
            this._serverz = buf._readInt32() / 32;
        }
        this._yaw = buf._readInt8() / 256 * Math.PI * 2;
        this._pitch = buf._readInt8() / 256 * Math.PI * 2;
        this._headPitch = buf._readInt8() / 256 * Math.PI * 2;
        this._velocityx = buf._readInt16() / 8000;
        this._velocityy = buf._readInt16() / 8000;
        this._velocityz = buf._readInt16() / 8000;
        buf._setReaderIndex(buf._u8.byteLength);
    }
    _processPacket(handler) {
        handler._handleSpawnMob(this);
    }
}
exports._SPacketSpawnMob = _SPacketSpawnMob;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const KlockiEntityLiving_1 = __webpack_require__(41);
class _KlockiEntityCreeper extends KlockiEntityLiving_1._KlockiEntityLiving {
    constructor(klocki) {
        super(klocki);
    }
    _tick() {
        super._tick();
        const dx = this._posX - this._prevPosX;
        const dz = this._posZ - this._prevPosZ;
        this._prevLimbSwingAmount = this._limbSwingAmount;
        let dist = Math.sqrt(dx * dx + dz * dz) * 4;
        if (dist > 1) {
            dist = 1;
        }
        this._limbSwingAmount += (dist - this._limbSwingAmount) * 0.4;
        this._limbSwing += this._limbSwingAmount;
    }
    _render() {
        this._klocki._entityRenders._renderCreeper._render(this);
    }
}
exports._KlockiEntityCreeper = _KlockiEntityCreeper;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _CPacketTeleportConfirm extends Packet_1._Packet {
    constructor(teleportID) {
        super();
        this._teleportID = teleportID;
    }
    _writePacketData(buf, reg) {
        buf._writeVarInt(reg._SERVER_TELEPORT_CONFIRM);
        buf._writeVarInt(this._teleportID);
    }
}
exports._CPacketTeleportConfirm = _CPacketTeleportConfirm;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketBlockChange extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._position = buf._readPosition();
        this._blockID = buf._readVarInt();
    }
    _processPacket(handler) {
        handler._handleBlockChange(this);
    }
}
exports._SPacketBlockChange = _SPacketBlockChange;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketMultiBlockChange extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._chunkX = buf._readInt32();
        this._chunkZ = buf._readInt32();
        const count = buf._readVarInt();
        if (count < 0 || count > 4096 * 16) {
            throw new Error("wrong multi block change count: " + count);
        }
        const records = this._records = new Int32Array(4 * count);
        for (let i = 0; i < count; i++) {
            const xz = buf._readUint8();
            const y = buf._readUint8();
            const blockID = buf._readVarInt();
            records[i * 4 + 0] = (xz & 0xF0) >> 4;
            records[i * 4 + 1] = y;
            records[i * 4 + 2] = xz & 0xF;
            records[i * 4 + 3] = blockID;
        }
    }
    _processPacket(handler) {
        handler._handleMultiBlockChange(this);
    }
}
exports._SPacketMultiBlockChange = _SPacketMultiBlockChange;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Packet_1 = __webpack_require__(0);
class _SPacketChunkUnload extends Packet_1._Packet {
    _readPacketData(buf, reg) {
        this._chunkX = buf._readInt32();
        this._chunkZ = buf._readInt32();
    }
    _processPacket(handler) {
        handler._handleChunkUnload(this);
    }
}
exports._SPacketChunkUnload = _SPacketChunkUnload;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const KlockiEntityBase_1 = __webpack_require__(42);
class _KlockiEntityItemFrame extends KlockiEntityBase_1._KlockiEntityBase {
    constructor(klocki) {
        super(klocki);
    }
    _tick() {
        super._tick();
    }
    _render() {
        this._klocki._entityRenders._renderItemFrame._render(this);
    }
}
exports._KlockiEntityItemFrame = _KlockiEntityItemFrame;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const pngjs_1 = __webpack_require__(134);
const GoRect_1 = __webpack_require__(18);
const GoImage_1 = __webpack_require__(170);
const TextureAllocator_1 = __webpack_require__(171);
const TextureInfo_1 = __webpack_require__(172);
const KlockiTexture_1 = __webpack_require__(173);
class _TextureManager {
    constructor(klocki) {
        this._klocki = klocki;
        this._cachedTextures = new Map();
        const gl = this._klocki._display._gl;
        const mainTex = gl.createTexture();
        if (!mainTex) {
            throw new Error("can't create main texture");
        }
        this._mainTexture = mainTex;
        this._textureAllocator = new TextureAllocator_1._TextureAllocator();
        this._atlasSize = 1024;
        this._nAtlas = 32;
        this._defaultKlockiTexture = new KlockiTexture_1._KlockiTexture(null, 0, new GoRect_1._GoRect(0, 0, 1, 1));
        const mipLevelCount = 1;
        gl.bindTexture(gl.TEXTURE_2D_ARRAY, this._mainTexture);
        gl.texStorage3D(gl.TEXTURE_2D_ARRAY, mipLevelCount, gl.RGBA8, this._atlasSize, this._atlasSize, this._nAtlas);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        for (let i = 0; i < this._nAtlas; i++) {
            this._textureAllocator._provide(new KlockiTexture_1._KlockiTexture(null, i, new GoRect_1._GoRect(0, 0, this._atlasSize, this._atlasSize)));
        }
        this._makeCubeParamTex();
    }
    static _generateMissingTexture() {
        const pixels = new Uint32Array(8 * 8);
        for (let x = 0; x < 8; x++) {
            for (let y = 0; y < 8; y++) {
                pixels[x * 8] = ((x % 2) === (y % 2)) ? 0xFF00FF00 : 0xFFFF00FF;
            }
        }
        return new Uint8Array(pixels.buffer);
    }
    _init() {
    }
    _loadCached(url, fixedAlias) {
        let texInfo = this._cachedTextures.get(url);
        if (texInfo !== void 0) {
            return texInfo;
        }
        console.log("first time", url);
        texInfo = this._loadTextureFromURL(url, null, null, fixedAlias);
        this._cachedTextures.set(url, texInfo);
        return texInfo;
    }
    _loadTextureFromURL(url, precallback, inpostcallback, fixedAlias) {
        const textureInfo = new TextureInfo_1._TextureInfo(this, this._mainTexture, url, this._defaultKlockiTexture);
        textureInfo._promise = new Promise((resolve, reject) => {
            const postcallback = (tex) => {
                resolve(tex);
                if (inpostcallback != null) {
                    inpostcallback(tex);
                }
                textureInfo._promise = null;
            };
            const cache = null;
            if (cache) {
                const v = this._str2ab(cache);
                try {
                    const png = new pngjs_1.PNG();
                    png.parse(Buffer.from(v), (err, data) => {
                        if (err) {
                            console.warn(`load from cache ${url} failed: ${err}`);
                            localStorage.removeItem(url);
                            this._downloadTextureFromURL(url, precallback, postcallback, fixedAlias, textureInfo);
                        }
                        else {
                            this._loadTextureFromParsedImage(textureInfo, data.data, precallback, postcallback, fixedAlias, png.width, png.height);
                        }
                    });
                }
                catch (e) {
                    console.warn(`load from cache ${url} failed: ${e}`);
                    localStorage.removeItem(url);
                    this._downloadTextureFromURL(url, precallback, postcallback, fixedAlias, textureInfo);
                }
            }
            else {
                this._downloadTextureFromURL(url, precallback, postcallback, fixedAlias, textureInfo);
            }
        });
        return textureInfo;
    }
    _makeCubeParamTex() {
        const gl = this._klocki._display._gl;
        const boxParamTex = gl.createTexture();
        if (!boxParamTex) {
            throw new Error("can't create boxParamTex texture");
        }
        this._groupParamTexture = boxParamTex;
        this._groupParamsTexSize = 256;
        this._groupParamsCount = 0;
        this._groupParamsBuf = new Float32Array(this._groupParamsTexSize * this._groupParamsTexSize * 4);
        gl.activeTexture(gl.TEXTURE1);
        gl.bindTexture(gl.TEXTURE_2D, this._groupParamTexture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this._groupParamsTexSize, this._groupParamsTexSize, 0, gl.RGBA, gl.FLOAT, this._groupParamsBuf, 0);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.activeTexture(gl.TEXTURE0);
    }
    _pushGroupMatrix(mat) {
        const pos = this._groupParamsCount << 4;
        this._groupParamsBuf.set(mat, pos);
        return this._groupParamsCount++;
    }
    _resetBoxBuf() {
        this._groupParamsCount = 0;
    }
    _uploadGroupParamTex() {
        const gl = this._klocki._display._gl;
        gl.bindTexture(gl.TEXTURE_2D, this._groupParamTexture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this._groupParamsTexSize, this._groupParamsTexSize, 0, gl.RGBA, gl.FLOAT, this._groupParamsBuf, 0);
    }
    _downloadTextureFromURL(url, precallback, postcallback, fixedAlias, textureInfo) {
        fetch(url).then(async (v) => {
            if (!v.ok) {
                throw Error(v.statusText);
            }
            return v.arrayBuffer();
        }).then((v) => {
            const png = new pngjs_1.PNG();
            png.parse(Buffer.from(v), (err, data) => {
                if (err) {
                    console.warn(`load ${url} failed: ${err}`);
                    if (!_TextureManager._missingTexture) {
                        _TextureManager._missingTexture = _TextureManager._generateMissingTexture();
                    }
                    this._loadTextureFromParsedImage(textureInfo, _TextureManager._missingTexture, precallback, postcallback, fixedAlias, 8, 8);
                }
                else {
                    localStorage.setItem(url, this._ab2str(v));
                    this._loadTextureFromParsedImage(textureInfo, data.data, precallback, postcallback, fixedAlias, png.width, png.height);
                }
            });
        }).catch((reason) => {
            console.warn(`load ${url} failed: ${reason}`);
            if (!_TextureManager._missingTexture) {
                _TextureManager._missingTexture = _TextureManager._generateMissingTexture();
            }
            this._loadTextureFromParsedImage(textureInfo, _TextureManager._missingTexture, precallback, postcallback, fixedAlias, 8, 8);
        });
    }
    _loadTextureFromParsedImage(textureInfo, pixels, precallback, postcallback, fixedAlias, w, h) {
        const gl = this._klocki._display._gl;
        gl.bindTexture(gl.TEXTURE_2D_ARRAY, this._mainTexture);
        let aliasWidth = w;
        if (fixedAlias) {
            aliasWidth *= 2;
        }
        const klockiTexture = this._textureAllocator._allocate(aliasWidth);
        textureInfo._allocatedTex = klockiTexture;
        const r = klockiTexture._subRect;
        const imgSource = new GoImage_1._GoImage(pixels, w, h);
        if (precallback != null) {
            precallback(imgSource);
        }
        let uploadedImg = imgSource;
        if (fixedAlias) {
            const apixels = new Uint8Array(aliasWidth * aliasWidth * 4);
            const imgAlias = new GoImage_1._GoImage(apixels, aliasWidth, aliasWidth);
            const dpixels = imgAlias._pixels;
            const w2 = w >> 1;
            for (let x = 0; x < aliasWidth; x++) {
                for (let y = 0; y < aliasWidth; y++) {
                    const doffset = imgAlias._pixOffset(x, y);
                    const soffset = imgSource._pixOffset((w2 + x) % w, (w2 + y) % w);
                    dpixels[doffset + 0] = pixels[soffset + 0];
                    dpixels[doffset + 1] = pixels[soffset + 1];
                    dpixels[doffset + 2] = pixels[soffset + 2];
                    dpixels[doffset + 3] = pixels[soffset + 3];
                }
            }
            uploadedImg = imgAlias;
            textureInfo._tex = klockiTexture._zoomCenter();
        }
        else {
            textureInfo._tex = klockiTexture;
        }
        textureInfo._updateRenderInfo();
        if (postcallback != null) {
            postcallback(textureInfo._tex);
        }
        const mipmapLevel = 0;
        const srcFormat = gl.RGBA;
        const srcType = gl.UNSIGNED_BYTE;
        gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, mipmapLevel, r._min._x, r._min._y, klockiTexture._atlasId, uploadedImg._rect._dx(), uploadedImg._rect._dy(), 1, srcFormat, srcType, uploadedImg._pixels);
    }
    _str2ab(byteString) {
        const byteArray = new Uint8Array(byteString.length);
        for (let i = 0; i < byteString.length; i++) {
            byteArray[i] = byteString.charCodeAt(i);
        }
        return byteArray;
    }
    _ab2str(buffer) {
        const byteArray = new Uint8Array(buffer);
        let byteString = "";
        for (let i = 0; i < byteArray.byteLength; i++) {
            byteString += String.fromCodePoint(byteArray[i]);
        }
        return byteString;
    }
}
exports._TextureManager = _TextureManager;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 132 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 133 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var util = __webpack_require__(4);
var Stream = __webpack_require__(14);
var Parser = __webpack_require__(149);
var Packer = __webpack_require__(161);
var PNGSync = __webpack_require__(164);


var PNG = exports.PNG = function(options) {
  Stream.call(this);

  options = options || {}; // eslint-disable-line no-param-reassign

  // coerce pixel dimensions to integers (also coerces undefined -> 0):
  this.width = options.width | 0;
  this.height = options.height | 0;

  this.data = this.width > 0 && this.height > 0 ?
    new Buffer(4 * this.width * this.height) : null;

  if (options.fill && this.data) {
    this.data.fill(0);
  }

  this.gamma = 0;
  this.readable = this.writable = true;

  this._parser = new Parser(options);

  this._parser.on('error', this.emit.bind(this, 'error'));
  this._parser.on('close', this._handleClose.bind(this));
  this._parser.on('metadata', this._metadata.bind(this));
  this._parser.on('gamma', this._gamma.bind(this));
  this._parser.on('parsed', function(data) {
    this.data = data;
    this.emit('parsed', data);
  }.bind(this));

  this._packer = new Packer(options);
  this._packer.on('data', this.emit.bind(this, 'data'));
  this._packer.on('end', this.emit.bind(this, 'end'));
  this._parser.on('close', this._handleClose.bind(this));
  this._packer.on('error', this.emit.bind(this, 'error'));

};
util.inherits(PNG, Stream);

PNG.sync = PNGSync;

PNG.prototype.pack = function() {

  if (!this.data || !this.data.length) {
    this.emit('error', 'No data provided');
    return this;
  }

  process.nextTick(function() {
    this._packer.pack(this.data, this.width, this.height, this.gamma);
  }.bind(this));

  return this;
};


PNG.prototype.parse = function(data, callback) {

  if (callback) {
    var onParsed, onError;

    onParsed = function(parsedData) {
      this.removeListener('error', onError);

      this.data = parsedData;
      callback(null, this);
    }.bind(this);

    onError = function(err) {
      this.removeListener('parsed', onParsed);

      callback(err, null);
    }.bind(this);

    this.once('parsed', onParsed);
    this.once('error', onError);
  }

  this.end(data);
  return this;
};

PNG.prototype.write = function(data) {
  this._parser.write(data);
  return true;
};

PNG.prototype.end = function(data) {
  this._parser.end(data);
};

PNG.prototype._metadata = function(metadata) {
  this.width = metadata.width;
  this.height = metadata.height;

  this.emit('metadata', metadata);
};

PNG.prototype._gamma = function(gamma) {
  this.gamma = gamma;
};

PNG.prototype._handleClose = function() {
  if (!this._parser.writable && !this._packer.readable) {
    this.emit('close');
  }
};


PNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params
  // coerce pixel dimensions to integers (also coerces undefined -> 0):
  /* eslint-disable no-param-reassign */
  srcX |= 0;
  srcY |= 0;
  width |= 0;
  height |= 0;
  deltaX |= 0;
  deltaY |= 0;
  /* eslint-enable no-param-reassign */

  if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
    throw new Error('bitblt reading outside image');
  }

  if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
    throw new Error('bitblt writing outside image');
  }

  for (var y = 0; y < height; y++) {
    src.data.copy(dst.data,
      ((deltaY + y) * dst.width + deltaX) << 2,
      ((srcY + y) * src.width + srcX) << 2,
      ((srcY + y) * src.width + srcX + width) << 2
    );
  }
};


PNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params

  PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);
  return this;
};

PNG.adjustGamma = function(src) {
  if (src.gamma) {
    for (var y = 0; y < src.height; y++) {
      for (var x = 0; x < src.width; x++) {
        var idx = (src.width * y + x) << 2;

        for (var i = 0; i < 3; i++) {
          var sample = src.data[idx + i] / 255;
          sample = Math.pow(sample, 1 / 2.2 / src.gamma);
          src.data[idx + i] = Math.round(sample * 255);
        }
      }
    }
    src.gamma = 0;
  }
};

PNG.prototype.adjustGamma = function() {
  PNG.adjustGamma(this);
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer, __webpack_require__(3)))

/***/ }),
/* 135 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 136 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 137 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 138 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(16).Buffer;
var util = __webpack_require__(140);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 140 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(142);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6), __webpack_require__(3)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(49);

/*<replacement>*/
var util = __webpack_require__(11);
util.inherits = __webpack_require__(9);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(25);


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(7);


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(24).Transform


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(24).PassThrough


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(4);
var zlib = __webpack_require__(12);
var ChunkStream = __webpack_require__(52);
var FilterAsync = __webpack_require__(160);
var Parser = __webpack_require__(56);
var bitmapper = __webpack_require__(58);
var formatNormaliser = __webpack_require__(59);

var ParserAsync = module.exports = function(options) {
  ChunkStream.call(this);

  this._parser = new Parser(options, {
    read: this.read.bind(this),
    error: this._handleError.bind(this),
    metadata: this._handleMetaData.bind(this),
    gamma: this.emit.bind(this, 'gamma'),
    palette: this._handlePalette.bind(this),
    transColor: this._handleTransColor.bind(this),
    finished: this._finished.bind(this),
    inflateData: this._inflateData.bind(this),
    simpleTransparency: this._simpleTransparency.bind(this),
    headersFinished: this._headersFinished.bind(this)
  });
  this._options = options;
  this.writable = true;

  this._parser.start();
};
util.inherits(ParserAsync, ChunkStream);


ParserAsync.prototype._handleError = function(err) {

  this.emit('error', err);

  this.writable = false;

  this.destroy();

  if (this._inflate && this._inflate.destroy) {
    this._inflate.destroy();
  }

  if (this._filter) {
    this._filter.destroy();
    // For backward compatibility with Node 7 and below.
    // Suppress errors due to _inflate calling write() even after
    // it's destroy()'ed.
    this._filter.on('error', function() {});
  }

  this.errord = true;
};

ParserAsync.prototype._inflateData = function(data) {
  if (!this._inflate) {
    if (this._bitmapInfo.interlace) {
      this._inflate = zlib.createInflate();

      this._inflate.on('error', this.emit.bind(this, 'error'));
      this._filter.on('complete', this._complete.bind(this));

      this._inflate.pipe(this._filter);
    }
    else {
      var rowSize = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7) >> 3) + 1;
      var imageSize = rowSize * this._bitmapInfo.height;
      var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);

      this._inflate = zlib.createInflate({ chunkSize: chunkSize });
      var leftToInflate = imageSize;

      var emitError = this.emit.bind(this, 'error');
      this._inflate.on('error', function(err) {
        if (!leftToInflate) {
          return;
        }

        emitError(err);
      });
      this._filter.on('complete', this._complete.bind(this));

      var filterWrite = this._filter.write.bind(this._filter);
      this._inflate.on('data', function(chunk) {
        if (!leftToInflate) {
          return;
        }

        if (chunk.length > leftToInflate) {
          chunk = chunk.slice(0, leftToInflate);
        }

        leftToInflate -= chunk.length;

        filterWrite(chunk);
      });

      this._inflate.on('end', this._filter.end.bind(this._filter));
    }
  }
  this._inflate.write(data);
};

ParserAsync.prototype._handleMetaData = function(metaData) {
  this._metaData = metaData;
  this._bitmapInfo = Object.create(metaData);

  this._filter = new FilterAsync(this._bitmapInfo);
};

ParserAsync.prototype._handleTransColor = function(transColor) {
  this._bitmapInfo.transColor = transColor;
};

ParserAsync.prototype._handlePalette = function(palette) {
  this._bitmapInfo.palette = palette;
};

ParserAsync.prototype._simpleTransparency = function() {
  this._metaData.alpha = true;
};

ParserAsync.prototype._headersFinished = function() {
  // Up until this point, we don't know if we have a tRNS chunk (alpha)
  // so we can't emit metadata any earlier
  this.emit('metadata', this._metaData);
};

ParserAsync.prototype._finished = function() {
  if (this.errord) {
    return;
  }

  if (!this._inflate) {
    this.emit('error', 'No Inflate block');
  }
  else {
    // no more data to inflate
    this._inflate.end();
  }
  this.destroySoon();
};

ParserAsync.prototype._complete = function(filteredData) {

  if (this.errord) {
    return;
  }

  try {
    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);

    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);
    bitmapData = null;
  }
  catch (ex) {
    this._handleError(ex);
    return;
  }

  this.emit('parsed', normalisedBitmapData);
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {
/* eslint camelcase: "off" */

var assert = __webpack_require__(26);

var Zstream = __webpack_require__(152);
var zlib_deflate = __webpack_require__(153);
var zlib_inflate = __webpack_require__(156);
var constants = __webpack_require__(159);

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

var GZIP_HEADER_ID1 = 0x1f;
var GZIP_HEADER_ID2 = 0x8b;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
    throw new TypeError('Bad argument');
  }

  this.dictionary = null;
  this.err = 0;
  this.flush = 0;
  this.init_done = false;
  this.level = 0;
  this.memLevel = 0;
  this.mode = mode;
  this.strategy = 0;
  this.windowBits = 0;
  this.write_in_progress = false;
  this.pending_close = false;
  this.gzip_id_bytes_read = 0;
}

Zlib.prototype.close = function () {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }

  this.pending_close = false;

  assert(this.init_done, 'close before init');
  assert(this.mode <= exports.UNZIP);

  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
    zlib_inflate.inflateEnd(this.strm);
  }

  this.mode = exports.NONE;

  this.dictionary = null;
};

Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
  assert.equal(arguments.length, 8);

  assert(this.init_done, 'write before init');
  assert(this.mode !== exports.NONE, 'already finalized');
  assert.equal(false, this.write_in_progress, 'write already in progress');
  assert.equal(false, this.pending_close, 'close is pending');

  this.write_in_progress = true;

  assert.equal(false, flush === undefined, 'must provide flush value');

  this.write_in_progress = true;

  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
    throw new Error('Invalid flush value');
  }

  if (input == null) {
    input = Buffer.alloc(0);
    in_len = 0;
    in_off = 0;
  }

  this.strm.avail_in = in_len;
  this.strm.input = input;
  this.strm.next_in = in_off;
  this.strm.avail_out = out_len;
  this.strm.output = out;
  this.strm.next_out = out_off;
  this.flush = flush;

  if (!async) {
    // sync version
    this._process();

    if (this._checkError()) {
      return this._afterSync();
    }
    return;
  }

  // async version
  var self = this;
  process.nextTick(function () {
    self._process();
    self._after();
  });

  return this;
};

Zlib.prototype._afterSync = function () {
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  return [avail_in, avail_out];
};

Zlib.prototype._process = function () {
  var next_expected_header_byte = null;

  // If the avail_out is left at 0, then it means that it ran out
  // of room.  If there was avail_out left over, then it means
  // that all of the input was consumed.
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflate(this.strm, this.flush);
      break;
    case exports.UNZIP:
      if (this.strm.avail_in > 0) {
        next_expected_header_byte = this.strm.next_in;
      }

      switch (this.gzip_id_bytes_read) {
        case 0:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
            this.gzip_id_bytes_read = 1;
            next_expected_header_byte++;

            if (this.strm.avail_in === 1) {
              // The only available byte was already read.
              break;
            }
          } else {
            this.mode = exports.INFLATE;
            break;
          }

        // fallthrough
        case 1:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
            this.gzip_id_bytes_read = 2;
            this.mode = exports.GUNZIP;
          } else {
            // There is no actual difference between INFLATE and INFLATERAW
            // (after initialization).
            this.mode = exports.INFLATE;
          }

          break;
        default:
          throw new Error('invalid number of gzip magic number bytes read');
      }

    // fallthrough
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      this.err = zlib_inflate.inflate(this.strm, this.flush

      // If data was encoded with dictionary
      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {
        // Load it
        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
        if (this.err === exports.Z_OK) {
          // And try to decode again
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        } else if (this.err === exports.Z_DATA_ERROR) {
          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
          // Make it possible for After() to tell a bad dictionary from bad
          // input.
          this.err = exports.Z_NEED_DICT;
        }
      }
      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
        // Bytes remain in input buffer. Perhaps this is another compressed
        // member in the same archive, or just trailing garbage.
        // Trailing zero bytes are okay, though, since they are frequently
        // used for padding.

        this.reset();
        this.err = zlib_inflate.inflate(this.strm, this.flush);
      }
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }
};

Zlib.prototype._checkError = function () {
  // Acceptable error states depend on the type of zlib stream.
  switch (this.err) {
    case exports.Z_OK:
    case exports.Z_BUF_ERROR:
      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
        this._error('unexpected end of file');
        return false;
      }
      break;
    case exports.Z_STREAM_END:
      // normal statuses, not fatal
      break;
    case exports.Z_NEED_DICT:
      if (this.dictionary == null) {
        this._error('Missing dictionary');
      } else {
        this._error('Bad dictionary');
      }
      return false;
    default:
      // something else.
      this._error('Zlib error');
      return false;
  }

  return true;
};

Zlib.prototype._after = function () {
  if (!this._checkError()) {
    return;
  }

  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  // call the write() cb
  this.callback(avail_in, avail_out);

  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype._error = function (message) {
  if (this.strm.msg) {
    message = this.strm.msg;
  }
  this.onerror(message, this.err

  // no hope of rescue.
  );this.write_in_progress = false;
  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');

  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
  assert(level >= -1 && level <= 9, 'invalid compression level');

  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');

  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

  this._init(level, windowBits, memLevel, strategy, dictionary);
  this._setDictionary();
};

Zlib.prototype.params = function () {
  throw new Error('deflateParams Not supported');
};

Zlib.prototype.reset = function () {
  this._reset();
  this._setDictionary();
};

Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
  this.level = level;
  this.windowBits = windowBits;
  this.memLevel = memLevel;
  this.strategy = strategy;

  this.flush = exports.Z_NO_FLUSH;

  this.err = exports.Z_OK;

  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
    this.windowBits += 16;
  }

  if (this.mode === exports.UNZIP) {
    this.windowBits += 32;
  }

  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
    this.windowBits = -1 * this.windowBits;
  }

  this.strm = new Zstream();

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }

  if (this.err !== exports.Z_OK) {
    this._error('Init error');
  }

  this.dictionary = dictionary;

  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype._setDictionary = function () {
  if (this.dictionary == null) {
    return;
  }

  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to set dictionary');
  }
};

Zlib.prototype._reset = function () {
  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
    case exports.GZIP:
      this.err = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
    case exports.GUNZIP:
      this.err = zlib_inflate.inflateReset(this.strm);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to reset stream');
  }
};

exports.Zlib = Zlib;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer, __webpack_require__(3)))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(17);
var trees   = __webpack_require__(154);
var adler32 = __webpack_require__(50);
var crc32   = __webpack_require__(51);
var msg     = __webpack_require__(155);

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__(17);

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(17);
var adler32       = __webpack_require__(50);
var crc32         = __webpack_require__(51);
var inflate_fast  = __webpack_require__(157);
var inflate_table = __webpack_require__(158);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(17);

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var util = __webpack_require__(4);
var ChunkStream = __webpack_require__(52);
var Filter = __webpack_require__(53);


var FilterAsync = module.exports = function(bitmapInfo) {
  ChunkStream.call(this);

  var buffers = [];
  var that = this;
  this._filter = new Filter(bitmapInfo, {
    read: this.read.bind(this),
    write: function(buffer) {
      buffers.push(buffer);
    },
    complete: function() {
      that.emit('complete', Buffer.concat(buffers));
    }
  });

  this._filter.start();
};
util.inherits(FilterAsync, ChunkStream);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var util = __webpack_require__(4);
var Stream = __webpack_require__(14);
var constants = __webpack_require__(13);
var Packer = __webpack_require__(60);

var PackerAsync = module.exports = function(opt) {
  Stream.call(this);

  var options = opt || {};

  this._packer = new Packer(options);
  this._deflate = this._packer.createDeflate();

  this.readable = true;
};
util.inherits(PackerAsync, Stream);


PackerAsync.prototype.pack = function(data, width, height, gamma) {
  // Signature
  this.emit('data', new Buffer(constants.PNG_SIGNATURE));
  this.emit('data', this._packer.packIHDR(width, height));

  if (gamma) {
    this.emit('data', this._packer.packGAMA(gamma));
  }

  var filteredData = this._packer.filterData(data, width, height);

  // compress it
  this._deflate.on('error', this.emit.bind(this, 'error'));

  this._deflate.on('data', function(compressedData) {
    this.emit('data', this._packer.packIDAT(compressedData));
  }.bind(this));

  this._deflate.on('end', function() {
    this.emit('data', this._packer.packIEND());
    this.emit('end');
  }.bind(this));

  this._deflate.end(filteredData);
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var constants = __webpack_require__(13);

module.exports = function(dataIn, width, height, options) {
  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;
  if (options.colorType === options.inputColorType) {
    var bigEndian = (function() {
      var buffer = new ArrayBuffer(2);
      new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
      // Int16Array uses the platform's endianness.
      return new Int16Array(buffer)[0] !== 256;
    })();
    // If no need to convert to grayscale and alpha is present/absent in both, take a fast route
    if (options.bitDepth === 8 || (options.bitDepth === 16 && bigEndian)) {
      return dataIn;
    }
  }

  // map to a UInt16 array if data is 16bit, fix endianness below
  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);

  var maxValue = 255;
  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];
  if (inBpp === 4 && !options.inputHasAlpha) {
    inBpp = 3;
  }
  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];
  if (options.bitDepth === 16) {
    maxValue = 65535;
    outBpp *= 2;
  }
  var outData = new Buffer(width * height * outBpp);

  var inIndex = 0;
  var outIndex = 0;

  var bgColor = options.bgColor || {};
  if (bgColor.red === undefined) {
    bgColor.red = maxValue;
  }
  if (bgColor.green === undefined) {
    bgColor.green = maxValue;
  }
  if (bgColor.blue === undefined) {
    bgColor.blue = maxValue;
  }

  function getRGBA() {
    var red;
    var green;
    var blue;
    var alpha = maxValue;
    switch (options.inputColorType) {
      case constants.COLORTYPE_COLOR_ALPHA:
        alpha = data[inIndex + 3];
        red = data[inIndex];
        green = data[inIndex + 1];
        blue = data[inIndex + 2];
        break;
      case constants.COLORTYPE_COLOR:
        red = data[inIndex];
        green = data[inIndex + 1];
        blue = data[inIndex + 2];
        break;
      case constants.COLORTYPE_ALPHA:
        alpha = data[inIndex + 1];
        red = data[inIndex];
        green = red;
        blue = red;
        break;
      case constants.COLORTYPE_GRAYSCALE:
        red = data[inIndex];
        green = red;
        blue = red;
        break;
      default:
        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');
    }

    if (options.inputHasAlpha) {
      if (!outHasAlpha) {
        alpha /= maxValue;
        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);
        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);
        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);
      }
    }
    return { red: red, green: green, blue: blue, alpha: alpha };
  }

  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      var rgba = getRGBA(data, inIndex);

      switch (options.colorType) {
        case constants.COLORTYPE_COLOR_ALPHA:
        case constants.COLORTYPE_COLOR:
          if (options.bitDepth === 8) {
            outData[outIndex] = rgba.red;
            outData[outIndex + 1] = rgba.green;
            outData[outIndex + 2] = rgba.blue;
            if (outHasAlpha) {
              outData[outIndex + 3] = rgba.alpha;
            }
          }
          else {
            outData.writeUInt16BE(rgba.red, outIndex);
            outData.writeUInt16BE(rgba.green, outIndex + 2);
            outData.writeUInt16BE(rgba.blue, outIndex + 4);
            if (outHasAlpha) {
              outData.writeUInt16BE(rgba.alpha, outIndex + 6);
            }
          }
          break;
        case constants.COLORTYPE_ALPHA:
        case constants.COLORTYPE_GRAYSCALE:
          // Convert to grayscale and alpha
          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;
          if (options.bitDepth === 8) {
            outData[outIndex] = grayscale;
            if (outHasAlpha) {
              outData[outIndex + 1] = rgba.alpha;
            }
          }
          else {
            outData.writeUInt16BE(grayscale, outIndex);
            if (outHasAlpha) {
              outData.writeUInt16BE(rgba.alpha, outIndex + 2);
            }
          }
          break;
        default:
          throw new Error('unrecognised color Type ' + options.colorType);
      }

      inIndex += inBpp;
      outIndex += outBpp;
    }
  }

  return outData;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var paethPredictor = __webpack_require__(55);

function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {

  for (var x = 0; x < byteWidth; x++) {
    rawData[rawPos + x] = pxData[pxPos + x];
  }
}

function filterSumNone(pxData, pxPos, byteWidth) {

  var sum = 0;
  var length = pxPos + byteWidth;

  for (var i = pxPos; i < length; i++) {
    sum += Math.abs(pxData[i]);
  }
  return sum;
}

function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var val = pxData[pxPos + x] - left;

    rawData[rawPos + x] = val;
  }
}

function filterSumSub(pxData, pxPos, byteWidth, bpp) {

  var sum = 0;
  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var val = pxData[pxPos + x] - left;

    sum += Math.abs(val);
  }

  return sum;
}

function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {

  for (var x = 0; x < byteWidth; x++) {

    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var val = pxData[pxPos + x] - up;

    rawData[rawPos + x] = val;
  }
}

function filterSumUp(pxData, pxPos, byteWidth) {

  var sum = 0;
  var length = pxPos + byteWidth;
  for (var x = pxPos; x < length; x++) {

    var up = pxPos > 0 ? pxData[x - byteWidth] : 0;
    var val = pxData[x] - up;

    sum += Math.abs(val);
  }

  return sum;
}

function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var val = pxData[pxPos + x] - ((left + up) >> 1);

    rawData[rawPos + x] = val;
  }
}

function filterSumAvg(pxData, pxPos, byteWidth, bpp) {

  var sum = 0;
  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var val = pxData[pxPos + x] - ((left + up) >> 1);

    sum += Math.abs(val);
  }

  return sum;
}

function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

    rawData[rawPos + x] = val;
  }
}

function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
  var sum = 0;
  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

    sum += Math.abs(val);
  }

  return sum;
}

var filters = {
  0: filterNone,
  1: filterSub,
  2: filterUp,
  3: filterAvg,
  4: filterPaeth
};

var filterSums = {
  0: filterSumNone,
  1: filterSumSub,
  2: filterSumUp,
  3: filterSumAvg,
  4: filterSumPaeth
};

module.exports = function(pxData, width, height, options, bpp) {

  var filterTypes;
  if (!('filterType' in options) || options.filterType === -1) {
    filterTypes = [0, 1, 2, 3, 4];
  }
  else if (typeof options.filterType === 'number') {
    filterTypes = [options.filterType];
  }
  else {
    throw new Error('unrecognised filter types');
  }

  if (options.bitDepth === 16) {
    bpp *= 2;
  }
  var byteWidth = width * bpp;
  var rawPos = 0;
  var pxPos = 0;
  var rawData = new Buffer((byteWidth + 1) * height);

  var sel = filterTypes[0];

  for (var y = 0; y < height; y++) {

    if (filterTypes.length > 1) {
      // find best filter for this line (with lowest sum of values)
      var min = Infinity;

      for (var i = 0; i < filterTypes.length; i++) {
        var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);
        if (sum < min) {
          sel = filterTypes[i];
          min = sum;
        }
      }
    }

    rawData[rawPos] = sel;
    rawPos++;
    filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);
    rawPos += byteWidth;
    pxPos += byteWidth;
  }
  return rawData;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var parse = __webpack_require__(165);
var pack = __webpack_require__(168);


exports.read = function(buffer, options) {

  return parse(buffer, options || {});
};

exports.write = function(png, options) {

  return pack(png, options);
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var hasSyncZlib = true;
var zlib = __webpack_require__(12);
var inflateSync = __webpack_require__(166);
if (!zlib.deflateSync) {
  hasSyncZlib = false;
}
var SyncReader = __webpack_require__(61);
var FilterSync = __webpack_require__(167);
var Parser = __webpack_require__(56);
var bitmapper = __webpack_require__(58);
var formatNormaliser = __webpack_require__(59);


module.exports = function(buffer, options) {

  if (!hasSyncZlib) {
    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
  }

  var err;
  function handleError(_err_) {
    err = _err_;
  }

  var metaData;
  function handleMetaData(_metaData_) {
    metaData = _metaData_;
  }

  function handleTransColor(transColor) {
    metaData.transColor = transColor;
  }

  function handlePalette(palette) {
    metaData.palette = palette;
  }

  function handleSimpleTransparency() {
    metaData.alpha = true;
  }

  var gamma;
  function handleGamma(_gamma_) {
    gamma = _gamma_;
  }

  var inflateDataList = [];
  function handleInflateData(inflatedData) {
    inflateDataList.push(inflatedData);
  }

  var reader = new SyncReader(buffer);

  var parser = new Parser(options, {
    read: reader.read.bind(reader),
    error: handleError,
    metadata: handleMetaData,
    gamma: handleGamma,
    palette: handlePalette,
    transColor: handleTransColor,
    inflateData: handleInflateData,
    simpleTransparency: handleSimpleTransparency
  });

  parser.start();
  reader.process();

  if (err) {
    throw err;
  }

  //join together the inflate datas
  var inflateData = Buffer.concat(inflateDataList);
  inflateDataList.length = 0;

  var inflatedData;
  if (metaData.interlace) {
    inflatedData = zlib.inflateSync(inflateData);
  }
  else {
    var rowSize = ((metaData.width * metaData.bpp * metaData.depth + 7) >> 3) + 1;
    var imageSize = rowSize * metaData.height;
    inflatedData = inflateSync(inflateData, { chunkSize: imageSize, maxLength: imageSize });
  }
  inflateData = null;

  if (!inflatedData || !inflatedData.length) {
    throw new Error('bad png - invalid inflate data response');
  }

  var unfilteredData = FilterSync.process(inflatedData, metaData);
  inflateData = null;

  var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);
  unfilteredData = null;

  var normalisedBitmapData = formatNormaliser(bitmapData, metaData);

  metaData.data = normalisedBitmapData;
  metaData.gamma = gamma || 0;

  return metaData;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

var assert = __webpack_require__(26).ok;
var zlib = __webpack_require__(12);
var util = __webpack_require__(4);

var kMaxLength = __webpack_require__(1).kMaxLength;

function Inflate(opts) {
  if (!(this instanceof Inflate)) {
    return new Inflate(opts);
  }

  if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
    opts.chunkSize = zlib.Z_MIN_CHUNK;
  }

  zlib.Inflate.call(this, opts);

  // Node 8 --> 9 compatibility check
  this._offset = this._offset === undefined ? this._outOffset : this._offset;
  this._buffer = this._buffer || this._outBuffer;

  if (opts && opts.maxLength != null) {
    this._maxLength = opts.maxLength;
  }
}

function createInflate(opts) {
  return new Inflate(opts);
}

function _close(engine, callback) {
  if (callback) {
    process.nextTick(callback);
  }

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) {
    return;
  }

  engine._handle.close();
  engine._handle = null;
}

Inflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {
  if (typeof asyncCb === 'function') {
    return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
  }

  var self = this;

  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var leftToInflate = this._maxLength;
  var inOff = 0;

  var buffers = [];
  var nread = 0;

  var error;
  this.on('error', function(err) {
    error = err;
  });

  function handleChunk(availInAfter, availOutAfter) {
    if (self._hadError) {
      return;
    }

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;

      if (out.length > leftToInflate) {
        out = out.slice(0, leftToInflate);
      }

      buffers.push(out);
      nread += out.length;
      leftToInflate -= out.length;

      if (leftToInflate === 0) {
        return false;
      }
    }

    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      return true;
    }

    return false;
  }

  assert(this._handle, 'zlib binding closed');
  do {
    var res = this._handle.writeSync(flushFlag,
      chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    // Node 8 --> 9 compatibility check
    res = res || this._writeState;
  } while (!this._hadError && handleChunk(res[0], res[1]));

  if (this._hadError) {
    throw error;
  }

  if (nread >= kMaxLength) {
    _close(this);
    throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + kMaxLength.toString(16) + ' bytes');
  }

  var buf = Buffer.concat(buffers, nread);
  _close(this);

  return buf;
};

util.inherits(Inflate, zlib.Inflate);

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer);
  }
  if (!(buffer instanceof Buffer)) {
    throw new TypeError('Not a string or buffer');
  }

  var flushFlag = engine._finishFlushFlag;
  if (flushFlag == null) {
    flushFlag = zlib.Z_FINISH;
  }

  return engine._processChunk(buffer, flushFlag);
}

function inflateSync(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
}

module.exports = exports = inflateSync;
exports.Inflate = Inflate;
exports.createInflate = createInflate;
exports.inflateSync = inflateSync;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(1).Buffer))

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var SyncReader = __webpack_require__(61);
var Filter = __webpack_require__(53);


exports.process = function(inBuffer, bitmapInfo) {

  var outBuffers = [];
  var reader = new SyncReader(inBuffer);
  var filter = new Filter(bitmapInfo, {
    read: reader.read.bind(reader),
    write: function(bufferPart) {
      outBuffers.push(bufferPart);
    },
    complete: function() {
    }
  });

  filter.start();
  reader.process();

  return Buffer.concat(outBuffers);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var hasSyncZlib = true;
var zlib = __webpack_require__(12);
if (!zlib.deflateSync) {
  hasSyncZlib = false;
}
var constants = __webpack_require__(13);
var Packer = __webpack_require__(60);

module.exports = function(metaData, opt) {

  if (!hasSyncZlib) {
    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
  }

  var options = opt || {};

  var packer = new Packer(options);

  var chunks = [];

  // Signature
  chunks.push(new Buffer(constants.PNG_SIGNATURE));

  // Header
  chunks.push(packer.packIHDR(metaData.width, metaData.height));

  if (metaData.gamma) {
    chunks.push(packer.packGAMA(metaData.gamma));
  }

  var filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);

  // compress it
  var compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());
  filteredData = null;

  if (!compressedData || !compressedData.length) {
    throw new Error('bad png - invalid compressed data response');
  }
  chunks.push(packer.packIDAT(compressedData));

  // End
  chunks.push(packer.packIEND());

  return Buffer.concat(chunks);
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _GoPoint {
    constructor(_x, _y) {
        this._x = _x;
        this._y = _y;
    }
}
exports._GoPoint = _GoPoint;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GoRect_1 = __webpack_require__(18);
class _GoImage {
    constructor(_pixels, width, height, stride) {
        this._pixels = _pixels;
        this._rect = new GoRect_1._GoRect(0, 0, width, height);
        this._stride = 4 * width;
        if (stride != undefined) {
            this._stride = stride;
        }
    }
    _bounds() {
        return this._rect;
    }
    _subImage(rect) {
        const i = this._pixOffset(rect._min._x, rect._min._y);
        const pix = this._pixels.slice(i);
        const img = new _GoImage(pix, 0, 0);
        img._rect = rect;
        img._stride = this._stride;
        return img;
    }
    _pixOffset(x, y) {
        return (y - this._rect._min._y) * this._stride + (x - this._rect._min._x) * 4;
    }
}
exports._GoImage = _GoImage;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Deque_1 = __webpack_require__(20);
class _TextureAllocator {
    constructor() {
        this._squaresBySize = new Map();
        this._maxSize = 1;
    }
    static _isPowerOf2(value) {
        return (value & (value - 1)) === 0;
    }
    _getSizeDeque(size) {
        if (!_TextureAllocator._isPowerOf2(size)) {
            throw new RangeError("size is not power of 2 (NPOT)");
        }
        let q = this._squaresBySize.get(size);
        if (!q) {
            q = new Deque_1._Deque();
            this._squaresBySize.set(size, q);
        }
        return q;
    }
    _provide(klockiTexture) {
        const dx = klockiTexture._subRect._dx();
        const dy = klockiTexture._subRect._dy();
        if (dx !== dy) {
            throw new RangeError("tried to provide not a square texture");
        }
        const q = this._getSizeDeque(dx);
        q._enqueue(klockiTexture);
        if (dx > this._maxSize) {
            this._maxSize = dx;
        }
    }
    _allocate(size) {
        if (size > this._maxSize) {
            throw new Error("texture size " + size + " too big > " + this._maxSize);
        }
        const q = this._getSizeDeque(size);
        if (q._size() === 0) {
            const uberTexture = this._allocate(size * 2);
            const children = uberTexture.split();
            children.forEach((element) => {
                q._enqueue(element);
            });
        }
        const texture = q._dequeue();
        if (!texture) {
            throw new Error("ran out of free texture space");
        }
        return texture;
    }
}
exports._TextureAllocator = _TextureAllocator;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _TextureInfo {
    constructor(manager, glTexture, url, klockiTexture) {
        this._texOffsetX = 0;
        this._texOffsetY = 0;
        this._texScaleX = 1;
        this._texScaleY = 1;
        this._manager = manager;
        this._glTexture = glTexture;
        this._url = url;
        this._tex = klockiTexture;
        this._allocatedTex = klockiTexture;
        this._promise = null;
        this._updateRenderInfo();
    }
    _updateRenderInfo() {
        const r = this._tex._subRect;
        this._texOffsetX = r._min._x / this._manager._atlasSize;
        this._texOffsetY = r._min._y / this._manager._atlasSize;
        this._texScaleX = r._dx() / this._manager._atlasSize;
        this._texScaleY = r._dy() / this._manager._atlasSize;
    }
}
exports._TextureInfo = _TextureInfo;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const GoRect_1 = __webpack_require__(18);
class _KlockiTexture {
    constructor(goImage, atlasId, subRect) {
        this._img = goImage;
        this._atlasId = atlasId;
        this._subRect = subRect;
        this._children = null;
    }
    split() {
        this._children = Array(4);
        const r = this._subRect;
        const cx = (r._min._x + r._max._x) * 0.5;
        const cy = (r._min._y + r._max._y) * 0.5;
        this._children[0] = new _KlockiTexture(null, this._atlasId, new GoRect_1._GoRect(r._min._x, r._min._y, cx, cy));
        this._children[1] = new _KlockiTexture(null, this._atlasId, new GoRect_1._GoRect(cx, r._min._y, r._max._x, cy));
        this._children[2] = new _KlockiTexture(null, this._atlasId, new GoRect_1._GoRect(r._min._x, cy, cx, r._max._y));
        this._children[3] = new _KlockiTexture(null, this._atlasId, new GoRect_1._GoRect(cx, cy, r._max._x, r._max._y));
        return this._children;
    }
    _zoomCenter() {
        const r = this._subRect;
        const minx = r._min._x + r._dx() * 0.25;
        const miny = r._min._y + r._dy() * 0.25;
        const maxx = r._min._x + r._dx() * 0.75;
        const maxy = r._min._y + r._dy() * 0.75;
        return new _KlockiTexture(null, this._atlasId, new GoRect_1._GoRect(minx, miny, maxx, maxy));
    }
    _subTex(x, y, dx, dy) {
        const r = this._subRect;
        const minx = r._min._x + r._dx() * x;
        const miny = r._min._y + r._dy() * y;
        const maxx = r._min._x + r._dx() * (x + dx);
        const maxy = r._min._y + r._dy() * (y + dy);
        const tex = new _KlockiTexture(null, this._atlasId, new GoRect_1._GoRect(minx, miny, maxx, maxy));
        return tex;
    }
    _stdBox(x, y, dx, dy, dz) {
        const tex = this;
        return [
            tex._subTex(x, y - dz, dx, dz),
            tex._subTex(x + dx, y - dz, dx, dz),
            tex._subTex(x, y, dx, dy),
            tex._subTex(x + dx + dz, y, dx, dy),
            tex._subTex(x + dx, y, dz, dy),
            tex._subTex(x - dz, y, dz, dy)
        ];
    }
    _stdBox64(x, y, dx, dy, dz) {
        return this._stdBox(x / 64, y / 64, dx / 64, dy / 64, dz / 64);
    }
}
exports._KlockiTexture = _KlockiTexture;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Klocki_1 = __webpack_require__(2);
const GoRect_1 = __webpack_require__(18);
let charSize = 0;
let chari = 0, charj = 0;
let charWidth = 0, charHeight = 0;
let charOffsety = 0;
let atlasId = 0;
let charSkew = 0;
const charScaleX = 1 / (128);
const charScaleY = 1 / (128);
let color = 0;
class _FontRenderer {
    constructor(klocki) {
        this._texScale = 0;
        this._randomStyle = false;
        this._boldStyle = false;
        this._strikethroughStyle = false;
        this._underlineStyle = false;
        this._italicStyle = false;
        this._cachedColor = 0;
        this._alpha = 0;
        this._red = 1;
        this._blue = 1;
        this._green = 1;
        this._klocki = klocki;
        this._uiRenderer = klocki._uiRenderer;
        this._guiScale = 2;
        this._scaleFactor = 1;
        this._unicodeFlag = false;
        this._atlas = 0;
        this._posX = 0;
        this._posY = 0;
        this._texOffsetX = 0;
        this._texOffsetY = 0;
        this._fontTexture = this._klocki._textureManager._loadTextureFromURL("assets/" + Klocki_1._Klocki._forbiddenWord + "/textures/font/ascii.png", (img) => this._readFontTexture(img), null, false);
        this._charWidth = new Uint8Array(1024);
        this._colorCode = new Uint32Array(32);
        this._makeCharIdMap();
        this._makeColorCode();
        this._reset();
    }
    _reset() {
        this._posX = 1;
        this._posY = 1;
        this._randomStyle = false;
        this._boldStyle = false;
        this._strikethroughStyle = false;
        this._underlineStyle = false;
        this._italicStyle = false;
        this._cachedColor = 0xFFFFFFFF;
        this._alpha = 1;
        this._texOffsetX = this._fontTexture._tex._subRect._min._x / this._klocki._textureManager._atlasSize;
        this._texOffsetY = this._fontTexture._tex._subRect._min._y / this._klocki._textureManager._atlasSize;
        this._texScale = this._fontTexture._tex._subRect._dx() / this._klocki._textureManager._atlasSize;
    }
    _makeColorCode() {
        for (let i = 0; i < 32; ++i) {
            const j = (i >> 3 & 1) * 85;
            let k = (i >> 2 & 1) * 170 + j;
            let l = (i >> 1 & 1) * 170 + j;
            let i1 = (i >> 0 & 1) * 170 + j;
            if (i === 6) {
                k += 85;
            }
            if (i >= 16) {
                k /= 4;
                l /= 4;
                i1 /= 4;
            }
            this._colorCode[i] = (k & 255) << 16 | (l & 255) << 8 | i1 & 255;
        }
    }
    _makeCharIdMap() {
        let charIdOrder = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000";
        charIdOrder += "\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf";
        charIdOrder += "\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d9\u00da\u00db\u00dc\u00dd\u00e0\u00e1\u00e2\u00e3";
        charIdOrder += "\u00e4\u00e5\u00e6\u00e7\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa";
        charIdOrder += "\u00fb\u00fc\u00fd\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b";
        charIdOrder += "\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b";
        charIdOrder += "\u011c\u011d\u1e20\u1e21\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129";
        charIdOrder += "\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0134\u0135\u0136\u0137\u0139\u013a\u013b\u013c";
        charIdOrder += "\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u014a\u014b\u014c\u014d";
        charIdOrder += "\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d";
        charIdOrder += "\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d";
        charIdOrder += "\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d";
        charIdOrder += "\u017e\u01fc\u01fd\u01fe\u01ff\u0218\u0219\u021a\u021b\u0386\u0388\u0389\u038a\u038c\u038e\u038f";
        charIdOrder += "\u0390\u03aa\u03ab\u03ac\u03ad\u03ae\u03af\u03b0\u03ca\u03cb\u03cc\u03cd\u03ce\u0400\u0401\u0403";
        charIdOrder += "\u0407\u040c\u040d\u040e\u0419\u0439\u0450\u0451\u0452\u0453\u0457\u045b\u045c\u045d\u045e\u045f";
        charIdOrder += "\u0490\u0491\u1e02\u1e03\u1e0a\u1e0b\u1e1e\u1e1f\u1e22\u1e23\u1e30\u1e31\u1e40\u1e41\u1e56\u1e57";
        charIdOrder += "\u1e60\u1e61\u1e6a\u1e6b\u1e80\u1e81\u1e82\u1e83\u1e84\u1e85\u1ef2\u1ef3\u00e8\u00e9\u00ea\u00eb";
        this._charIdMap = new Int16Array(65536);
        this._charIdMap.fill(-1);
        for (let i = charIdOrder.length - 1; i > 0; i--) {
            this._charIdMap[charIdOrder.charCodeAt(i)] = i;
        }
        return this._charIdMap;
    }
    _getCharId(c) {
        return this._charIdMap[c];
    }
    _addChar(c, italic) {
        if (c === 32) {
            return 4;
        }
        else {
            const charId = this._getCharId(c);
            return charId != -1 && !this._unicodeFlag ? this._addDefaultChar(charId, italic) : 4;
        }
    }
    _addDefaultChar(charId, italic) {
        charSize = 0;
        chari = 0;
        charj = 0;
        charWidth = 0;
        charHeight = 0;
        charOffsety = 0;
        atlasId = charId >> 8;
        if (atlasId === 0) {
            charSize = this._charWidth[charId];
            chari = (charId & 0x0F) * 8;
            charj = (charId >> 4) * 8;
            charWidth = 8 - 0.05;
            charHeight = 8 - 0.05;
        }
        else {
            charSize = 8;
            chari = 128 + ((charId & 0x0F) * 9);
            charj = ((charId & 0xFF) >> 4) * 12;
            charWidth = 9 - 0.05;
            charHeight = 12 - 0.05;
            charOffsety = -3;
        }
        charSkew = italic ? 1 : 0;
        color = this._cachedColor;
        this._pos(+charSkew, charOffsety, 0)._tex(chari * charScaleX, charj * charScaleY)._color(color)._endVertex();
        this._pos(-charSkew, charHeight + charOffsety, 0)._tex(chari * charScaleX, (charj + charHeight) * charScaleY)._color(color)._endVertex();
        this._pos(+charWidth - 1 + charSkew, charOffsety, 0)._tex((chari + charWidth - 1) * charScaleX, charj * charScaleY)._color(color)._endVertex();
        this._pos(+charWidth - 1 - charSkew, charHeight + charOffsety, 0)._tex((chari + charWidth - 1) * charScaleX, (charj + charHeight) * charScaleY)._color(color)._endVertex();
        return charSize;
    }
    _pos(x, y, z) {
        this._uiRenderer._pos((this._posX + x) * 2 * this._guiScale, (this._posY + y) * 2 * this._guiScale, z);
        return this;
    }
    _tex(x, y) {
        this._uiRenderer._tex(this._texOffsetX + x * this._texScale, this._texOffsetY + y * this._texScale);
        return this;
    }
    _color(color) {
        this._uiRenderer._color(color);
        return this;
    }
    _endVertex() {
        this._uiRenderer._endVertex();
    }
    _setColor(r, g, b, a) {
        this._cachedColor = (a << 24) | (b << 16) | (g << 8) | r;
    }
    _renderStringAtPos(str, dropShadow) {
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c === 167 && i + 1 < str.length) {
                const col = str.charAt(i + 1).toLowerCase().charCodeAt(0);
                const num = col >= 48 && col <= 57;
                const af = col >= 97 && col <= 102;
                if (num || af) {
                    let i1 = col;
                    if (num) {
                        i1 -= 48;
                    }
                    if (af) {
                        i1 -= 97 - 10;
                    }
                    this._randomStyle = false;
                    this._boldStyle = false;
                    this._strikethroughStyle = false;
                    this._underlineStyle = false;
                    this._italicStyle = false;
                    if (i1 < 0 || i1 > 15) {
                        i1 = 15;
                    }
                    if (dropShadow) {
                        i1 += 16;
                    }
                    const j1 = this._colorCode[i1];
                    this._setColor(j1 >> 16, j1 >> 8 & 255, j1 & 255, (this._alpha * 255) & 255);
                }
                else if (col === 107) {
                    this._randomStyle = true;
                }
                else if (col === 108) {
                    this._boldStyle = true;
                }
                else if (col === 109) {
                    this._strikethroughStyle = true;
                }
                else if (col === 110) {
                    this._underlineStyle = true;
                }
                else if (col === 111) {
                    this._italicStyle = true;
                }
                else if (col === 114) {
                    this._randomStyle = false;
                    this._boldStyle = false;
                    this._strikethroughStyle = false;
                    this._underlineStyle = false;
                    this._italicStyle = false;
                    this._setColor(this._red * 255, this._blue * 255, this._green * 255, this._alpha * 255);
                }
                ++i;
            }
            else {
                const charId = this._getCharId(c);
                if (this._randomStyle && charId != -1) {
                }
                const f1 = this._unicodeFlag ? 0.5 : 1 / this._scaleFactor;
                const flag = (c === 0 || charId === -1 || this._unicodeFlag) && dropShadow;
                if (flag) {
                    this._posX -= f1;
                    this._posY -= f1;
                }
                let f = this._addChar(c, this._italicStyle);
                if (flag) {
                    this._posX += f1;
                    this._posY += f1;
                }
                if (this._boldStyle) {
                    this._posX += f1;
                    if (flag) {
                        this._posX -= f1;
                        this._posY -= f1;
                    }
                    this._addChar(c, this._italicStyle);
                    this._posX -= f1;
                    if (flag) {
                        this._posX += f1;
                        this._posY += f1;
                    }
                    f += f1;
                }
                this._posX += f;
            }
        }
    }
    _renderString(text, x, y, color, dropShadow) {
        if (!text || text.length === 0) {
            return 0;
        }
        else {
            if ((color & -67108864) === 0) {
                color |= -16777216;
            }
            if (dropShadow) {
                color = (color & 16579836) >> 2 | color & -16777216;
            }
            this._red = (color >> 16 & 255) / 255;
            this._blue = (color >> 8 & 255) / 255;
            this._green = (color & 255) / 255;
            this._alpha = (color >> 24 & 255) / 255;
            this._cachedColor = color;
            this._posX = x;
            this._posY = y;
            this._scaleFactor = 1;
            this._renderStringAtPos(text, dropShadow);
            return Math.floor(this._posX);
        }
    }
    _drawString(text, x, y, color, dropShadow) {
        let len;
        if (dropShadow) {
            len = this._renderString(text, x + 1, y + 1, color, true);
            len = Math.max(len, this._renderString(text, x, y, color, false));
        }
        else {
            len = this._renderString(text, x, y, color, false);
        }
        return len;
    }
    _readFontTexture(img) {
        this._readDefaultFontTexture(img._subImage(new GoRect_1._GoRect(0, 0, img._rect._dx(), img._rect._dy())), 16, 16);
    }
    _readDefaultFontTexture(img, gw, gh) {
        const sw = img._rect._dx() / gw;
        const sh = img._rect._dy() / gh;
        for (let i = 0; i <= 255; i++) {
            const cx = (i & 0xF) * sw;
            const cy = (i >> 4) * sh;
            this._readGlyph(i, img._subImage(new GoRect_1._GoRect(cx, cy, cx + sw, cy + sh)));
        }
    }
    _readGlyph(charId, img) {
        let startx = 0;
        let endx = 0;
        let start = true;
        xloop: for (let x = img._rect._min._x; x < img._rect._max._x; x++) {
            for (let y = img._rect._min._y; y < img._rect._max._y; y++) {
                const offset = img._pixOffset(x, y);
                const a = img._pixels[offset + 3];
                if (start && a != 0) {
                    startx = x;
                    start = false;
                    continue xloop;
                }
                else if (!start && a != 0) {
                    continue xloop;
                }
            }
            if (!start) {
                endx = x;
                break;
            }
        }
        this._charWidth[charId] = endx - startx + 1;
    }
}
exports._FontRenderer = _FontRenderer;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Shader_1 = __webpack_require__(19);
class _ShaderUI extends Shader_1._Shader {
    constructor(klocki) {
        super();
        const vsSource = `#version 300 es
  in vec4 aVertexPosition;
  in vec2 aTextureCoord;
  in float aTextureAtlas;
  in vec4 aColor;

  uniform mat4 uUiMatrix;

  out lowp vec4 vertexColor;
  out highp vec3 vTextureCoord;

  void main(void) {
    gl_Position = uUiMatrix * aVertexPosition;
    vertexColor = aColor;
    vTextureCoord = vec3(aTextureCoord, aTextureAtlas);
  }
`;
        const fsSource = `#version 300 es
precision mediump float;

  in highp vec3 vTextureCoord;
  in lowp vec4 vertexColor;

  uniform mediump sampler2DArray uSampler;

  out vec4 fragColor;
  void main(void) {
    fragColor = texture(uSampler, vTextureCoord) * vertexColor;
    if(fragColor.a < 0.1){
      discard;
    }
  }
`;
        const gl = klocki._display._gl;
        const program = this._initShaderProgram(gl, vsSource, fsSource);
        this._program = program;
        this._attribLocations = {
            _vertexPosition: gl.getAttribLocation(program, 'aVertexPosition'),
            _textureCoord: gl.getAttribLocation(program, 'aTextureCoord'),
            _textureAtlas: gl.getAttribLocation(program, 'aTextureAtlas'),
            _color: gl.getAttribLocation(program, 'aColor'),
        };
        this._uniformLocations = {
            _uiMatrix: gl.getUniformLocation(program, 'uUiMatrix'),
            _uSampler: gl.getUniformLocation(program, 'uSampler'),
        };
    }
}
exports._ShaderUI = _ShaderUI;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _Display {
    constructor() {
        this._width = 0;
        this._height = 0;
        this._guiWidth = 0;
        this._guiHeight = 0;
        this._guiScale = 2;
        const canvas = document.getElementById('klockicanvas');
        if (!canvas) {
            throw new Error('#klockicanvas not found');
        }
        if (!(canvas instanceof HTMLCanvasElement)) {
            throw new Error('#klockicanvas is not a canvas');
        }
        const attributes = { antialias: false, translucent: false };
        const webgl = canvas.getContext('webgl2', attributes) || canvas.getContext('experimental-webgl2', attributes);
        if (!(webgl instanceof WebGL2RenderingContext)) {
            alert('WebGL2 is not supported in your browser');
            throw new Error('WebGL2 not supported');
        }
        this._gl = webgl;
        this._canvas = canvas;
        this._resize();
        window.addEventListener("resize", (ev) => this._resize());
        this._generateIndices();
    }
    _resize() {
        this._width = window.innerWidth;
        this._height = window.innerHeight;
        this._guiWidth = this._width / this._guiScale;
        this._guiHeight = this._height / this._guiScale;
        this._canvas.style.width = `${this._width}px`;
        this._canvas.style.height = `${this._height}px`;
        this._canvas.width = this._width;
        this._canvas.height = this._height;
        this._gl.viewport(0, 0, this._width, this._height);
    }
    _generateIndices() {
        const gl = this._gl;
        const indexBuffer = gl.createBuffer();
        this._indexBuffer = indexBuffer;
        const numQuads = 1024 * 1024;
        const indices = new Uint32Array(6 * numQuads);
        let j, k;
        for (let i = 0; i < numQuads; i++) {
            j = i * 6;
            k = i * 4;
            indices[j + 0] = k + 0;
            indices[j + 1] = k + 1;
            indices[j + 2] = k + 2;
            indices[j + 3] = k + 3;
            indices[j + 4] = k + 2;
            indices[j + 5] = k + 1;
        }
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
    }
}
exports._Display = _Display;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _GameSettings {
    constructor() {
        this.mouseSensitivity = 0.5;
        this.invertMouse = false;
        this.renderDistanceChunks = 8;
        this.viewBobbing = true;
        this.anaglyph = false;
        this.fboEnable = true;
    }
    _loadOptions() {
        const settings = localStorage.getItem("game-settings");
        if (settings) {
            Object.assign(this, settings);
        }
        else {
            console.log("Settings not found");
        }
    }
    _saveOptions() {
        localStorage.setItem("game-settings", JSON.stringify(this));
    }
}
exports._GameSettings = _GameSettings;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Shader_1 = __webpack_require__(19);
class _ShaderWorld extends Shader_1._Shader {
    constructor(klocki) {
        super();
        this._offsetx = 0.1337;
        this._offsety = 0.1337;
        this._offsetz = 0.1337;
        this._klocki = klocki;
        this._zero = new Float32Array(4);
        const vsSource = `#version 300 es
    //precision lowp float;

    in vec4 aVertexPosition;
    in vec2 aTextureCoord;
    in int aTextureAtlas;
    in vec4 aColor;
    
  
    uniform mat4 uProjectionMatrix;
    uniform vec4 uOffset;
    uniform float screenSize;
  
    out lowp vec4 vertexColor;
    out lowp vec3 vTextureCoord;
  
    void main(void) {
      vec4 pos = aVertexPosition;
      //pos.xyz *= 0.015625;
      //pos.xyz *= (1.0/64.0);
      vec4 screenPos = uProjectionMatrix * (pos+uOffset);
      gl_Position = screenPos;
      vertexColor = aColor;
      vTextureCoord = vec3(aTextureCoord, aTextureAtlas);

      //gl_PointSize = screenSize/screenPos.z;
    }
  `;
        const fsSource = `#version 300 es
  precision lowp float;
  
    in lowp vec3 vTextureCoord;
    in lowp vec4 vertexColor;
  
    uniform lowp sampler2DArray uSampler;
  
    out vec4 fragColor;





    void main(void) {
      //fragColor = texture(uSampler, vTextureCoord+vec3(gl_PointCoord*0.015625, 0)) * vertexColor;
      fragColor = texture(uSampler, vTextureCoord) * vertexColor;

      if(fragColor.a < 0.1){
        discard;
      }
    }
  `;
        const gl = klocki._display._gl;
        this._gl = gl;
        const program = this._initShaderProgram(gl, vsSource, fsSource);
        this._program = program;
        this._attribLocations = {
            _vertexPosition: gl.getAttribLocation(program, 'aVertexPosition'),
            _textureCoord: gl.getAttribLocation(program, 'aTextureCoord'),
            _textureAtlas: gl.getAttribLocation(program, 'aTextureAtlas'),
            _color: gl.getAttribLocation(program, 'aColor'),
        };
        this._uniformLocations = {
            _projectionMatrix: gl.getUniformLocation(program, 'uProjectionMatrix'),
            _offset: gl.getUniformLocation(program, 'uOffset'),
            _uSampler: gl.getUniformLocation(program, 'uSampler'),
            _screenSize: gl.getUniformLocation(program, 'screenSize'),
        };
    }
    _updateOffset(off) {
        if (off[0] != this._offsetx || off[1] != this._offsety || off[2] != this._offsetz) {
            this._gl.uniform4fv(this._uniformLocations._offset, off);
        }
    }
    _setScreenSize(size) {
        this._gl.uniform1f(this._uniformLocations._screenSize, size);
    }
    _zeroOffset() {
        this._updateOffset(this._zero);
    }
}
exports._ShaderWorld = _ShaderWorld;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Deque_1 = __webpack_require__(20);
const Gui_1 = __webpack_require__(62);
const ChatLine_1 = __webpack_require__(180);
class _GuiChat extends Gui_1._Gui {
    constructor(klocki) {
        super(klocki);
        this._visibleMessages = new Deque_1._Deque();
        this._animationOffset = 0;
        this._lastAnimationOffset = 0;
        this._animationOffsetSpeed = 0;
    }
    _render() {
        const fr = this._klocki._fontRenderer;
        const size = this._visibleMessages._size();
        const offset = this._getAnimationOffset(this._klocki._getPartialTicks());
        let rsize = size;
        if (rsize > 5) {
            rsize = 5;
        }
        for (let linei = 0; linei < rsize; linei++) {
            const dequeIndex = linei;
            const line = this._visibleMessages._peek(dequeIndex);
            if (line) {
                fr._drawString(line._formattedText, 2, -offset + this._klocki._display._guiHeight - 18 - linei * 9, 0xFFFFFFFF, true);
            }
        }
    }
    _appendMessage(chatComponent) {
        this._visibleMessages._enqueue(new ChatLine_1._ChatLine(chatComponent));
        this._animationOffset -= 9;
        this._lastAnimationOffset -= 9;
    }
    _tick() {
        const animationGoto = 0;
        this._lastAnimationOffset = this._animationOffset;
        this._animationOffsetSpeed *= 0.33;
        this._animationOffsetSpeed += (animationGoto - this._animationOffset) * 0.3;
        this._animationOffset += this._animationOffsetSpeed;
    }
    _getAnimationOffset(renderPartial) {
        return this._lastAnimationOffset + (this._animationOffset - this._lastAnimationOffset) * renderPartial;
    }
}
exports._GuiChat = _GuiChat;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ChatUtils_1 = __webpack_require__(36);
class _ChatLine {
    constructor(jsonChat) {
        this._jsonChat = jsonChat;
        this._formattedText = ChatUtils_1._ChatUtils._toLegacyTextFromChat(jsonChat);
    }
}
exports._ChatLine = _ChatLine;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ShaderMobs_1 = __webpack_require__(63);
class _WorldRenderer {
    constructor(klocki, size, useShort, useMatID) {
        this._count = 0;
        this._posX = 0;
        this._posY = 0;
        this._posZ = 0;
        this._klocki = klocki;
        this._buf = new ArrayBuffer(size);
        this._u8 = new Uint8Array(this._buf);
        this._u16 = new Uint16Array(this._buf);
        this._u32 = new Uint32Array(this._buf);
        this._f32 = new Float32Array(this._buf);
        this._bufIndex = 0;
        this._useShort = useShort;
        this._useMatID = useMatID;
        this._first = true;
        this._atlas = 0;
        this._stride = (this._useShort ? 16 : 28) + (this._useMatID ? 4 : 0);
        this._stride2 = this._stride >> 1;
        this._stride4 = this._stride >> 2;
        this._reset();
    }
    _reset() {
        this._count = 0;
        this._bufIndex = 0;
        this._posX = 0;
        this._posY = 0;
        this._posZ = 0;
    }
    _pos(x, y, z) {
        if (this._useShort) {
            const b = this._u16;
            const i = this._count * this._stride2;
            b[i + 2] = Math.round(z * 64);
            b[i + 1] = Math.round(y * 64);
            b[i] = Math.round(x * 64);
        }
        else {
            const b = this._f32;
            const i = this._count * this._stride4;
            b[i + 2] = z;
            b[i + 1] = y;
            b[i] = x;
        }
        return this;
    }
    _tex(tx, ty) {
        if (this._useShort) {
            const b = this._u16;
            const i = this._count * this._stride2 + 3;
            b[i + 2] = this._atlas;
            b[i + 1] = Math.floor(ty * 32768);
            b[i] = Math.floor(tx * 32768);
        }
        else {
            const b = this._f32;
            const i = this._count * this._stride4 + 3;
            this._u32[i + 2] = this._atlas;
            b[i + 1] = ty;
            b[i] = tx;
        }
        return this;
    }
    _color(color) {
        if (this._useShort) {
            const b = this._u32;
            const i = this._count * this._stride4 + 3;
            b[i] = color;
        }
        else {
            const b = this._u32;
            const i = this._count * this._stride4 + 6;
            b[i] = color;
        }
        return this;
    }
    _mat(matID) {
        if (this._useShort) {
        }
        else {
            const b = this._u32;
            const i = this._count * this._stride4 + 7;
            b[i] = matID;
        }
        return this;
    }
    _matMany(matID, num) {
        const b = this._u32;
        const stride4 = this._stride4;
        let i = this._count * stride4 + 7;
        let end = i + stride4 * num;
        for (; i < end; i += stride4) {
            b[i] = matID;
        }
        this._count += num;
    }
    _endVertex() {
        this._count++;
    }
    _setupPointersPosition(shaderWorld) {
        const stride = this._stride;
        const gl = this._klocki._display._gl;
        {
            if (this._useShort) {
                const numComponents = 3;
                const type = gl.SHORT;
                const normalize = false;
                const offset = 0;
                gl.vertexAttribPointer(shaderWorld._attribLocations._vertexPosition, numComponents, type, normalize, stride, offset);
            }
            else {
                const numComponents = 3;
                const type = gl.FLOAT;
                const normalize = false;
                const offset = 0;
                gl.vertexAttribPointer(shaderWorld._attribLocations._vertexPosition, numComponents, type, normalize, stride, offset);
            }
            if (this._first) {
                gl.enableVertexAttribArray(shaderWorld._attribLocations._vertexPosition);
            }
        }
    }
    _setupPointersTextureCoord(shaderWorld) {
        const stride = this._stride;
        const gl = this._klocki._display._gl;
        {
            if (this._useShort) {
                const numComponents = 2;
                const type = gl.SHORT;
                const normalize = true;
                const offset = 6;
                gl.vertexAttribPointer(shaderWorld._attribLocations._textureCoord, numComponents, type, normalize, stride, offset);
            }
            else {
                const numComponents = 2;
                const type = gl.FLOAT;
                const normalize = false;
                const offset = 12;
                gl.vertexAttribPointer(shaderWorld._attribLocations._textureCoord, numComponents, type, normalize, stride, offset);
            }
            if (this._first) {
                gl.enableVertexAttribArray(shaderWorld._attribLocations._textureCoord);
            }
        }
    }
    _setupPointersTextureAtlas(shaderWorld) {
        const stride = this._stride;
        const gl = this._klocki._display._gl;
        {
            if (this._useShort) {
                const numComponents = 1;
                const type = gl.SHORT;
                const offset = 10;
                gl.vertexAttribIPointer(shaderWorld._attribLocations._textureAtlas, numComponents, type, stride, offset);
            }
            else {
                const numComponents = 1;
                const type = gl.INT;
                const offset = 20;
                gl.vertexAttribIPointer(shaderWorld._attribLocations._textureAtlas, numComponents, type, stride, offset);
            }
            if (this._first) {
                gl.enableVertexAttribArray(shaderWorld._attribLocations._textureAtlas);
            }
        }
    }
    _setupPointersColor(shaderWorld) {
        const stride = this._stride;
        const gl = this._klocki._display._gl;
        {
            if (this._useShort) {
                const numComponents = 4;
                const type = gl.UNSIGNED_BYTE;
                const normalize = true;
                const offset = 12;
                gl.vertexAttribPointer(shaderWorld._attribLocations._color, numComponents, type, normalize, stride, offset);
            }
            else {
                const numComponents = 4;
                const type = gl.UNSIGNED_BYTE;
                const normalize = true;
                const offset = 24;
                gl.vertexAttribPointer(shaderWorld._attribLocations._color, numComponents, type, normalize, stride, offset);
            }
            if (this._first) {
                gl.enableVertexAttribArray(shaderWorld._attribLocations._color);
            }
        }
    }
    _setupPointersMatrixID(shaderWorld) {
        const stride = this._stride;
        const gl = this._klocki._display._gl;
        {
            if (this._useMatID) {
                if (this._useShort) {
                }
                else {
                    const numComponents = 1;
                    const type = gl.INT;
                    const offset = 28;
                    gl.vertexAttribIPointer(shaderWorld._attribLocations._groupMatrixID, numComponents, type, stride, offset);
                }
                if (this._first) {
                    gl.enableVertexAttribArray(shaderWorld._attribLocations._groupMatrixID);
                }
            }
        }
    }
    _setupPointers(shaderWorld) {
        this._setupPointersPosition(shaderWorld);
        this._setupPointersTextureCoord(shaderWorld);
        this._setupPointersTextureAtlas(shaderWorld);
        this._setupPointersColor(shaderWorld);
        if (shaderWorld instanceof ShaderMobs_1._ShaderMobs) {
            this._setupPointersMatrixID(shaderWorld);
        }
        this._first = false;
    }
    _upload(shaderWorld, setSize) {
        const gl = this._klocki._display._gl;
        if (this._count > 0) {
            const len = this._count * this._stride;
            if (setSize) {
                gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(this._buf, 0, len), gl.DYNAMIC_DRAW);
            }
            else {
                gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Uint8Array(this._buf, 0, len), 0, len);
            }
        }
        return this._count;
    }
    _copyBuf() {
        return this._buf.slice(0, this._count * this._stride);
    }
    _putPrepared(prepared) {
        this._u8.set(prepared, this._count * this._stride);
    }
    _endAndUpload(shaderWorld, glBuffer) {
        this._endAndUploadSetSize(shaderWorld, glBuffer, false);
    }
    _endAndUploadSetSize(shaderWorld, glBuffer, setSize) {
        const gl = this._klocki._display._gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);
        const count = this._upload(shaderWorld, setSize);
        this._setupPointers(shaderWorld);
        if (count > 0) {
            if (true) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._klocki._display._indexBuffer);
                gl.drawElements(gl.TRIANGLES, count * (6 / 4), gl.UNSIGNED_INT, 0);
            }
            else {}
        }
    }
}
exports._WorldRenderer = _WorldRenderer;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __webpack_require__(4);
class _SimpleTouch {
    constructor(id, pageX, pageY) {
        this._identifier = id;
        this._pageX = pageX;
        this._pageY = pageY;
        this._isMovement = false;
        this._timeStart = -1;
    }
}
class _Controls {
    constructor(klocki) {
        this._lastOrientA = 1337;
        this._lastOrientB = 1337;
        this._lastOrientG = 1337;
        this._klocki = klocki;
        this._pressed = new Map();
        this._mouseLocked = false;
        this._mouseMoves = 0;
        this._ongoingTouches = new Array();
        let check = false;
        (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
            check = true;
        } })(navigator.userAgent || navigator.vendor || window.opera);
        this._isMobile = check;
        document.addEventListener("keydown", (e) => this._keydown(e));
        document.addEventListener("keyup", (e) => this._keyup(e));
        document.addEventListener('pointerlockchange', (e) => this._onLockChange(e), false);
        document.addEventListener('mozpointerlockchange', (e) => this._onLockChange(e), false);
        const canvas = this._klocki._display._canvas;
        canvas.addEventListener("click", () => {
            if (!this._mouseLocked) {
                this._requestLock();
            }
        });
        this._addTouchHandlers();
        canvas.addEventListener("mousemove", (e) => {
            if (this._mouseLocked) {
                const locked = true;
                if (locked) {
                    const klocki = this._klocki;
                    const world = klocki._theWorld;
                    if (world !== null) {
                        const thePlayer = world._thePlayer;
                        if (klocki._smoothCam || klocki._zoomed) {
                            klocki._yawSmoothSpeed += e.movementX / 400;
                            klocki._pitchSmoothSpeed += e.movementY / 400;
                        }
                        else {
                            thePlayer._yaw += e.movementX / 400;
                            thePlayer._pitch += e.movementY / 400;
                        }
                        thePlayer._fixPitch();
                        this._mouseMoves++;
                    }
                }
            }
        }, false);
        canvas.addEventListener("wheel", (e) => {
            const klocki = this._klocki;
            const world = klocki._theWorld;
            if (world !== null) {
                const thePlayer = world._thePlayer;
                const wheelEvent = e;
                let delta = wheelEvent.deltaY;
                if (wheelEvent.deltaMode == 0) {
                    delta /= 100;
                }
                thePlayer._scroll(delta);
            }
        }, false);
        window.addEventListener('beforeunload', (e) => {
            if (this._mouseLocked) {
                e.preventDefault();
                e.returnValue = "Do you really want to leave?";
                this._klocki._guiChat._appendMessage({ "text": "Press F11 to prevent CTRL+W", "color": "green" });
                return "Do you really want to leave?";
            }
            else {
                return void 0;
            }
        });
    }
    static _copyTouch(touch) {
        return new _SimpleTouch(touch.identifier, touch.pageX, touch.pageY);
    }
    _requestLock() {
        const canvas = this._klocki._display._canvas;
        canvas.requestPointerLock = canvas.requestPointerLock ||
            canvas.mozRequestPointerLock;
        canvas.requestPointerLock();
    }
    _isLocked() {
        return document.pointerLockElement === this._klocki._display._canvas || document.mozPointerLockElement === this._klocki._display._canvas;
    }
    _onLockChange(e) {
        if (this._isLocked()) {
            this._mouseLocked = true;
        }
        else {
            this._mouseLocked = false;
        }
    }
    _keydown(e) {
        const key = e.key.toLowerCase();
        if (e.ctrlKey && (key == 'w' || key == 's')) {
            e.preventDefault();
            e.stopPropagation();
        }
        const was = this._pressed.get(key);
        this._pressed.set(key, true);
        if (was) {
            return;
        }
        if (key == 'f5') {
            this._klocki._cyclePersonView();
        }
        if (key == 'f8') {
            this._klocki._toggleSmoothCam();
        }
        if (key == 'c') {
            this._klocki._yawSmoothSpeed = 0;
            this._klocki._pitchSmoothSpeed = 0;
        }
        if (key == 'a' && this._pressed.get('f3')) {
            const world = this._klocki._theWorld;
            if (world) {
                world._sections.forEach((v, k) => {
                    v._notify();
                });
            }
        }
    }
    _keyup(e) {
        const key = e.key.toLowerCase();
        this._pressed.set(key, false);
    }
    isPressed(key) {
        return this._pressed.get(key) === true;
    }
    _handleTouchEnd(evt) {
        evt.preventDefault();
        const touches = evt.changedTouches;
        let thePlayer = null;
        if (this._klocki._theWorld) {
            thePlayer = this._klocki._theWorld._thePlayer;
        }
        for (let i = 0; i < touches.length; i++) {
            const idx = this._ongoingTouchIndexById(touches[i].identifier);
            if (idx >= 0) {
                const touch = this._ongoingTouches[idx];
                const now = (new Date).getTime();
                const diff = now - touch._timeStart;
                if (thePlayer && touch._isMovement) {
                    thePlayer._touchMoveForward = 0;
                    thePlayer._touchMoveStrafe = 0;
                }
                if (thePlayer && diff < 150) {
                    thePlayer._jumping = true;
                }
                this._ongoingTouches.splice(idx, 1);
            }
            else {
            }
        }
    }
    _ongoingTouchIndexById(idToFind) {
        for (let i = 0; i < this._ongoingTouches.length; i++) {
            const id = this._ongoingTouches[i]._identifier;
            if (id == idToFind) {
                return i;
            }
        }
        return -1;
    }
    _handleTouchMove(evt) {
        evt.preventDefault();
        console.log("touch move");
        const touches = evt.changedTouches;
        let thePlayer = null;
        if (this._klocki._theWorld) {
            thePlayer = this._klocki._theWorld._thePlayer;
        }
        for (let i = 0; i < touches.length; i++) {
            const idx = this._ongoingTouchIndexById(touches[i].identifier);
            if (idx >= 0) {
                const touch = _Controls._copyTouch(touches[i]);
                const dx = touch._pageX - this._ongoingTouches[idx]._pageX;
                const dy = touch._pageY - this._ongoingTouches[idx]._pageY;
                touch._isMovement = this._ongoingTouches[idx]._isMovement;
                touch._timeStart = this._ongoingTouches[idx]._timeStart;
                if (thePlayer) {
                    if (touch._isMovement) {
                        let rx = touch._pageX / window.innerWidth;
                        let ry = touch._pageY / window.innerHeight;
                        rx -= 0.18;
                        ry -= 0.7;
                        rx *= 20;
                        ry *= 10;
                        thePlayer._touchMoveForward = -ry;
                        thePlayer._touchMoveStrafe = -rx;
                    }
                    else {
                        thePlayer._yaw += dx / 95;
                        thePlayer._pitch += dy / 95;
                        thePlayer._fixPitch();
                    }
                }
                this._ongoingTouches.splice(idx, 1, touch);
            }
            else {
            }
        }
    }
    _handleTouchStart(evt) {
        evt.preventDefault();
        const touches = evt.changedTouches;
        console.log("touch start");
        for (let i = 0; i < touches.length; i++) {
            const touch = _Controls._copyTouch(touches[i]);
            const rx = touch._pageX / window.innerWidth;
            const ry = touch._pageY / window.innerHeight;
            touch._isMovement = rx < 0.3 && ry > 0.5;
            touch._timeStart = (new Date).getTime();
            this._ongoingTouches.push(touch);
        }
    }
    _handleTouchCancel(evt) {
        evt.preventDefault();
        const touches = evt.changedTouches;
        for (let i = 0; i < touches.length; i++) {
            const idx = this._ongoingTouchIndexById(touches[i].identifier);
            this._ongoingTouches.splice(idx, 1);
        }
    }
    _handleOrientation(evt) {
        if (!util_1.isNumber(evt.alpha)) {
            return;
        }
        let thePlayer = null;
        if (this._klocki._theWorld) {
            thePlayer = this._klocki._theWorld._thePlayer;
        }
        if (thePlayer) {
            if (evt.absolute) {
                thePlayer._yaw += (evt.alpha / 180) * Math.PI;
                thePlayer._pitch += (evt.gamma / 180) * Math.PI;
            }
            else {
                if (this._lastOrientA == 1337) {
                }
                else {
                    let da = evt.alpha - this._lastOrientA;
                    let dg = evt.gamma - this._lastOrientG;
                    if (dg > 90) {
                        dg -= 180;
                    }
                    if (dg < -90) {
                        dg += 180;
                    }
                    if (da > 90 && da < 270) {
                        da -= 180;
                    }
                    if (da < -90 && da > -270) {
                        da += 180;
                    }
                    thePlayer._yaw -= (da / 180) * Math.PI;
                    thePlayer._pitch += (dg / 180) * Math.PI;
                }
                this._lastOrientA = evt.alpha;
                this._lastOrientB = evt.beta;
                this._lastOrientG = evt.gamma;
            }
        }
    }
    _addTouchHandlers() {
        console.log("registering touches");
        const canvas = this._klocki._display._canvas;
        canvas.addEventListener("touchstart", (e) => this._handleTouchStart(e), false);
        canvas.addEventListener("touchend", (e) => this._handleTouchEnd(e), false);
        canvas.addEventListener("touchcancel", (e) => this._handleTouchCancel(e), false);
        canvas.addEventListener("touchmove", (e) => this._handleTouchMove(e), false);
        window.addEventListener("deviceorientation", (e) => this._handleOrientation(e));
    }
}
exports._Controls = _Controls;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
let planes = new Array(6);
let plane = gl_matrix_1.vec4.create();
let distance = 0.001;
let minDistance = 9999999;
let i = 0;
class _Frustum {
    constructor() {
        const planes = new Array(6);
        this._planes = planes;
        for (let i = 0; i < 6; i++) {
            planes[i] = gl_matrix_1.vec4.create();
        }
    }
    _update(vpMat) {
        const planes = this._planes;
        planes[0][0] = vpMat[0 * 4 + 3] - vpMat[0 * 4 + 0];
        planes[0][1] = vpMat[1 * 4 + 3] - vpMat[1 * 4 + 0];
        planes[0][2] = vpMat[2 * 4 + 3] - vpMat[2 * 4 + 0];
        planes[0][3] = vpMat[3 * 4 + 3] - vpMat[3 * 4 + 0];
        planes[1][0] = vpMat[0 * 4 + 3] + vpMat[0 * 4 + 0];
        planes[1][1] = vpMat[1 * 4 + 3] + vpMat[1 * 4 + 0];
        planes[1][2] = vpMat[2 * 4 + 3] + vpMat[2 * 4 + 0];
        planes[1][3] = vpMat[3 * 4 + 3] + vpMat[3 * 4 + 0];
        planes[2][0] = vpMat[0 * 4 + 3] + vpMat[0 * 4 + 1];
        planes[2][1] = vpMat[1 * 4 + 3] + vpMat[1 * 4 + 1];
        planes[2][2] = vpMat[2 * 4 + 3] + vpMat[2 * 4 + 1];
        planes[2][3] = vpMat[3 * 4 + 3] + vpMat[3 * 4 + 1];
        planes[3][0] = vpMat[0 * 4 + 3] - vpMat[0 * 4 + 1];
        planes[3][1] = vpMat[1 * 4 + 3] - vpMat[1 * 4 + 1];
        planes[3][2] = vpMat[2 * 4 + 3] - vpMat[2 * 4 + 1];
        planes[3][3] = vpMat[3 * 4 + 3] - vpMat[3 * 4 + 1];
        planes[4][0] = vpMat[0 * 4 + 3] - vpMat[0 * 4 + 2];
        planes[4][1] = vpMat[1 * 4 + 3] - vpMat[1 * 4 + 2];
        planes[4][2] = vpMat[2 * 4 + 3] - vpMat[2 * 4 + 2];
        planes[4][3] = vpMat[3 * 4 + 3] - vpMat[3 * 4 + 2];
        planes[5][0] = vpMat[0 * 4 + 3] + vpMat[0 * 4 + 2];
        planes[5][1] = vpMat[1 * 4 + 3] + vpMat[1 * 4 + 2];
        planes[5][2] = vpMat[2 * 4 + 3] + vpMat[2 * 4 + 2];
        planes[5][3] = vpMat[3 * 4 + 3] + vpMat[3 * 4 + 2];
        for (let i = 0; i < 6; i++) {
            const p = planes[i];
            const mag = Math.sqrt(p[0] * p[0] + p[1] * p[1] + p[2] * p[2]);
            p[0] /= mag;
            p[1] /= mag;
            p[2] /= mag;
            p[3] /= mag;
        }
    }
    _testSphereTouches(pos, radius) {
        const planes = this._planes;
        for (let i = 0; i < 6; i++) {
            const plane = planes[i];
            const distance = plane[0] * pos[0] + plane[1] * pos[1] + plane[2] * pos[2] + plane[3];
            if (distance < radius) {
                return false;
            }
        }
        return true;
    }
    _testSphereFully(pos) {
        planes = this._planes;
        minDistance = 9999999;
        for (i = 0; i < 6; ++i) {
            plane = planes[i];
            distance = plane[0] * pos[0] + plane[1] * pos[1] + plane[2] * pos[2] + plane[3];
            if (distance < minDistance) {
                minDistance = distance;
            }
        }
        return minDistance;
    }
}
exports._Frustum = _Frustum;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _LineRenderer {
    constructor(klocki) {
        this._count = 0;
        this._posX = 0;
        this._posY = 0;
        this._posZ = 0;
        this._klocki = klocki;
        this._buf = new ArrayBuffer(1 * 1024 * 1024);
        this._u8 = new Uint8Array(this._buf);
        this._u16 = new Uint16Array(this._buf);
        this._u32 = new Uint32Array(this._buf);
        this._f32 = new Float32Array(this._buf);
        this._bufIndex = 0;
        this._glBuffer = this._klocki._display._gl.createBuffer();
        this._first = true;
        this._atlas = 0;
        this._stride = 16;
        this._reset();
    }
    _reset() {
        this._count = 0;
        this._bufIndex = 0;
        this._posX = 0;
        this._posY = 0;
        this._posZ = 0;
    }
    _pos(x, y, z) {
        const b = this._f32;
        const i = this._count * 4;
        b[i + 2] = z;
        b[i + 1] = y;
        b[i] = x;
        return this;
    }
    _color(color) {
        const b = this._u32;
        const i = this._count * 4 + 3;
        b[i] = color;
        return this;
    }
    _endVertex() {
        this._count++;
    }
    _setupPointersPosition(shaderWorld) {
        const stride = this._stride;
        const gl = this._klocki._display._gl;
        {
            const numComponents = 3;
            const type = gl.FLOAT;
            const normalize = false;
            const offset = 0;
            gl.vertexAttribPointer(shaderWorld._attribLocations._vertexPosition, numComponents, type, normalize, stride, offset);
            if (this._first) {
                gl.enableVertexAttribArray(shaderWorld._attribLocations._vertexPosition);
            }
        }
    }
    _setupPointersColor(shaderWorld) {
        const stride = this._stride;
        const gl = this._klocki._display._gl;
        {
            const numComponents = 4;
            const type = gl.UNSIGNED_BYTE;
            const normalize = true;
            const offset = 12;
            gl.vertexAttribPointer(shaderWorld._attribLocations._color, numComponents, type, normalize, stride, offset);
        }
        if (this._first) {
            gl.enableVertexAttribArray(shaderWorld._attribLocations._color);
        }
    }
    _setupPointers(shaderWorld) {
        this._setupPointersPosition(shaderWorld);
        this._setupPointersColor(shaderWorld);
        this._first = false;
    }
    _upload(shaderWorld) {
        const gl = this._klocki._display._gl;
        if (this._count > 0) {
            gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(this._buf, 0, this._count * this._stride), gl.DYNAMIC_DRAW);
        }
        return this._count;
    }
    _copyBuf() {
        return this._buf.slice(0, this._count * this._stride);
    }
    _putPrepared(prepared) {
        this._u8.set(prepared, this._count * this._stride);
    }
    _endAndUpload(shaderWorld) {
        const gl = this._klocki._display._gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this._glBuffer);
        const count = this._upload(shaderWorld);
        this._setupPointers(shaderWorld);
        if (count > 0) {
            gl.drawArrays(gl.LINES, 0, count);
        }
    }
    _drawOutline(sx, sy, sz, dx, dy, dz, color) {
        this._pos(sx, sy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy, sz + dz)._color(color)._endVertex();
        this._pos(sx + dx, sy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy, sz)._color(color)._endVertex();
        this._pos(sx, sy + dy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy + dy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy + dy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy + dy, sz + dz)._color(color)._endVertex();
        this._pos(sx + dx, sy + dy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy + dy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy + dy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy + dy, sz)._color(color)._endVertex();
        this._pos(sx, sy, sz)._color(color)._endVertex();
        this._pos(sx, sy + dy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy + dy, sz)._color(color)._endVertex();
        this._pos(sx + dx, sy, sz + dz)._color(color)._endVertex();
        this._pos(sx + dx, sy + dy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy, sz + dz)._color(color)._endVertex();
        this._pos(sx, sy + dy, sz + dz)._color(color)._endVertex();
    }
}
exports._LineRenderer = _LineRenderer;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Shader_1 = __webpack_require__(19);
class _ShaderLines extends Shader_1._Shader {
    constructor(klocki) {
        super();
        const vsSource = `#version 300 es
  in vec4 aVertexPosition;
  in vec4 aColor;

  uniform mat4 uProjectionMatrix;

  out lowp vec4 vertexColor;

  void main(void) {
    gl_Position = uProjectionMatrix * aVertexPosition;
    vertexColor = aColor;
  }
`;
        const fsSource = `#version 300 es
precision mediump float;

  in lowp vec4 vertexColor;


  out vec4 fragColor;
  void main(void) {
    fragColor = vertexColor;
  }
`;
        const gl = klocki._display._gl;
        const program = this._initShaderProgram(gl, vsSource, fsSource);
        this._program = program;
        this._attribLocations = {
            _vertexPosition: gl.getAttribLocation(program, 'aVertexPosition'),
            _color: gl.getAttribLocation(program, 'aColor'),
        };
        this._uniformLocations = {
            _projectionMatrix: gl.getUniformLocation(program, 'uProjectionMatrix'),
        };
    }
}
exports._ShaderLines = _ShaderLines;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _UIRenderer {
    constructor(_klocki) {
        this._klocki = _klocki;
        const gl = this._klocki._display._gl;
        const glBuf = gl.createBuffer();
        if (glBuf === null) {
            throw new Error("can't UI buffer");
        }
        this._buf = new ArrayBuffer(1 * 1024 * 1024);
        gl.bindBuffer(gl.ARRAY_BUFFER, glBuf);
        gl.bufferData(gl.ARRAY_BUFFER, this._buf.byteLength, gl.DYNAMIC_DRAW);
        this._u16 = new Uint16Array(this._buf);
        this._u32 = new Uint32Array(this._buf);
        this._bufIndex = 0;
        this._glBuffer = glBuf;
        this._first = true;
        this._atlas = 0;
        this._count = 0;
        this._reset();
    }
    _reset() {
        this._count = 0;
        this._bufIndex = 0;
    }
    _pos(x, y, z) {
        const b = this._u16;
        const i = this._count * 8;
        b[i] = Math.round(x);
        b[i + 1] = Math.round(y);
        b[i + 2] = 0;
        return this;
    }
    _tex(tx, ty) {
        const b = this._u16;
        const i = this._count * 8 + 3;
        b[i] = Math.floor(tx * 32767);
        b[i + 1] = Math.floor(ty * 32767);
        b[i + 2] = this._atlas;
        return this;
    }
    _color(color) {
        const b = this._u32;
        const i = this._count * 4 + 3;
        b[i] = color;
        return this;
    }
    _endVertex() {
        this._count++;
    }
    _endAndUpload(programInfo) {
        if (this._count === 0) {
            return;
        }
        const stride = 2 * 8;
        const gl = this._klocki._display._gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this._glBuffer);
        const len = this._count * stride;
        gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Uint8Array(this._buf, 0, len), 0, len);
        {
            const numComponents = 3;
            const type = gl.SHORT;
            const normalize = false;
            const offset = 0;
            gl.vertexAttribPointer(programInfo._attribLocations._vertexPosition, numComponents, type, normalize, stride, offset);
            if (this._first) {
                gl.enableVertexAttribArray(programInfo._attribLocations._vertexPosition);
            }
        }
        {
            const numComponents = 2;
            const type = gl.SHORT;
            const normalize = true;
            const offset = 6;
            gl.vertexAttribPointer(programInfo._attribLocations._textureCoord, numComponents, type, normalize, stride, offset);
            if (this._first) {
                gl.enableVertexAttribArray(programInfo._attribLocations._textureCoord);
            }
        }
        {
            const numComponents = 1;
            const type = gl.SHORT;
            const normalize = false;
            const offset = 10;
            gl.vertexAttribPointer(programInfo._attribLocations._textureAtlas, numComponents, type, normalize, stride, offset);
            if (this._first) {
                gl.enableVertexAttribArray(programInfo._attribLocations._textureAtlas);
            }
        }
        {
            const numComponents = 4;
            const type = gl.UNSIGNED_BYTE;
            const normalize = true;
            const offset = 12;
            gl.vertexAttribPointer(programInfo._attribLocations._color, numComponents, type, normalize, stride, offset);
            if (this._first) {
                gl.enableVertexAttribArray(programInfo._attribLocations._color);
            }
        }
        this._first = false;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._klocki._display._indexBuffer);
        gl.drawElements(gl.TRIANGLES, this._count * (6 / 4), gl.UNSIGNED_INT, 0);
    }
}
exports._UIRenderer = _UIRenderer;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const RenderPlayer_1 = __webpack_require__(188);
const RenderCreeper_1 = __webpack_require__(189);
const RenderItemFrame_1 = __webpack_require__(190);
class _EntityRenders {
    constructor(klocki) {
        this._renderPlayer = new RenderPlayer_1._RenderPlayer(klocki);
        this._renderCreeper = new RenderCreeper_1._RenderCreeper(klocki);
        this._renderItemFrame = new RenderItemFrame_1._RenderItemFrame(klocki);
    }
}
exports._EntityRenders = _EntityRenders;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
const RenderEntityLiving_1 = __webpack_require__(27);
class _RenderPlayer extends RenderEntityLiving_1._RenderEntity {
    _render(entity) {
        super._render(entity);
        const playerScale = 0.9375;
        const partial = this._klocki._getPartialTicks();
        const matEntity = RenderEntityLiving_1._RenderEntity._positionMatrix;
        gl_matrix_1.mat4.scale(matEntity, matEntity, [playerScale, playerScale, playerScale]);
        gl_matrix_1.mat4.translate(_RenderPlayer._headMatrix, _RenderPlayer._positionMatrix, [0, 12 / 16 + 12 / 16, 0]);
        gl_matrix_1.mat4.translate(_RenderPlayer._chestMatrix, _RenderPlayer._positionMatrix, [0, 12 / 16 + 6 / 16, 0]);
        const wr = this._klocki._worldRendererMobs;
        const limbSwing = entity._limbSwing - entity._limbSwingAmount * (1 - partial);
        const limbSwingAmount = entity._prevLimbSwingAmount + (entity._limbSwingAmount - entity._prevLimbSwingAmount) * partial;
        const armTime = 0;
        gl_matrix_1.mat4.rotateX(_RenderPlayer._headMatrix, _RenderPlayer._headMatrix, -entity._renderPitch(partial));
        entity._headBox._renderAt(wr, _RenderPlayer._headMatrix);
        entity._headOBox._renderAt(wr, _RenderPlayer._headMatrix);
        entity._chestBox._renderAt(wr, _RenderPlayer._chestMatrix);
        entity._chestOBox._renderAt(wr, _RenderPlayer._chestMatrix);
        gl_matrix_1.mat4.translate(_RenderPlayer._legRightMatrix, _RenderPlayer._positionMatrix, [-2 / 16, 12 / 16, 0]);
        const rightLegRotX = (Math.sin(limbSwing * 0.6662) * 1.4 * limbSwingAmount);
        gl_matrix_1.mat4.rotateX(_RenderPlayer._legRightMatrix, _RenderPlayer._legRightMatrix, rightLegRotX);
        gl_matrix_1.mat4.translate(_RenderPlayer._legLeftMatrix, _RenderPlayer._positionMatrix, [2 / 16, 12 / 16, 0]);
        const leftLegRotX = (Math.sin(limbSwing * 0.6662 + Math.PI) * 1.4 * limbSwingAmount);
        gl_matrix_1.mat4.rotateX(_RenderPlayer._legLeftMatrix, _RenderPlayer._legLeftMatrix, leftLegRotX);
        entity._legRightBox._renderAt(wr, _RenderPlayer._legRightMatrix);
        entity._legRightOBox._renderAt(wr, _RenderPlayer._legRightMatrix);
        entity._legLeftBox._renderAt(wr, _RenderPlayer._legLeftMatrix);
        entity._legLeftOBox._renderAt(wr, _RenderPlayer._legLeftMatrix);
        let iTime = entity._idleTime;
        iTime += this._klocki._timer._deltaTime * 0.02;
        if (iTime > Math.PI * 2) {
            iTime -= Math.PI * 2;
        }
        gl_matrix_1.mat4.translate(_RenderPlayer._armRightMatrix, _RenderPlayer._positionMatrix, [-6 / 16, 12 / 16 + 12 / 16, 0]);
        gl_matrix_1.mat4.rotateZ(_RenderPlayer._armRightMatrix, _RenderPlayer._armRightMatrix, (Math.cos(iTime) * 0.06) - 0.06);
        const rightRotX = (Math.sin(limbSwing * 0.6662 + Math.PI) * limbSwingAmount) - ((7.5 - Math.abs(armTime - 7.5)) / 7.5);
        gl_matrix_1.mat4.rotateX(_RenderPlayer._armRightMatrix, _RenderPlayer._armRightMatrix, rightRotX);
        entity._armRightBox._renderAt(wr, _RenderPlayer._armRightMatrix);
        entity._armRightOBox._renderAt(wr, _RenderPlayer._armRightMatrix);
        gl_matrix_1.mat4.translate(_RenderPlayer._armLeftMatrix, _RenderPlayer._positionMatrix, [6 / 16, 12 / 16 + 12 / 16, 0]);
        gl_matrix_1.mat4.rotateZ(_RenderPlayer._armLeftMatrix, _RenderPlayer._armLeftMatrix, -(Math.cos(iTime) * 0.06) + 0.06);
        const leftRotX = (Math.sin(limbSwing * 0.6662) * limbSwingAmount);
        gl_matrix_1.mat4.rotateX(_RenderPlayer._armLeftMatrix, _RenderPlayer._armLeftMatrix, leftRotX);
        entity._armLeftBox._renderAt(wr, _RenderPlayer._armLeftMatrix);
        entity._armLeftOBox._renderAt(wr, _RenderPlayer._armLeftMatrix);
    }
}
exports._RenderPlayer = _RenderPlayer;
_RenderPlayer._headMatrix = gl_matrix_1.mat4.create();
_RenderPlayer._chestMatrix = gl_matrix_1.mat4.create();
_RenderPlayer._legRightMatrix = gl_matrix_1.mat4.create();
_RenderPlayer._legLeftMatrix = gl_matrix_1.mat4.create();
_RenderPlayer._armLeftMatrix = gl_matrix_1.mat4.create();
_RenderPlayer._armRightMatrix = gl_matrix_1.mat4.create();


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
const RenderEntityLiving_1 = __webpack_require__(27);
const RenderBox_1 = __webpack_require__(22);
const Klocki_1 = __webpack_require__(2);
class _RenderCreeper extends RenderEntityLiving_1._RenderEntity {
    constructor(klocki) {
        super(klocki);
        this._skinLoaded = false;
        const skinInfo = klocki._textureManager._loadTextureFromURL("assets/" + Klocki_1._Klocki._forbiddenWord + "/textures/entity/creeper/creeper.png", null, (tex) => {
            const limbOffsets = [
                [0, 16, 0, 32],
                [16, 48, 0, 48],
                [32, 48, 48, 48],
                [40, 16, 40, 32],
            ];
            const limbBoxes = this._limbBoxes = new Array(8);
            for (let i = 0; i < 4; i++) {
                const off = limbOffsets[i];
                const litex = tex._stdBox64(off[0] + 4, off[1] + 4, 4, 12, 4);
                const lotex = tex._stdBox64(off[2] + 4, off[3] + 4, 4, 12, 4);
                limbBoxes[i * 2] = new RenderBox_1._RenderBox(klocki, -2 / 16, -12 / 16, -2 / 16, 4 / 16, 12 / 16, 4 / 16, litex);
                limbBoxes[i * 2 + 1] = new RenderBox_1._RenderBox(klocki, -2.2 / 16, -12.2 / 16, -2.2 / 16, 4.4 / 16, 12.4 / 16, 4.4 / 16, lotex);
            }
            this._headBox = new RenderBox_1._RenderBox(klocki, -4 / 16, 0, -4 / 16, 8 / 16, 8 / 16, 8 / 16, tex._stdBox64(8, 8, 8, 8, 8));
            this._headOBox = new RenderBox_1._RenderBox(klocki, -4.2 / 16, -0.2 / 16, -4.2 / 16, 8.4 / 16, 8.4 / 16, 8.4 / 16, tex._stdBox64(8 + 32, 8, 8, 8, 8));
            this._chestBox = new RenderBox_1._RenderBox(klocki, -4 / 16, -6 / 16, -2 / 16, 8 / 16, 12 / 16, 4 / 16, tex._stdBox64(20, 20, 8, 12, 4));
            this._chestOBox = new RenderBox_1._RenderBox(klocki, -4.2 / 16, -6.2 / 16, -2.2 / 16, 8.4 / 16, 12.4 / 16, 4.4 / 16, tex._stdBox64(20, 20 + 16, 8, 12, 4));
            this._legRightBox = limbBoxes[0];
            this._legRightOBox = limbBoxes[1];
            this._legLeftBox = limbBoxes[2];
            this._legLeftOBox = limbBoxes[3];
            this._armRightBox = limbBoxes[4];
            this._armRightOBox = limbBoxes[5];
            this._armLeftBox = limbBoxes[6];
            this._armLeftOBox = limbBoxes[7];
            this._skinLoaded = true;
        }, false);
        this._skinInfo = skinInfo;
    }
    _render(entity) {
        if (!this._skinLoaded) {
            return;
        }
        super._render(entity);
        const partial = this._klocki._getPartialTicks();
        gl_matrix_1.mat4.translate(_RenderCreeper._headMatrix, RenderEntityLiving_1._RenderEntity._positionMatrix, [0, 12 / 16 + 12 / 16, 0]);
        gl_matrix_1.mat4.translate(_RenderCreeper._chestMatrix, RenderEntityLiving_1._RenderEntity._positionMatrix, [0, 12 / 16 + 6 / 16, 0]);
        const wr = this._klocki._worldRendererMobs;
        const limbSwing = entity._limbSwing - entity._limbSwingAmount * (1 - partial);
        const limbSwingAmount = entity._prevLimbSwingAmount + (entity._limbSwingAmount - entity._prevLimbSwingAmount) * partial;
        const armTime = 0;
        gl_matrix_1.mat4.rotateX(_RenderCreeper._headMatrix, _RenderCreeper._headMatrix, -entity._renderPitch(partial));
        this._headBox._renderAt(wr, _RenderCreeper._headMatrix);
        this._headOBox._renderAt(wr, _RenderCreeper._headMatrix);
        this._chestBox._renderAt(wr, _RenderCreeper._chestMatrix);
        this._chestOBox._renderAt(wr, _RenderCreeper._chestMatrix);
        gl_matrix_1.mat4.translate(_RenderCreeper._legRightMatrix, _RenderCreeper._positionMatrix, [-2 / 16, 12 / 16, 0]);
        const rightLegRotX = (Math.sin(limbSwing * 0.6662) * 1.4 * limbSwingAmount);
        gl_matrix_1.mat4.rotateX(_RenderCreeper._legRightMatrix, _RenderCreeper._legRightMatrix, rightLegRotX);
        gl_matrix_1.mat4.translate(_RenderCreeper._legLeftMatrix, _RenderCreeper._positionMatrix, [2 / 16, 12 / 16, 0]);
        const leftLegRotX = (Math.sin(limbSwing * 0.6662 + Math.PI) * 1.4 * limbSwingAmount);
        gl_matrix_1.mat4.rotateX(_RenderCreeper._legLeftMatrix, _RenderCreeper._legLeftMatrix, leftLegRotX);
        this._legRightBox._renderAt(wr, _RenderCreeper._legRightMatrix);
        this._legRightOBox._renderAt(wr, _RenderCreeper._legRightMatrix);
        this._legLeftBox._renderAt(wr, _RenderCreeper._legLeftMatrix);
        this._legLeftOBox._renderAt(wr, _RenderCreeper._legLeftMatrix);
        gl_matrix_1.mat4.translate(_RenderCreeper._armRightMatrix, _RenderCreeper._positionMatrix, [-6 / 16, 12 / 16 + 12 / 16, 0]);
        const rightRotX = (Math.sin(limbSwing * 0.6662 + Math.PI) * limbSwingAmount) - ((7.5 - Math.abs(armTime - 7.5)) / 7.5);
        gl_matrix_1.mat4.rotateX(_RenderCreeper._armRightMatrix, _RenderCreeper._armRightMatrix, rightRotX);
        this._armRightBox._renderAt(wr, _RenderCreeper._armRightMatrix);
        this._armRightOBox._renderAt(wr, _RenderCreeper._armRightMatrix);
        gl_matrix_1.mat4.translate(_RenderCreeper._armLeftMatrix, _RenderCreeper._positionMatrix, [6 / 16, 12 / 16 + 12 / 16, 0]);
        const leftRotX = (Math.sin(limbSwing * 0.6662) * limbSwingAmount);
        gl_matrix_1.mat4.rotateX(_RenderCreeper._armLeftMatrix, _RenderCreeper._armLeftMatrix, leftRotX);
        this._armLeftBox._renderAt(wr, _RenderCreeper._armLeftMatrix);
        this._armLeftOBox._renderAt(wr, _RenderCreeper._armLeftMatrix);
    }
}
exports._RenderCreeper = _RenderCreeper;
_RenderCreeper._headMatrix = gl_matrix_1.mat4.create();
_RenderCreeper._chestMatrix = gl_matrix_1.mat4.create();
_RenderCreeper._legRightMatrix = gl_matrix_1.mat4.create();
_RenderCreeper._legLeftMatrix = gl_matrix_1.mat4.create();
_RenderCreeper._armLeftMatrix = gl_matrix_1.mat4.create();
_RenderCreeper._armRightMatrix = gl_matrix_1.mat4.create();


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gl_matrix_1 = __webpack_require__(5);
const RenderEntityLiving_1 = __webpack_require__(27);
const RenderBox_1 = __webpack_require__(22);
const Klocki_1 = __webpack_require__(2);
class _RenderItemFrame extends RenderEntityLiving_1._RenderEntity {
    constructor(klocki) {
        super(klocki);
        this._skinLoaded = false;
        const skinInfo = klocki._textureManager._loadTextureFromURL("assets/" + Klocki_1._Klocki._forbiddenWord + "/textures/entity/creeper/creeper.png", null, (tex) => {
            const limbOffsets = [
                [0, 16, 0, 32],
                [16, 48, 0, 48],
                [32, 48, 48, 48],
                [40, 16, 40, 32],
            ];
            const limbBoxes = this._limbBoxes = new Array(8);
            for (let i = 0; i < 4; i++) {
                const off = limbOffsets[i];
                const litex = tex._stdBox64(off[0] + 4, off[1] + 4, 4, 12, 4);
                const lotex = tex._stdBox64(off[2] + 4, off[3] + 4, 4, 12, 4);
                limbBoxes[i * 2] = new RenderBox_1._RenderBox(klocki, -2 / 16, -12 / 16, -2 / 16, 4 / 16, 12 / 16, 4 / 16, litex);
                limbBoxes[i * 2 + 1] = new RenderBox_1._RenderBox(klocki, -2.2 / 16, -12.2 / 16, -2.2 / 16, 4.4 / 16, 12.4 / 16, 4.4 / 16, lotex);
            }
            this._headBox = new RenderBox_1._RenderBox(klocki, -4 / 16, 0, -4 / 16, 8 / 16, 8 / 16, 8 / 16, tex._stdBox64(8, 8, 8, 8, 8));
            this._headOBox = new RenderBox_1._RenderBox(klocki, -4.2 / 16, -0.2 / 16, -4.2 / 16, 8.4 / 16, 8.4 / 16, 8.4 / 16, tex._stdBox64(8 + 32, 8, 8, 8, 8));
            this._chestBox = new RenderBox_1._RenderBox(klocki, -4 / 16, -6 / 16, -2 / 16, 8 / 16, 12 / 16, 4 / 16, tex._stdBox64(20, 20, 8, 12, 4));
            this._chestOBox = new RenderBox_1._RenderBox(klocki, -4.2 / 16, -6.2 / 16, -2.2 / 16, 8.4 / 16, 12.4 / 16, 4.4 / 16, tex._stdBox64(20, 20 + 16, 8, 12, 4));
            this._legRightBox = limbBoxes[0];
            this._legRightOBox = limbBoxes[1];
            this._legLeftBox = limbBoxes[2];
            this._legLeftOBox = limbBoxes[3];
            this._armRightBox = limbBoxes[4];
            this._armRightOBox = limbBoxes[5];
            this._armLeftBox = limbBoxes[6];
            this._armLeftOBox = limbBoxes[7];
            this._skinLoaded = true;
        }, false);
        this._skinInfo = skinInfo;
    }
    _render(entity) {
        if (!this._skinLoaded) {
            return;
        }
        super._render(entity);
    }
}
exports._RenderItemFrame = _RenderItemFrame;
_RenderItemFrame._headMatrix = gl_matrix_1.mat4.create();
_RenderItemFrame._chestMatrix = gl_matrix_1.mat4.create();
_RenderItemFrame._legRightMatrix = gl_matrix_1.mat4.create();
_RenderItemFrame._legLeftMatrix = gl_matrix_1.mat4.create();
_RenderItemFrame._armLeftMatrix = gl_matrix_1.mat4.create();
_RenderItemFrame._armRightMatrix = gl_matrix_1.mat4.create();


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Klocki_1 = __webpack_require__(2);
const Gui_1 = __webpack_require__(62);
class _GuiOverlayEquipment extends Gui_1._Gui {
    constructor(klocki) {
        super(klocki);
        this._widgetsTexture = this._klocki._textureManager._loadCached("assets/" + Klocki_1._Klocki._forbiddenWord + "/textures/gui/widgets.png", false);
    }
    _render() {
        if (this._widgetsTexture._promise == null) {
            this._centeredHotbarTex(182, 22, 0, 0, 0);
            const world = this._klocki._theWorld;
            if (world) {
                const player = world._thePlayer;
                const selected = player._selectedHotbarSlot;
                this._centeredHotbarTex(22, 22, 0, 23, 2 * 20 * (selected - 4));
                for (let i = 0; i < 9; i++) {
                    const slot = player._inventory._mainInventory[27 + i];
                    const itemStack = slot._item;
                    if (itemStack) {
                        const itemID = itemStack._id;
                        const item = this._klocki._itemRegistry._itemsByLegacyID[itemID];
                        if (item) {
                            const itemName = item._name;
                            const itemTex = this._klocki._textureManager._loadCached("assets/" + Klocki_1._Klocki._forbiddenWord + "/textures/item/" + itemName + ".png", false);
                            this._centeredItemTex(itemTex, 16, 16, 2 * 20 * (i - 4), -6);
                        }
                    }
                }
            }
        }
    }
    _centeredHotbarTex(sizex, sizey, texoffx, texoffy, offsetx) {
        const sc = 2;
        const sx = this._klocki._display._width;
        const sy = this._klocki._display._height;
        let cx = (sx >> 1) + offsetx;
        const uir = this._klocki._uiRenderer;
        const tex = this._widgetsTexture;
        const tox = tex._texOffsetX + tex._texScaleX * (texoffx / 256);
        const toy = tex._texOffsetY + tex._texScaleY * (texoffy / 256);
        const tsx = tex._texScaleX * (sizex / 256);
        const tsy = tex._texScaleY * (sizey / 256);
        uir._pos(sc * (cx - sizex), sc * (sy - sizey * 2), 0)._tex(tox, toy)._color(0xFFFFFFFF)._endVertex();
        uir._pos(sc * (cx + sizex), sc * (sy - sizey * 2), 0)._tex(tox + tsx, toy)._color(0xFFFFFFFF)._endVertex();
        uir._pos(sc * (cx - sizex), sc * (sy), 0)._tex(tox, toy + tsy)._color(0xFFFFFFFF)._endVertex();
        uir._pos(sc * (cx + sizex), sc * (sy), 0)._tex(tox + tsx, toy + tsy)._color(0xFFFFFFFF)._endVertex();
    }
    _centeredItemTex(tex, sizex, sizey, offsetx, offsety) {
        const sc = 2;
        const sx = this._klocki._display._width;
        const sy = this._klocki._display._height;
        let cx = (sx >> 1) + offsetx;
        let cy = sy + offsety;
        const uir = this._klocki._uiRenderer;
        const tox = tex._texOffsetX;
        const toy = tex._texOffsetY;
        const tsx = tex._texScaleX;
        const tsy = tex._texScaleY;
        uir._pos(sc * (cx - sizex), sc * (cy - sizey * 2), 0)._tex(tox, toy)._color(0xFFFFFFFF)._endVertex();
        uir._pos(sc * (cx + sizex), sc * (cy - sizey * 2), 0)._tex(tox + tsx, toy)._color(0xFFFFFFFF)._endVertex();
        uir._pos(sc * (cx - sizex), sc * (cy), 0)._tex(tox, toy + tsy)._color(0xFFFFFFFF)._endVertex();
        uir._pos(sc * (cx + sizex), sc * (cy), 0)._tex(tox + tsx, toy + tsy)._color(0xFFFFFFFF)._endVertex();
    }
}
exports._GuiOverlayEquipment = _GuiOverlayEquipment;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Item_1 = __webpack_require__(28);
const ItemBlock_1 = __webpack_require__(193);
const Items_1 = __webpack_require__(194);
const CreativeTabs_1 = __webpack_require__(195);
class _ItemRegistry {
    constructor(klocki) {
        this._klocki = klocki;
        this._itemsByLegacyID = new Array(1024);
    }
    _registerItems() {
        const registerItemBlock = (b, i) => {
        };
        const registerItem = (legacyId, name, i) => {
            this._itemsByLegacyID[legacyId] = i;
            i._setName(name);
        };
        const h = this._klocki._blockRegistry._helper;
        registerItemBlock(h._STONE, (new ItemBlock_1._ItemMultiTexture(h._STONE, h._STONE))._setUnlocalizedName("stone"));
        registerItemBlock(h._GRASS, new ItemBlock_1._ItemColored(h._GRASS, false));
        registerItemBlock(h._DIRT, (new ItemBlock_1._ItemMultiTexture(h._DIRT, h._DIRT))._setUnlocalizedName("dirt"));
        registerItemBlock(h._COBBLESTONE);
        registerItemBlock(h._OAK_PLANKS, (new ItemBlock_1._ItemMultiTexture(h._OAK_PLANKS, h._OAK_PLANKS))._setUnlocalizedName("wood"));
        registerItemBlock(h._OAK_SAPLING, (new ItemBlock_1._ItemMultiTexture(h._OAK_SAPLING, h._OAK_SAPLING))._setUnlocalizedName("sapling"));
        registerItemBlock(h._BEDROCK);
        registerItem(256, "iron_shovel", (new Items_1._ItemSpade(Item_1._Item._ToolMaterial._IRON))._setUnlocalizedName("shovelIron"));
        registerItem(257, "iron_pickaxe", (new Items_1._ItemPickaxe(Item_1._Item._ToolMaterial._IRON))._setUnlocalizedName("pickaxeIron"));
        registerItem(258, "iron_axe", (new Items_1._ItemAxe(Item_1._Item._ToolMaterial._IRON))._setUnlocalizedName("hatchetIron"));
        registerItem(259, "flint_and_steel", (new Items_1._ItemFlintAndSteel())._setUnlocalizedName("flintAndSteel"));
        registerItem(260, "apple", (new Items_1._ItemFood(4, 0.3, false))._setUnlocalizedName("apple"));
        registerItem(261, "bow", (new Items_1._ItemBow())._setUnlocalizedName("bow"));
        registerItem(262, "arrow", (new Item_1._Item())._setUnlocalizedName("arrow")._setCreativeTab(CreativeTabs_1._CreativeTabs._tabCombat));
        registerItem(263, "coal", (new Items_1._ItemCoal())._setUnlocalizedName("coal"));
        registerItem(264, "diamond", (new Item_1._Item())._setUnlocalizedName("diamond")._setCreativeTab(CreativeTabs_1._CreativeTabs._tabMaterials));
        registerItem(265, "iron_ingot", (new Item_1._Item())._setUnlocalizedName("ingotIron")._setCreativeTab(CreativeTabs_1._CreativeTabs._tabMaterials));
        registerItem(266, "gold_ingot", (new Item_1._Item())._setUnlocalizedName("ingotGold")._setCreativeTab(CreativeTabs_1._CreativeTabs._tabMaterials));
        registerItem(267, "iron_sword", (new Items_1._ItemSword(Item_1._Item._ToolMaterial._IRON))._setUnlocalizedName("swordIron"));
        registerItem(268, "wooden_sword", (new Items_1._ItemSword(Item_1._Item._ToolMaterial._WOOD))._setUnlocalizedName("swordWood"));
        registerItem(269, "wooden_shovel", (new Items_1._ItemSpade(Item_1._Item._ToolMaterial._WOOD))._setUnlocalizedName("shovelWood"));
        registerItem(270, "wooden_pickaxe", (new Items_1._ItemPickaxe(Item_1._Item._ToolMaterial._WOOD))._setUnlocalizedName("pickaxeWood"));
        registerItem(271, "wooden_axe", (new Items_1._ItemAxe(Item_1._Item._ToolMaterial._WOOD))._setUnlocalizedName("hatchetWood"));
        registerItem(272, "stone_sword", (new Items_1._ItemSword(Item_1._Item._ToolMaterial._STONE))._setUnlocalizedName("swordStone"));
        registerItem(273, "stone_shovel", (new Items_1._ItemSpade(Item_1._Item._ToolMaterial._STONE))._setUnlocalizedName("shovelStone"));
        registerItem(274, "stone_pickaxe", (new Items_1._ItemPickaxe(Item_1._Item._ToolMaterial._STONE))._setUnlocalizedName("pickaxeStone"));
        registerItem(275, "stone_axe", (new Items_1._ItemAxe(Item_1._Item._ToolMaterial._STONE))._setUnlocalizedName("hatchetStone"));
        registerItem(276, "diamond_sword", (new Items_1._ItemSword(Item_1._Item._ToolMaterial._DIAMOND))._setUnlocalizedName("swordDiamond"));
        registerItem(277, "diamond_shovel", (new Items_1._ItemSpade(Item_1._Item._ToolMaterial._DIAMOND))._setUnlocalizedName("shovelDiamond"));
        registerItem(278, "diamond_pickaxe", (new Items_1._ItemPickaxe(Item_1._Item._ToolMaterial._DIAMOND))._setUnlocalizedName("pickaxeDiamond"));
        registerItem(279, "diamond_axe", (new Items_1._ItemAxe(Item_1._Item._ToolMaterial._DIAMOND))._setUnlocalizedName("hatchetDiamond"));
    }
}
exports._ItemRegistry = _ItemRegistry;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Item_1 = __webpack_require__(28);
class _ItemBlock extends Item_1._Item {
}
exports._ItemBlock = _ItemBlock;
class _ItemMultiTexture extends _ItemBlock {
    constructor(b1, b2) {
        super();
    }
}
exports._ItemMultiTexture = _ItemMultiTexture;
class _ItemColored extends _ItemBlock {
    constructor(b1, a) {
        super();
    }
}
exports._ItemColored = _ItemColored;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Item_1 = __webpack_require__(28);
class _ItemSpade extends Item_1._Item {
    constructor(material) {
        super();
    }
}
exports._ItemSpade = _ItemSpade;
class _ItemPickaxe extends Item_1._Item {
    constructor(material) {
        super();
    }
}
exports._ItemPickaxe = _ItemPickaxe;
class _ItemAxe extends Item_1._Item {
    constructor(material) {
        super();
    }
}
exports._ItemAxe = _ItemAxe;
class _ItemSword extends Item_1._Item {
    constructor(material) {
        super();
    }
}
exports._ItemSword = _ItemSword;
class _ItemFlintAndSteel extends Item_1._Item {
}
exports._ItemFlintAndSteel = _ItemFlintAndSteel;
class _ItemFood extends Item_1._Item {
    constructor(a, b, c) {
        super();
    }
}
exports._ItemFood = _ItemFood;
class _ItemBow extends Item_1._Item {
}
exports._ItemBow = _ItemBow;
class _ItemCoal extends Item_1._Item {
}
exports._ItemCoal = _ItemCoal;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _CreativeTabs {
}
exports._CreativeTabs = _CreativeTabs;
_CreativeTabs._tabMaterials = 0;
_CreativeTabs._tabCombat = 0;


/***/ })
/******/ ]);
//# sourceMappingURL=main.js.map